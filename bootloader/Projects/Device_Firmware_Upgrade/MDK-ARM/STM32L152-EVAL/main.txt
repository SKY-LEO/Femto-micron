; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\main.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\main.d --feedback=.\STM32L152-EVAL\STM32L152-EVAL.fed --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL --omf_browse=.\stm32l152-eval\main.crf ..\src\main.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;66     *******************************************************************************/
;;;67     int main(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;68     {
;;;69       
;;;70     GPIO_InitTypeDef   GPIO_InitStructure;
;;;71     
;;;72     RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);  
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;73     
;;;74     GPIO_StructInit(&GPIO_InitStructure);
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       GPIO_StructInit
;;;75     GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
;;;76     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
000010  2001              MOVS     r0,#1
000012  f88d0004          STRB     r0,[sp,#4]
;;;77     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000016  2000              MOVS     r0,#0
000018  f88d0006          STRB     r0,[sp,#6]
;;;78     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
00001c  2103              MOVS     r1,#3
00001e  f88d1005          STRB     r1,[sp,#5]
;;;79     GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;80     GPIO_Init(GPIOA, &GPIO_InitStructure);
000022  4d2f              LDR      r5,|L1.224|
000024  f44f6480          MOV      r4,#0x400             ;75
000028  f88d0007          STRB     r0,[sp,#7]            ;79
00002c  9400              STR      r4,[sp,#0]            ;76
00002e  4669              MOV      r1,sp
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       GPIO_Init
;;;81     GPIO_ResetBits(GPIOA,GPIO_Pin_10);// устанавливаем напряжение на 3 вольта
000036  4621              MOV      r1,r4
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       GPIO_ResetBits
;;;82     delay_ms(100);
00003e  2064              MOVS     r0,#0x64
000040  f7fffffe          BL       delay_ms
;;;83       
;;;84       DFU_Button_Config();
000044  f7fffffe          BL       DFU_Button_Config
;;;85       
;;;86       /* Check if the Key push-button on STM3210x-EVAL Board is pressed */
;;;87       if(RTC_ReadBackupRegister(RTC_BKP_DR1) != 0x1234)
000048  2001              MOVS     r0,#1
00004a  f7fffffe          BL       RTC_ReadBackupRegister
;;;88       {
;;;89         if (DFU_Button_Read() != 0x00)
;;;90         { /* Test if user code is programmed starting from address 0x8003000 */
;;;91           if (((*(__IO uint32_t*)ApplicationAddress) & 0x2FFE0000 ) == 0x20000000)
;;;92           { /* Jump to user application */
;;;93       
;;;94             JumpAddress = *(__IO uint32_t*) (ApplicationAddress + 4);
00004e  4c25              LDR      r4,|L1.228|
000050  f5a05190          SUB      r1,r0,#0x1200         ;87
000054  3934              SUBS     r1,r1,#0x34           ;87
000056  d011              BEQ      |L1.124|
000058  f7fffffe          BL       DFU_Button_Read
00005c  b190              CBZ      r0,|L1.132|
00005e  4822              LDR      r0,|L1.232|
000060  6801              LDR      r1,[r0,#0]            ;91
000062  4a22              LDR      r2,|L1.236|
000064  4011              ANDS     r1,r1,r2              ;91
000066  f1b15f00          CMP      r1,#0x20000000        ;91
00006a  d10b              BNE      |L1.132|
00006c  6841              LDR      r1,[r0,#4]
;;;95             Jump_To_Application = (pFunction) JumpAddress;
00006e  60a1              STR      r1,[r4,#8]  ; JumpAddress
;;;96             /* Initialize user application's Stack Pointer */
;;;97             __set_MSP(*(__IO uint32_t*) ApplicationAddress);
000070  6061              STR      r1,[r4,#4]  ; Jump_To_Application
000072  6800              LDR      r0,[r0,#0]
000074  f3808808          MSR      MSP,r0
;;;98             Jump_To_Application();
000078  4788              BLX      r1
00007a  e003              B        |L1.132|
                  |L1.124|
;;;99           }
;;;100        } /* Otherwise enters DFU mode to allow user to program his application */
;;;101      } else
;;;102      {
;;;103        RTC_WriteBackupRegister(RTC_BKP_DR1,0x0);
00007c  2100              MOVS     r1,#0
00007e  2001              MOVS     r0,#1
000080  f7fffffe          BL       RTC_WriteBackupRegister
                  |L1.132|
;;;104      }
;;;105    
;;;106      Settings.Display_reverse=2;
000084  491a              LDR      r1,|L1.240|
000086  2002              MOVS     r0,#2
;;;107      display_on();
000088  6188              STR      r0,[r1,#0x18]  ; Settings
00008a  f7fffffe          BL       display_on
;;;108      
;;;109      lcd_buf[0] = 'D';
00008e  4819              LDR      r0,|L1.244|
000090  2144              MOVS     r1,#0x44
000092  7001              STRB     r1,[r0,#0]
;;;110      lcd_buf[1] = 'F';
000094  2146              MOVS     r1,#0x46
000096  7041              STRB     r1,[r0,#1]
;;;111      lcd_buf[2] = 'U';
000098  2155              MOVS     r1,#0x55
00009a  7081              STRB     r1,[r0,#2]
;;;112      lcd_buf[3] = ' ';
00009c  2120              MOVS     r1,#0x20
00009e  70c1              STRB     r1,[r0,#3]
;;;113      lcd_buf[4] = 'M';
0000a0  214d              MOVS     r1,#0x4d
0000a2  7101              STRB     r1,[r0,#4]
;;;114      lcd_buf[5] = 'o';
0000a4  216f              MOVS     r1,#0x6f
0000a6  7141              STRB     r1,[r0,#5]
;;;115      lcd_buf[6] = 'd';
0000a8  2164              MOVS     r1,#0x64
0000aa  7181              STRB     r1,[r0,#6]
;;;116      lcd_buf[7] = 'e';
0000ac  2165              MOVS     r1,#0x65
0000ae  71c1              STRB     r1,[r0,#7]
;;;117      
;;;118      LcdString(1, 1);
0000b0  2101              MOVS     r1,#1
0000b2  4608              MOV      r0,r1
0000b4  f7fffffe          BL       LcdString
;;;119    
;;;120    
;;;121      LcdUpdate();
0000b8  f7fffffe          BL       LcdUpdate
;;;122      
;;;123      delay_ms(2000);
0000bc  f44f60fa          MOV      r0,#0x7d0
0000c0  f7fffffe          BL       delay_ms
;;;124    
;;;125    #if defined (USE_STM32L152D_EVAL)
;;;126      FLASH_Unlock();
;;;127      FLASH_ClearFlag(FLASH_FLAG_OPTVERRUSR);
;;;128    #endif
;;;129    
;;;130    
;;;131      /* Enter DFU mode */
;;;132      DeviceState = STATE_dfuERROR;
;;;133      DeviceStatus[0] = STATUS_ERRFIRMWARE;
0000c4  4907              LDR      r1,|L1.228|
0000c6  200a              MOVS     r0,#0xa               ;132
0000c8  310c              ADDS     r1,r1,#0xc
0000ca  7020              STRB     r0,[r4,#0]            ;132
0000cc  7008              STRB     r0,[r1,#0]
;;;134      DeviceStatus[4] = DeviceState;
0000ce  7108              STRB     r0,[r1,#4]
;;;135    
;;;136      Set_System();
0000d0  f7fffffe          BL       Set_System
;;;137      Set_USBClock();
0000d4  f7fffffe          BL       Set_USBClock
;;;138      USB_Init();  
0000d8  f7fffffe          BL       USB_Init
                  |L1.220|
;;;139      
;;;140      /* Main loop */
;;;141      
;;;142      while (1)
0000dc  e7fe              B        |L1.220|
;;;143      {
;;;144    
;;;145      }
;;;146    }
;;;147    
                          ENDP

0000de  0000              DCW      0x0000
                  |L1.224|
                          DCD      0x40020000
                  |L1.228|
                          DCD      ||.data||
                  |L1.232|
                          DCD      0x08003000
                  |L1.236|
                          DCD      0x2ffe0000
                  |L1.240|
                          DCD      ||.bss||
                  |L1.244|
                          DCD      lcd_buf

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Settings
                          %        232

                          AREA ||area_number.4||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.bss||
                  Power
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  DeviceState
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  Jump_To_Application
                          DCD      0x00000000
                  JumpAddress
                          DCD      0x00000000
                  DeviceStatus
                          DCD      0x00000000
000010  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 144
|__asm___6_main_c_main____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
