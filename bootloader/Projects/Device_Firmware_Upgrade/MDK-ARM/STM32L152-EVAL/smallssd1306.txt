; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\smallssd1306.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\smallssd1306.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL --omf_browse=.\stm32l152-eval\smallssd1306.crf ..\src\smallssd1306.c]
                          THUMB

                          AREA ||i.LcdChr||, CODE, READONLY, ALIGN=2

                  LcdChr PROC
;;;310    
;;;311    void LcdChr(int ch)             //Displays a character at current cursor location and increment cursor location
000000  b570              PUSH     {r4-r6,lr}
;;;312    {
;;;313    	char i = 0;
;;;314    	if (ch > 0x7f)
;;;315    	{
;;;316    		for (i = 0; i < 5; i++)
;;;317    			LcdCache[LcdCacheIdx++] = lcd_font_table_rus[(ch * 5 + (i)-0x3C0)];     //выделяем байт-столбик из символа и грузим в массив - 5 раз
000002  4b15              LDR      r3,|L1.88|
000004  2100              MOVS     r1,#0                 ;313
000006  4c13              LDR      r4,|L1.84|
000008  681a              LDR      r2,[r3,#0]            ;314
00000a  eb000580          ADD      r5,r0,r0,LSL #2
00000e  287f              CMP      r0,#0x7f              ;314
000010  dd0e              BLE      |L1.48|
000012  f50370f2          ADD      r0,r3,#0x1e4
                  |L1.22|
000016  186e              ADDS     r6,r5,r1
000018  4406              ADD      r6,r6,r0
00001a  f5a65680          SUB      r6,r6,#0x1000
00001e  1c49              ADDS     r1,r1,#1
000020  f8966c40          LDRB     r6,[r6,#0xc40]
000024  54a6              STRB     r6,[r4,r2]
000026  b2c9              UXTB     r1,r1                 ;316
000028  1c52              ADDS     r2,r2,#1              ;316
00002a  2905              CMP      r1,#5                 ;316
00002c  d3f3              BCC      |L1.22|
00002e  e00b              B        |L1.72|
                  |L1.48|
;;;318    	}
;;;319    	else
;;;320    	{
;;;321    		for (i = 0; i < 5; i++)
;;;322    			LcdCache[LcdCacheIdx++] = lcd_font_table[(ch * 5 + (i)-0xA0)];  //выделяем байт-столбик из символа и грузим в массив - 5 раз        
000030  4809              LDR      r0,|L1.88|
000032  1d00              ADDS     r0,r0,#4
                  |L1.52|
000034  186e              ADDS     r6,r5,r1
000036  4406              ADD      r6,r6,r0
000038  1c49              ADDS     r1,r1,#1
00003a  f8166ca0          LDRB     r6,[r6,#-0xa0]
00003e  54a6              STRB     r6,[r4,r2]
000040  b2c9              UXTB     r1,r1                 ;321
000042  1c52              ADDS     r2,r2,#1              ;321
000044  2905              CMP      r1,#5                 ;321
000046  d3f5              BCC      |L1.52|
                  |L1.72|
;;;323    	}
;;;324    	LcdCache[LcdCacheIdx++] = 0x00;       //добавляем пробел между символами
000048  4610              MOV      r0,r2
00004a  2100              MOVS     r1,#0
00004c  5421              STRB     r1,[r4,r0]
00004e  1c50              ADDS     r0,r2,#1
000050  6018              STR      r0,[r3,#0]  ; LcdCacheIdx
;;;325    }
000052  bd70              POP      {r4-r6,pc}
;;;326    
                          ENDP

                  |L1.84|
                          DCD      ||.bss||+0x14
                  |L1.88|
                          DCD      ||.data||

                          AREA ||i.LcdClear||, CODE, READONLY, ALIGN=2

                  LcdClear PROC
;;;257    
;;;258    void LcdClear(void)             //Clears the display
000000  2000              MOVS     r0,#0
;;;259    {
;;;260    	int i = 0;
;;;261    
;;;262    	for (i = 0; i < LCD_CACHSIZE; i++)
;;;263    		LcdCache[i] = 0x00;            //забиваем всю память 0(черный цвет)
000002  4905              LDR      r1,|L2.24|
000004  4602              MOV      r2,r0                 ;260
000006  f44f7300          MOV      r3,#0x200             ;262
                  |L2.10|
00000a  540a              STRB     r2,[r1,r0]
00000c  1c40              ADDS     r0,r0,#1
00000e  4298              CMP      r0,r3                 ;262
000010  dbfb              BLT      |L2.10|
;;;264    	LcdUpdate();
000012  f7ffbffe          B.W      LcdUpdate
;;;265    }
;;;266    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      ||.bss||+0x14

                          AREA ||i.LcdGotoXYFont||, CODE, READONLY, ALIGN=2

                  LcdGotoXYFont PROC
;;;305    
;;;306    void LcdGotoXYFont(unsigned char x, unsigned char y)    //Sets cursor location to xy location. Range: 1,1 .. 14,6
000000  1e49              SUBS     r1,r1,#1
;;;307    {
;;;308    	LcdCacheIdx = ((int)(y)-1) * 96 + ((int)(x)-1) * 6;
000002  eb010141          ADD      r1,r1,r1,LSL #1
000006  0149              LSLS     r1,r1,#5
000008  eb000040          ADD      r0,r0,r0,LSL #1
00000c  eb010040          ADD      r0,r1,r0,LSL #1
000010  4901              LDR      r1,|L3.24|
000012  1f80              SUBS     r0,r0,#6
000014  6008              STR      r0,[r1,#0]  ; LcdCacheIdx
;;;309    }
000016  4770              BX       lr
;;;310    
                          ENDP

                  |L3.24|
                          DCD      ||.data||

                          AREA ||i.LcdInit||, CODE, READONLY, ALIGN=2

                  LcdInit PROC
;;;118    
;;;119    void LcdInit()
000000  b570              PUSH     {r4-r6,lr}
;;;120    {
;;;121    	//ресетим дисплей
;;;122    	// CS = High (not selected)
;;;123    	LCD_CS_H; //HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
000002  4c3f              LDR      r4,|L4.256|
000004  2010              MOVS     r0,#0x10
000006  8320              STRH     r0,[r4,#0x18]
;;;124    	// Reset the OLED
;;;125    	LCD_RST_L; //HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
000008  2508              MOVS     r5,#8
00000a  8365              STRH     r5,[r4,#0x1a]
;;;126    	delay_ms(10); //HAL_Delay(10);
00000c  200a              MOVS     r0,#0xa
00000e  f7fffffe          BL       delay_ms
;;;127    	LCD_RST_H; //HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
000012  8325              STRH     r5,[r4,#0x18]
;;;128    	delay_ms(10); //HAL_Delay(10);
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       delay_ms
;;;129    
;;;130    
;;;131    	// Wait for the screen to boot
;;;132    	delay_ms(100); //HAL_Delay(100);
00001a  2064              MOVS     r0,#0x64
00001c  f7fffffe          BL       delay_ms
;;;133    
;;;134    	// Init OLED
;;;135    	ssd1306_SetDisplayOn(0); //display off
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       ssd1306_SetDisplayOn
;;;136    
;;;137    	LcdSend(0x20, lcd_CMD); //Set Memory Addressing Mode
000026  2101              MOVS     r1,#1
000028  2020              MOVS     r0,#0x20
00002a  f7fffffe          BL       LcdSend
;;;138    	LcdSend(0x00, lcd_CMD); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
00002e  2101              MOVS     r1,#1
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       LcdSend
;;;139    	// 10b,Page Addressing Mode (RESET); 11b,Invalid
;;;140    
;;;141    	LcdSend(0xB0, lcd_CMD); //Set Page Start Address for Page Addressing Mode,0-7
000036  2101              MOVS     r1,#1
000038  20b0              MOVS     r0,#0xb0
00003a  f7fffffe          BL       LcdSend
;;;142    
;;;143    #ifdef SSD1306_MIRROR_VERT
;;;144    	LcdSend(0xC0, lcd_CMD); // Mirror vertically
00003e  2101              MOVS     r1,#1
000040  20c0              MOVS     r0,#0xc0
000042  f7fffffe          BL       LcdSend
;;;145    #else
;;;146    	LcdSend(0xC8, lcd_CMD); //Set COM Output Scan Direction
;;;147    #endif
;;;148    
;;;149    	LcdSend(0x00, lcd_CMD); //---set low column address
000046  2101              MOVS     r1,#1
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       LcdSend
;;;150    	LcdSend(0x10, lcd_CMD); //---set high column address
00004e  2101              MOVS     r1,#1
000050  2010              MOVS     r0,#0x10
000052  f7fffffe          BL       LcdSend
;;;151    
;;;152    	LcdSend(0x40, lcd_CMD); //--set start line address - CHECK
000056  2101              MOVS     r1,#1
000058  2040              MOVS     r0,#0x40
00005a  f7fffffe          BL       LcdSend
;;;153    
;;;154    	//установка контраста
;;;155    	LcdSend(0x81, lcd_CMD);
00005e  2101              MOVS     r1,#1
000060  2081              MOVS     r0,#0x81
000062  f7fffffe          BL       LcdSend
;;;156    	LcdSend(0xFF, lcd_CMD);//от 0x00 до 0xFF LcdSend(0x96 + Settings.contrast, lcd_CMD)
000066  2101              MOVS     r1,#1
000068  20ff              MOVS     r0,#0xff
00006a  f7fffffe          BL       LcdSend
;;;157    	//
;;;158    	
;;;159    
;;;160    #ifdef SSD1306_MIRROR_HORIZ
;;;161    	LcdSend(0xA0, lcd_CMD); // Mirror horizontally
;;;162    #else
;;;163    	LcdSend(0xA1, lcd_CMD); //--set segment re-map 0 to 127 - CHECK
00006e  2101              MOVS     r1,#1
000070  20a1              MOVS     r0,#0xa1
000072  f7fffffe          BL       LcdSend
;;;164    #endif
;;;165    
;;;166    #ifdef SSD1306_INVERSE_COLOR
;;;167    	LcdSend(0xA7, lcd_CMD); //--set inverse color
;;;168    #else
;;;169    	LcdSend(0xA6, lcd_CMD); //--set normal color
000076  2101              MOVS     r1,#1
000078  20a6              MOVS     r0,#0xa6
00007a  f7fffffe          BL       LcdSend
;;;170    #endif
;;;171    
;;;172    	// Set multiplex ratio.
;;;173    #if (SSD1306_HEIGHT == 128)
;;;174    	// Found in the Luma Python lib for SH1106.
;;;175    	LcdSend(0xFF, lcd_CMD);
;;;176    #else
;;;177    	LcdSend(0xA8, lcd_CMD); //--set multiplex ratio(1 to 64) - CHECK
00007e  2101              MOVS     r1,#1
000080  20a8              MOVS     r0,#0xa8
000082  f7fffffe          BL       LcdSend
;;;178    #endif
;;;179    
;;;180    #if (SSD1306_HEIGHT == 32)
;;;181    	LcdSend(0x1F, lcd_CMD); //
000086  2101              MOVS     r1,#1
000088  201f              MOVS     r0,#0x1f
00008a  f7fffffe          BL       LcdSend
;;;182    #elif (SSD1306_HEIGHT == 64)
;;;183    	LcdSend(0x3F, lcd_CMD); //
;;;184    #elif (SSD1306_HEIGHT == 128)
;;;185    	LcdSend(0x3F, lcd_CMD); // Seems to work for 128px high displays too.
;;;186    #else
;;;187    #error "Only 32, 64, or 128 lines of height are supported!"
;;;188    #endif
;;;189    
;;;190    	LcdSend(0xA4, lcd_CMD); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
00008e  2101              MOVS     r1,#1
000090  20a4              MOVS     r0,#0xa4
000092  f7fffffe          BL       LcdSend
;;;191    
;;;192    	LcdSend(0xD3, lcd_CMD); //-set display offset - CHECK
000096  2101              MOVS     r1,#1
000098  20d3              MOVS     r0,#0xd3
00009a  f7fffffe          BL       LcdSend
;;;193    	LcdSend(0x00, lcd_CMD); //-not offset
00009e  2101              MOVS     r1,#1
0000a0  2000              MOVS     r0,#0
0000a2  f7fffffe          BL       LcdSend
;;;194    
;;;195    	LcdSend(0xD5, lcd_CMD); //--set display clock divide ratio/oscillator frequency
0000a6  2101              MOVS     r1,#1
0000a8  20d5              MOVS     r0,#0xd5
0000aa  f7fffffe          BL       LcdSend
;;;196    	LcdSend(0xF0, lcd_CMD); //--set divide ratio
0000ae  2101              MOVS     r1,#1
0000b0  20f0              MOVS     r0,#0xf0
0000b2  f7fffffe          BL       LcdSend
;;;197    
;;;198    	LcdSend(0xD9, lcd_CMD); //--set pre-charge period
0000b6  2101              MOVS     r1,#1
0000b8  20d9              MOVS     r0,#0xd9
0000ba  f7fffffe          BL       LcdSend
;;;199    	LcdSend(0x22, lcd_CMD); //
0000be  2101              MOVS     r1,#1
0000c0  2022              MOVS     r0,#0x22
0000c2  f7fffffe          BL       LcdSend
;;;200    
;;;201    	LcdSend(0xDA, lcd_CMD); //--set com pins hardware configuration - CHECK
0000c6  2101              MOVS     r1,#1
0000c8  20da              MOVS     r0,#0xda
0000ca  f7fffffe          BL       LcdSend
;;;202    #if (SSD1306_HEIGHT == 32)
;;;203    	LcdSend(0x02, lcd_CMD);
0000ce  2101              MOVS     r1,#1
0000d0  2002              MOVS     r0,#2
0000d2  f7fffffe          BL       LcdSend
;;;204    #elif (SSD1306_HEIGHT == 64)
;;;205    	LcdSend(0x12, lcd_CMD);
;;;206    #elif (SSD1306_HEIGHT == 128)
;;;207    	LcdSend(0x12, lcd_CMD);
;;;208    #else
;;;209    #error "Only 32, 64, or 128 lines of height are supported!"
;;;210    #endif
;;;211    
;;;212    	LcdSend(0xDB, lcd_CMD); //--set vcomh
0000d6  2101              MOVS     r1,#1
0000d8  20db              MOVS     r0,#0xdb
0000da  f7fffffe          BL       LcdSend
;;;213    	LcdSend(0x20, lcd_CMD); //0x20,0.77xVcc
0000de  2101              MOVS     r1,#1
0000e0  2020              MOVS     r0,#0x20
0000e2  f7fffffe          BL       LcdSend
;;;214    
;;;215    	LcdSend(0x8D, lcd_CMD); //--set DC-DC enable
0000e6  2101              MOVS     r1,#1
0000e8  208d              MOVS     r0,#0x8d
0000ea  f7fffffe          BL       LcdSend
;;;216    	LcdSend(0x14, lcd_CMD); //
0000ee  2101              MOVS     r1,#1
0000f0  2014              MOVS     r0,#0x14
0000f2  f7fffffe          BL       LcdSend
;;;217    	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
0000f6  e8bd4070          POP      {r4-r6,lr}
0000fa  2001              MOVS     r0,#1
0000fc  f7ffbffe          B.W      ssd1306_SetDisplayOn
;;;218    
;;;219    
;;;220    	// Clear screen
;;;221    	//ssd1306_Fill();
;;;222    
;;;223    	// Flush buffer to screen
;;;224    	//ssd1306_UpdateScreen();
;;;225    }
;;;226    
                          ENDP

                  |L4.256|
                          DCD      0x40020000

                          AREA ||i.LcdSend||, CODE, READONLY, ALIGN=2

                  LcdSend PROC
;;;237    
;;;238    void LcdSend(uint8_t data, uint8_t cmd) //Sends data to display controller
000000  b570              PUSH     {r4-r6,lr}
;;;239    {
;;;240    	if (cmd == lcd_CMD)
;;;241    	{
;;;242    		LCD_CS_L; //HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
000002  4c06              LDR      r4,|L5.28|
000004  2510              MOVS     r5,#0x10
;;;243    		LCD_DC_L; //HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
000006  2204              MOVS     r2,#4
000008  2901              CMP      r1,#1                 ;240
;;;244    		SPI_send(data);
;;;245    		//SPI_I2S_SendData(SPI1, *(&data)); //HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t*)&byte, 1, HAL_MAX_DELAY);
;;;246    		LCD_CS_H; //HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
;;;247    	}
;;;248    	else {
;;;249    		LCD_CS_L; //HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
00000a  8365              STRH     r5,[r4,#0x1a]
00000c  d004              BEQ      |L5.24|
;;;250    		LCD_DC_H; //HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
00000e  8322              STRH     r2,[r4,#0x18]
                  |L5.16|
000010  f7fffffe          BL       SPI_send
000014  8325              STRH     r5,[r4,#0x18]         ;246
;;;251    		SPI_send(data); //SPI_I2S_SendData(SPI1, *(&data));
;;;252    		//SPI_send8b(SPI_periph, pBuff, BuffLen); //HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
;;;253    		LCD_CS_H; //HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
;;;254    		//LCD_DC_L;
;;;255    	}
;;;256    }
000016  bd70              POP      {r4-r6,pc}
                  |L5.24|
000018  8362              STRH     r2,[r4,#0x1a]         ;243
00001a  e7f9              B        |L5.16|
;;;257    
                          ENDP

                  |L5.28|
                          DCD      0x40020000

                          AREA ||i.LcdString||, CODE, READONLY, ALIGN=2

                  LcdString PROC
;;;292    
;;;293    void LcdString(unsigned char x, unsigned char y)        //Displays a string at current cursor location
000000  b530              PUSH     {r4,r5,lr}
;;;294    {
;;;295    	unsigned char i = 0;
000002  2400              MOVS     r4,#0
;;;296    
;;;297    	if (x > 17 || y > 8)
000004  2811              CMP      r0,#0x11
000006  d810              BHI      |L6.42|
000008  2908              CMP      r1,#8
00000a  d80e              BHI      |L6.42|
;;;298    		return;
;;;299    	LcdGotoXYFont(x, y);
00000c  f7fffffe          BL       LcdGotoXYFont
;;;300    	for (i = 0; i < 17; i++)
;;;301    		if (lcd_buf[i])
000010  4d06              LDR      r5,|L6.44|
                  |L6.18|
000012  5d28              LDRB     r0,[r5,r4]
000014  b108              CBZ      r0,|L6.26|
;;;302    			LcdChr(lcd_buf[i]);
000016  f7fffffe          BL       LcdChr
                  |L6.26|
00001a  1c64              ADDS     r4,r4,#1
00001c  b2e4              UXTB     r4,r4                 ;300
00001e  2c11              CMP      r4,#0x11              ;300
000020  d3f7              BCC      |L6.18|
;;;303    	clean_lcd_buf();
000022  e8bd4030          POP      {r4,r5,lr}
000026  f7ffbffe          B.W      clean_lcd_buf
                  |L6.42|
;;;304    }
00002a  bd30              POP      {r4,r5,pc}
;;;305    
                          ENDP

                  |L6.44|
                          DCD      ||.bss||

                          AREA ||i.LcdUpdate||, CODE, READONLY, ALIGN=2

                  LcdUpdate PROC
;;;266    
;;;267    void LcdUpdate(void)            //Copies the LCD cache into the device RAM
000000  b570              PUSH     {r4-r6,lr}
;;;268    {
;;;269    	/*int i = 0, j = 0;
;;;270    
;;;271    	LcdSend(0xB0, lcd_CMD);       //Позицианируем курсор на начало координат
;;;272    	LcdSend(0x10, lcd_CMD);
;;;273    	LcdSend(0x00, lcd_CMD);
;;;274    
;;;275    	for (i = 0; i < (LCD_Y_RES >> 3); i++)        //грузим данные строками (было деление на 8)
;;;276    		for (j = LCD_X_RES - 1; j >= 0; j--)        //грузим данные столюиками по 8 пикселей
;;;277    		{
;;;278    			LcdSend(LcdCache[((i * LCD_X_RES) + j)], lcd_DATA);       //вычисляем адрес в фрейм буфере, и данные от туда грузим в дисплей.
;;;279    		}
;;;280    	*/
;;;281    	int i = 0, j = 0;
;;;282    	for (i = 0; i < SSD1306_HEIGHT / 8; i++) {
;;;283    		LcdSend(0xB0 + i, lcd_CMD); // Set the current RAM page address.
;;;284    		LcdSend(0x00 + SSD1306_X_OFFSET_LOWER, lcd_CMD);
;;;285    		LcdSend(0x10 + SSD1306_X_OFFSET_UPPER, lcd_CMD); 
;;;286    		for (j = LCD_X_RES - 1; j >= 0; j--)
;;;287    		{
;;;288    			LcdSend(LcdCache[((i * LCD_X_RES) + j)], lcd_DATA);
000002  4e0f              LDR      r6,|L7.64|
000004  2400              MOVS     r4,#0                 ;281
000006  bf00              NOP                            ;283
                  |L7.8|
000008  f10400b0          ADD      r0,r4,#0xb0           ;283
00000c  b2c0              UXTB     r0,r0                 ;283
00000e  2101              MOVS     r1,#1                 ;283
000010  f7fffffe          BL       LcdSend
000014  2101              MOVS     r1,#1                 ;284
000016  2000              MOVS     r0,#0                 ;284
000018  f7fffffe          BL       LcdSend
00001c  2101              MOVS     r1,#1                 ;285
00001e  2010              MOVS     r0,#0x10              ;285
000020  f7fffffe          BL       LcdSend
000024  f05f057f          MOVS.W   r5,#0x7f              ;286
                  |L7.40|
000028  eb0510c4          ADD      r0,r5,r4,LSL #7
00002c  2102              MOVS     r1,#2
00002e  5c30              LDRB     r0,[r6,r0]
000030  f7fffffe          BL       LcdSend
000034  1e6d              SUBS     r5,r5,#1
000036  d5f7              BPL      |L7.40|
000038  1c64              ADDS     r4,r4,#1              ;286
00003a  2c04              CMP      r4,#4                 ;282
00003c  dbe4              BLT      |L7.8|
;;;289    		}
;;;290    	}
;;;291    }
00003e  bd70              POP      {r4-r6,pc}
;;;292    
                          ENDP

                  |L7.64|
                          DCD      ||.bss||+0x14

                          AREA ||i.SPI_send||, CODE, READONLY, ALIGN=2

                  SPI_send PROC
;;;111    
;;;112    void SPI_send(uint8_t data)
000000  b510              PUSH     {r4,lr}
;;;113    {
;;;114    	SPI_I2S_SendData(SPI1, data);
000002  4c06              LDR      r4,|L8.28|
000004  4601              MOV      r1,r0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SPI_I2S_SendData
                  |L8.12|
;;;115    	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET);
00000c  2180              MOVS     r1,#0x80
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       SPI_I2S_GetFlagStatus
000014  2801              CMP      r0,#1
000016  d0f9              BEQ      |L8.12|
;;;116    }
000018  bd10              POP      {r4,pc}
;;;117    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      0x40013000

                          AREA ||i.clean_lcd_buf||, CODE, READONLY, ALIGN=2

                  clean_lcd_buf PROC
;;;326    
;;;327    void clean_lcd_buf(void)        //очистка текстового буфера
000000  2000              MOVS     r0,#0
;;;328    {
;;;329    	char i = 0;
;;;330    
;;;331    	for (i = 0; i < 20; i++)
;;;332    		lcd_buf[i] = 0;
000002  4904              LDR      r1,|L9.20|
000004  4602              MOV      r2,r0                 ;329
                  |L9.6|
000006  540a              STRB     r2,[r1,r0]
000008  1c40              ADDS     r0,r0,#1
00000a  b2c0              UXTB     r0,r0                 ;331
00000c  2814              CMP      r0,#0x14              ;331
00000e  d3fa              BCC      |L9.6|
;;;333    }
000010  4770              BX       lr
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      ||.bss||

                          AREA ||i.display_on||, CODE, READONLY, ALIGN=2

                  display_on PROC
;;;13     
;;;14     void display_on()               // Инициализация порта LCD дисплея
000000  b5f0              PUSH     {r4-r7,lr}
;;;15     {
;;;16     	GPIO_InitTypeDef GPIO_InitStructure;
;;;17     	SPI_InitTypeDef SPI_InitStructure;
;;;18     
;;;19     	Power.Display_active = ENABLE;
000002  4841              LDR      r0,|L10.264|
000004  2501              MOVS     r5,#1
000006  b087              SUB      sp,sp,#0x1c           ;15
000008  70c5              STRB     r5,[r0,#3]
;;;20     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
00000a  4629              MOV      r1,r5
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;21     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
000012  2101              MOVS     r1,#1
000014  2002              MOVS     r0,#2
000016  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;22     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
00001a  2101              MOVS     r1,#1
00001c  2004              MOVS     r0,#4
00001e  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;23     
;;;24     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
000022  2101              MOVS     r1,#1
000024  0308              LSLS     r0,r1,#12
000026  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;25     	
;;;26     	GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1), 
00002a  4f38              LDR      r7,|L10.268|
00002c  2205              MOVS     r2,#5
00002e  4611              MOV      r1,r2
000030  4638              MOV      r0,r7
000032  f7fffffe          BL       GPIO_PinAFConfig
;;;27     	//GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_SPI1), 
;;;28     	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1), 
000036  2205              MOVS     r2,#5
000038  2107              MOVS     r1,#7
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       GPIO_PinAFConfig
;;;29     	
;;;30     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_7;
000040  20a0              MOVS     r0,#0xa0
;;;31     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000042  9000              STR      r0,[sp,#0]
000044  2002              MOVS     r0,#2
000046  f88d0004          STRB     r0,[sp,#4]
;;;32     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
00004a  2603              MOVS     r6,#3
00004c  f88d6005          STRB     r6,[sp,#5]
;;;33     	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;34     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000050  2400              MOVS     r4,#0
000052  f88d4006          STRB     r4,[sp,#6]
;;;35     	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
000056  f88d4007          STRB     r4,[sp,#7]
;;;36     	GPIO_Init(GPIOA, &GPIO_InitStructure);
00005a  4669              MOV      r1,sp
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       GPIO_Init
;;;37     
;;;38     	//	GPIO_WriteBit(SCK_MOSI_PORT, SCK_Pin, Bit_SET);
;;;39     	//	GPIO_WriteBit(SCK_MOSI_PORT, MOSI_Pin, Bit_SET);
;;;40     	//	GPIO_WriteBit(SCK_MOSI_PORT, MISO_Pin, Bit_SET);
;;;41     
;;;42     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
;;;43     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
000062  f88d5004          STRB     r5,[sp,#4]
000066  2008              MOVS     r0,#8                 ;42
;;;44     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000068  f88d4006          STRB     r4,[sp,#6]
00006c  9000              STR      r0,[sp,#0]            ;43
;;;45     	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
00006e  f88d4007          STRB     r4,[sp,#7]
;;;46     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
000072  f88d6005          STRB     r6,[sp,#5]
;;;47     	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
;;;48     
;;;49     	GPIO_Init(GPIOA, &GPIO_InitStructure);
000076  4669              MOV      r1,sp
000078  4638              MOV      r0,r7
00007a  f7fffffe          BL       GPIO_Init
;;;50     	
;;;51     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
;;;52     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
00007e  f88d5004          STRB     r5,[sp,#4]
000082  2010              MOVS     r0,#0x10              ;51
;;;53     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000084  f88d4006          STRB     r4,[sp,#6]
000088  9000              STR      r0,[sp,#0]            ;52
;;;54     	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
00008a  f88d5007          STRB     r5,[sp,#7]
;;;55     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
00008e  f88d6005          STRB     r6,[sp,#5]
;;;56     	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
;;;57     
;;;58     	GPIO_Init(GPIOA, &GPIO_InitStructure);
000092  4669              MOV      r1,sp
000094  4638              MOV      r0,r7
000096  f7fffffe          BL       GPIO_Init
;;;59     
;;;60     	//	GPIO_WriteBit(CS_RST_PORT, RST_Pin,Bit_SET);
;;;61     	//	GPIO_WriteBit(CS_RST_PORT, CS_Pin, Bit_SET);
;;;62     
;;;63     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;64     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
00009a  f88d6005          STRB     r6,[sp,#5]
00009e  2004              MOVS     r0,#4                 ;63
;;;65     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
0000a0  f88d5004          STRB     r5,[sp,#4]
0000a4  9000              STR      r0,[sp,#0]            ;64
;;;66     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
0000a6  f88d4006          STRB     r4,[sp,#6]
;;;67     	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
0000aa  f88d4007          STRB     r4,[sp,#7]
;;;68     	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
;;;69     	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000ae  4669              MOV      r1,sp
0000b0  4638              MOV      r0,r7
0000b2  f7fffffe          BL       GPIO_Init
;;;70     	
;;;71     	
;;;72     	
;;;73     	
;;;74     	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
0000b6  f8ad4008          STRH     r4,[sp,#8]
;;;75     	//SPI_InitStructure.SPI_Direction = SPI_Direction_1Line_Tx;
;;;76     	// указываем, что наше устройство - Master
;;;77     	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
0000ba  f44f7082          MOV      r0,#0x104
0000be  f8ad000a          STRH     r0,[sp,#0xa]
;;;78     	// передавать будем по 8 бит (=1 байт)
;;;79     	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
;;;80     	// режим 00
;;;81     	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
;;;82     	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
0000c2  f8ad4010          STRH     r4,[sp,#0x10]
;;;83     	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set;//SPI_NSS_Soft;
0000c6  0230              LSLS     r0,r6,#8
0000c8  f8ad0012          STRH     r0,[sp,#0x12]
;;;84     	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
0000cc  2018              MOVS     r0,#0x18
0000ce  f8ad0014          STRH     r0,[sp,#0x14]
0000d2  f8ad400c          STRH     r4,[sp,#0xc]          ;79
0000d6  f8ad400e          STRH     r4,[sp,#0xe]          ;81
;;;85     	// передаём данные старшим битом вперёд (т.е. слева направо)
;;;86     	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
0000da  f8ad4016          STRH     r4,[sp,#0x16]
;;;87     	SPI_InitStructure.SPI_CRCPolynomial = 7;
0000de  2007              MOVS     r0,#7
;;;88     	// внесём настройки в SPI
;;;89     	//SPI_NSSInternalSoftwareConfig(SPI1, SPI_NSSInternalSoft_Set);
;;;90     	SPI_Init(SPI1, &SPI_InitStructure);
0000e0  4c0b              LDR      r4,|L10.272|
0000e2  f8ad0018          STRH     r0,[sp,#0x18]         ;87
0000e6  a902              ADD      r1,sp,#8
0000e8  4620              MOV      r0,r4
0000ea  f7fffffe          BL       SPI_Init
;;;91     	// включим  SPI1
;;;92     	SPI_Cmd(SPI1, ENABLE);
0000ee  2101              MOVS     r1,#1
0000f0  4620              MOV      r0,r4
0000f2  f7fffffe          BL       SPI_Cmd
;;;93     	// ===============================================================================================  
;;;94     	// LCD дисплей
;;;95     	/*GPIO_StructInit(&GPIO_InitStructure);
;;;96     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
;;;97     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
;;;98     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;99     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
;;;100    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;101    	GPIO_Init(GPIOA, &GPIO_InitStructure);*/
;;;102    
;;;103    	//my_spi_init();
;;;104    
;;;105    	delay_ms(10);
0000f6  200a              MOVS     r0,#0xa
0000f8  f7fffffe          BL       delay_ms
;;;106    
;;;107    	LcdInit();                    // Инициализируем дисплей
0000fc  f7fffffe          BL       LcdInit
;;;108    	LcdClear();
000100  f7fffffe          BL       LcdClear
;;;109    }
000104  b007              ADD      sp,sp,#0x1c
000106  bdf0              POP      {r4-r7,pc}
;;;110    
                          ENDP

                  |L10.264|
                          DCD      Power
                  |L10.268|
                          DCD      0x40020000
                  |L10.272|
                          DCD      0x40013000

                          AREA ||i.ssd1306_SetDisplayOn||, CODE, READONLY, ALIGN=1

                  ssd1306_SetDisplayOn PROC
;;;226    
;;;227    void ssd1306_SetDisplayOn(const uint8_t on) {
000000  b108              CBZ      r0,|L11.6|
;;;228    	uint8_t value;
;;;229    	if (on) {
;;;230    		value = 0xAF;   // Display on
000002  20af              MOVS     r0,#0xaf
000004  e000              B        |L11.8|
                  |L11.6|
;;;231    	}
;;;232    	else {
;;;233    		value = 0xAE;   // Display off
000006  20ae              MOVS     r0,#0xae
                  |L11.8|
;;;234    	}
;;;235    	LcdSend(value, lcd_CMD);
000008  2101              MOVS     r1,#1
00000a  f7ffbffe          B.W      LcdSend
;;;236    }
;;;237    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  lcd_buf
                          %        20
                  LcdCache
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  LcdCacheIdx
                          DCD      0x00000000
                  lcd_font_table
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  0000005f          DCB      0x00,0x00,0x00,0x5f
00000c  00000007          DCB      0x00,0x00,0x00,0x07
000010  00070014          DCB      0x00,0x07,0x00,0x14
000014  7f147f14          DCB      0x7f,0x14,0x7f,0x14
000018  242a7f2a          DCB      0x24,0x2a,0x7f,0x2a
00001c  12231308          DCB      0x12,0x23,0x13,0x08
000020  64623649          DCB      0x64,0x62,0x36,0x49
000024  55225044          DCB      0x55,0x22,0x50,0x44
000028  445f4444          DCB      0x44,0x5f,0x44,0x44
00002c  001c2241          DCB      0x00,0x1c,0x22,0x41
000030  00004122          DCB      0x00,0x00,0x41,0x22
000034  1c001408          DCB      0x1c,0x00,0x14,0x08
000038  3e081408          DCB      0x3e,0x08,0x14,0x08
00003c  083e0808          DCB      0x08,0x3e,0x08,0x08
000040  00503000          DCB      0x00,0x50,0x30,0x00
000044  00080808          DCB      0x00,0x08,0x08,0x08
000048  08080060          DCB      0x08,0x08,0x00,0x60
00004c  60000020          DCB      0x60,0x00,0x00,0x20
000050  10080402          DCB      0x10,0x08,0x04,0x02
000054  3e514945          DCB      0x3e,0x51,0x49,0x45
000058  3e00427f          DCB      0x3e,0x00,0x42,0x7f
00005c  40004261          DCB      0x40,0x00,0x42,0x61
000060  51494621          DCB      0x51,0x49,0x46,0x21
000064  41454b31          DCB      0x41,0x45,0x4b,0x31
000068  1814127f          DCB      0x18,0x14,0x12,0x7f
00006c  10274545          DCB      0x10,0x27,0x45,0x45
000070  45393c4a          DCB      0x45,0x39,0x3c,0x4a
000074  49493001          DCB      0x49,0x49,0x30,0x01
000078  71090503          DCB      0x71,0x09,0x05,0x03
00007c  36494949          DCB      0x36,0x49,0x49,0x49
000080  36064949          DCB      0x36,0x06,0x49,0x49
000084  291e0036          DCB      0x29,0x1e,0x00,0x36
000088  36000000          DCB      0x36,0x00,0x00,0x00
00008c  56360000          DCB      0x56,0x36,0x00,0x00
000090  08142241          DCB      0x08,0x14,0x22,0x41
000094  00141414          DCB      0x00,0x14,0x14,0x14
000098  14140041          DCB      0x14,0x14,0x00,0x41
00009c  22140802          DCB      0x22,0x14,0x08,0x02
0000a0  01510906          DCB      0x01,0x51,0x09,0x06
0000a4  32497941          DCB      0x32,0x49,0x79,0x41
0000a8  3e7e1111          DCB      0x3e,0x7e,0x11,0x11
0000ac  117e7f49          DCB      0x11,0x7e,0x7f,0x49
0000b0  4949363e          DCB      0x49,0x49,0x36,0x3e
0000b4  41414122          DCB      0x41,0x41,0x41,0x22
0000b8  7f414122          DCB      0x7f,0x41,0x41,0x22
0000bc  1c7f4949          DCB      0x1c,0x7f,0x49,0x49
0000c0  49417f09          DCB      0x49,0x41,0x7f,0x09
0000c4  0909013e          DCB      0x09,0x09,0x01,0x3e
0000c8  4149497a          DCB      0x41,0x49,0x49,0x7a
0000cc  7f080808          DCB      0x7f,0x08,0x08,0x08
0000d0  7f00417f          DCB      0x7f,0x00,0x41,0x7f
0000d4  41002040          DCB      0x41,0x00,0x20,0x40
0000d8  413f017f          DCB      0x41,0x3f,0x01,0x7f
0000dc  08142241          DCB      0x08,0x14,0x22,0x41
0000e0  7f404040          DCB      0x7f,0x40,0x40,0x40
0000e4  407f020c          DCB      0x40,0x7f,0x02,0x0c
0000e8  027f7f04          DCB      0x02,0x7f,0x7f,0x04
0000ec  08107f3e          DCB      0x08,0x10,0x7f,0x3e
0000f0  4141413e          DCB      0x41,0x41,0x41,0x3e
0000f4  7f090909          DCB      0x7f,0x09,0x09,0x09
0000f8  063e4151          DCB      0x06,0x3e,0x41,0x51
0000fc  215e7f09          DCB      0x21,0x5e,0x7f,0x09
000100  19294646          DCB      0x19,0x29,0x46,0x46
000104  49494931          DCB      0x49,0x49,0x49,0x31
000108  01017f01          DCB      0x01,0x01,0x7f,0x01
00010c  013f4040          DCB      0x01,0x3f,0x40,0x40
000110  403f1f20          DCB      0x40,0x3f,0x1f,0x20
000114  40201f3f          DCB      0x40,0x20,0x1f,0x3f
000118  4038403f          DCB      0x40,0x38,0x40,0x3f
00011c  63140814          DCB      0x63,0x14,0x08,0x14
000120  63070870          DCB      0x63,0x07,0x08,0x70
000124  08076151          DCB      0x08,0x07,0x61,0x51
000128  49454300          DCB      0x49,0x45,0x43,0x00
00012c  7f414100          DCB      0x7f,0x41,0x41,0x00
000130  02040810          DCB      0x02,0x04,0x08,0x10
000134  20004141          DCB      0x20,0x00,0x41,0x41
000138  7f000402          DCB      0x7f,0x00,0x04,0x02
00013c  01020440          DCB      0x01,0x02,0x04,0x40
000140  40404040          DCB      0x40,0x40,0x40,0x40
000144  00010204          DCB      0x00,0x01,0x02,0x04
000148  00205454          DCB      0x00,0x20,0x54,0x54
00014c  54787f48          DCB      0x54,0x78,0x7f,0x48
000150  44443838          DCB      0x44,0x44,0x38,0x38
000154  44444420          DCB      0x44,0x44,0x44,0x20
000158  38444448          DCB      0x38,0x44,0x44,0x48
00015c  7f385454          DCB      0x7f,0x38,0x54,0x54
000160  5418087e          DCB      0x54,0x18,0x08,0x7e
000164  0901020c          DCB      0x09,0x01,0x02,0x0c
000168  5252523e          DCB      0x52,0x52,0x52,0x3e
00016c  7f080404          DCB      0x7f,0x08,0x04,0x04
000170  7800447d          DCB      0x78,0x00,0x44,0x7d
000174  40002040          DCB      0x40,0x00,0x20,0x40
000178  443d007f          DCB      0x44,0x3d,0x00,0x7f
00017c  10284400          DCB      0x10,0x28,0x44,0x00
000180  00417f40          DCB      0x00,0x41,0x7f,0x40
000184  007c0418          DCB      0x00,0x7c,0x04,0x18
000188  04787c08          DCB      0x04,0x78,0x7c,0x08
00018c  04047838          DCB      0x04,0x04,0x78,0x38
000190  44444438          DCB      0x44,0x44,0x44,0x38
000194  7c141414          DCB      0x7c,0x14,0x14,0x14
000198  08081414          DCB      0x08,0x08,0x14,0x14
00019c  187c7c08          DCB      0x18,0x7c,0x7c,0x08
0001a0  04040808          DCB      0x04,0x04,0x08,0x08
0001a4  54545420          DCB      0x54,0x54,0x54,0x20
0001a8  043f4440          DCB      0x04,0x3f,0x44,0x40
0001ac  203c4040          DCB      0x20,0x3c,0x40,0x40
0001b0  207c1c20          DCB      0x20,0x7c,0x1c,0x20
0001b4  40201c3c          DCB      0x40,0x20,0x1c,0x3c
0001b8  4030403c          DCB      0x40,0x30,0x40,0x3c
0001bc  44281028          DCB      0x44,0x28,0x10,0x28
0001c0  440c5050          DCB      0x44,0x0c,0x50,0x50
0001c4  503c4464          DCB      0x50,0x3c,0x44,0x64
0001c8  544c4400          DCB      0x54,0x4c,0x44,0x00
0001cc  08364100          DCB      0x08,0x36,0x41,0x00
0001d0  00007f00          DCB      0x00,0x00,0x7f,0x00
0001d4  00004136          DCB      0x00,0x00,0x41,0x36
0001d8  08001008          DCB      0x08,0x00,0x10,0x08
0001dc  08100878          DCB      0x08,0x10,0x08,0x78
0001e0  46414678          DCB      0x46,0x41,0x46,0x78
                  lcd_font_table_rus
0001e4  7e111111          DCB      0x7e,0x11,0x11,0x11
0001e8  7e7f4949          DCB      0x7e,0x7f,0x49,0x49
0001ec  49317f49          DCB      0x49,0x31,0x7f,0x49
0001f0  4949367f          DCB      0x49,0x49,0x36,0x7f
0001f4  01010103          DCB      0x01,0x01,0x01,0x03
0001f8  603e2121          DCB      0x60,0x3e,0x21,0x21
0001fc  7f7f4949          DCB      0x7f,0x7f,0x49,0x49
000200  49417708          DCB      0x49,0x41,0x77,0x08
000204  7f087722          DCB      0x7f,0x08,0x77,0x22
000208  41494936          DCB      0x41,0x49,0x49,0x36
00020c  7f100804          DCB      0x7f,0x10,0x08,0x04
000210  7f7f1009          DCB      0x7f,0x7f,0x10,0x09
000214  047f7f08          DCB      0x04,0x7f,0x7f,0x08
000218  14224140          DCB      0x14,0x22,0x41,0x40
00021c  3e01017f          DCB      0x3e,0x01,0x01,0x7f
000220  7f020c02          DCB      0x7f,0x02,0x0c,0x02
000224  7f7f0808          DCB      0x7f,0x7f,0x08,0x08
000228  087f3e41          DCB      0x08,0x7f,0x3e,0x41
00022c  41413e7f          DCB      0x41,0x41,0x3e,0x7f
000230  0101017f          DCB      0x01,0x01,0x01,0x7f
000234  7f090909          DCB      0x7f,0x09,0x09,0x09
000238  063e4141          DCB      0x06,0x3e,0x41,0x41
00023c  41220101          DCB      0x41,0x22,0x01,0x01
000240  7f010127          DCB      0x7f,0x01,0x01,0x27
000244  4848483f          DCB      0x48,0x48,0x48,0x3f
000248  1e217f21          DCB      0x1e,0x21,0x7f,0x21
00024c  1e631408          DCB      0x1e,0x63,0x14,0x08
000250  14633f20          DCB      0x14,0x63,0x3f,0x20
000254  203f6007          DCB      0x20,0x3f,0x60,0x07
000258  0808087f          DCB      0x08,0x08,0x08,0x7f
00025c  7f407f40          DCB      0x7f,0x40,0x7f,0x40
000260  7f3f203f          DCB      0x7f,0x3f,0x20,0x3f
000264  207f017f          DCB      0x20,0x7f,0x01,0x7f
000268  4848307f          DCB      0x48,0x48,0x30,0x7f
00026c  4830007f          DCB      0x48,0x30,0x00,0x7f
000270  007f4848          DCB      0x00,0x7f,0x48,0x48
000274  30224149          DCB      0x30,0x22,0x41,0x49
000278  493e7f08          DCB      0x49,0x3e,0x7f,0x08
00027c  3e413e46          DCB      0x3e,0x41,0x3e,0x46
000280  2919097f          DCB      0x29,0x19,0x09,0x7f
000284  20545454          DCB      0x20,0x54,0x54,0x54
000288  783c4a4a          DCB      0x78,0x3c,0x4a,0x4a
00028c  4a307c54          DCB      0x4a,0x30,0x7c,0x54
000290  5428007c          DCB      0x54,0x28,0x00,0x7c
000294  04040404          DCB      0x04,0x04,0x04,0x04
000298  60382424          DCB      0x60,0x38,0x24,0x24
00029c  7c385454          DCB      0x7c,0x38,0x54,0x54
0002a0  54186c10          DCB      0x54,0x18,0x6c,0x10
0002a4  7c106c00          DCB      0x7c,0x10,0x6c,0x00
0002a8  44545428          DCB      0x44,0x54,0x54,0x28
0002ac  7c201008          DCB      0x7c,0x20,0x10,0x08
0002b0  7c7c2112          DCB      0x7c,0x7c,0x21,0x12
0002b4  097c7c10          DCB      0x09,0x7c,0x7c,0x10
0002b8  28440040          DCB      0x28,0x44,0x00,0x40
0002bc  3804047c          DCB      0x38,0x04,0x04,0x7c
0002c0  7c081008          DCB      0x7c,0x08,0x10,0x08
0002c4  7c7c1010          DCB      0x7c,0x7c,0x10,0x10
0002c8  107c3844          DCB      0x10,0x7c,0x38,0x44
0002cc  4444387c          DCB      0x44,0x44,0x38,0x7c
0002d0  0404047c          DCB      0x04,0x04,0x04,0x7c
0002d4  7c141414          DCB      0x7c,0x14,0x14,0x14
0002d8  08384444          DCB      0x08,0x38,0x44,0x44
0002dc  44000404          DCB      0x44,0x00,0x04,0x04
0002e0  7c04040c          DCB      0x7c,0x04,0x04,0x0c
0002e4  5050503c          DCB      0x50,0x50,0x50,0x3c
0002e8  08147c14          DCB      0x08,0x14,0x7c,0x14
0002ec  08442810          DCB      0x08,0x44,0x28,0x10
0002f0  28443c20          DCB      0x28,0x44,0x3c,0x20
0002f4  203c600c          DCB      0x20,0x3c,0x60,0x0c
0002f8  1010107c          DCB      0x10,0x10,0x10,0x7c
0002fc  7c407c40          DCB      0x7c,0x40,0x7c,0x40
000300  7c3c203c          DCB      0x7c,0x3c,0x20,0x3c
000304  207c047c          DCB      0x20,0x7c,0x04,0x7c
000308  5050207c          DCB      0x50,0x50,0x20,0x7c
00030c  5020007c          DCB      0x50,0x20,0x00,0x7c
000310  007c5050          DCB      0x00,0x7c,0x50,0x50
000314  20284454          DCB      0x20,0x28,0x44,0x54
000318  54387c10          DCB      0x54,0x38,0x7c,0x10
00031c  38443848          DCB      0x38,0x44,0x38,0x48
000320  5434147c          DCB      0x54,0x34,0x14,0x7c

;*** Start embedded assembler ***

#line 1 "..\\src\\smallssd1306.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_smallssd1306_c_0d8770eb____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_smallssd1306_c_0d8770eb____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_smallssd1306_c_0d8770eb____REVSH|
#line 144
|__asm___14_smallssd1306_c_0d8770eb____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
