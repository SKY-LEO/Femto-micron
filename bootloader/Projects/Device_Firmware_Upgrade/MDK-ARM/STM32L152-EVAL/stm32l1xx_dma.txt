; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\stm32l1xx_dma.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\stm32l1xx_dma.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL --omf_browse=.\stm32l152-eval\stm32l1xx_dma.crf ..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;657      */
;;;658    void DMA_ClearFlag(uint32_t DMAy_FLAG)
000000  00c1              LSLS     r1,r0,#3
;;;659    {
000002  d402              BMI      |L1.10|
;;;660      /* Check the parameters */
;;;661      assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
;;;662    
;;;663      if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
;;;664      {
;;;665        /* Clear the selected DMAy flags */
;;;666        DMA1->IFCR = DMAy_FLAG;
000004  4902              LDR      r1,|L1.16|
000006  6048              STR      r0,[r1,#4]
;;;667      }
;;;668      else
;;;669      {
;;;670        /* Clear the selected DMAy flags */
;;;671        DMA2->IFCR = DMAy_FLAG;
;;;672      }  
;;;673    }
000008  4770              BX       lr
                  |L1.10|
00000a  4902              LDR      r1,|L1.20|
00000c  6008              STR      r0,[r1,#0]            ;671
00000e  4770              BX       lr
;;;674    
                          ENDP

                  |L1.16|
                          DCD      0x40026000
                  |L1.20|
                          DCD      0x40026404

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;831      */
;;;832    void DMA_ClearITPendingBit(uint32_t DMAy_IT)
000000  00c1              LSLS     r1,r0,#3
;;;833    {
000002  d402              BMI      |L2.10|
;;;834      /* Check the parameters */
;;;835      assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
;;;836    
;;;837      /* Calculate the used DMAy */
;;;838      if ((DMAy_IT & FLAG_MASK) == (uint32_t)RESET)
;;;839      {
;;;840        /* Clear the selected DMAy interrupt pending bits */
;;;841        DMA1->IFCR = DMAy_IT;
000004  4902              LDR      r1,|L2.16|
000006  6048              STR      r0,[r1,#4]
;;;842      }
;;;843      else
;;;844      {
;;;845        /* Clear the selected DMAy interrupt pending bits */
;;;846        DMA2->IFCR = DMAy_IT;
;;;847      }  
;;;848    }
000008  4770              BX       lr
                  |L2.10|
00000a  4902              LDR      r1,|L2.20|
00000c  6008              STR      r0,[r1,#0]            ;846
00000e  4770              BX       lr
;;;849    
                          ENDP

                  |L2.16|
                          DCD      0x40026000
                  |L2.20|
                          DCD      0x40026404

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_Cmd PROC
;;;329      */
;;;330    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;331    {
;;;332      /* Check the parameters */
;;;333      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;334      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;335    
;;;336      if (NewState != DISABLE)
;;;337      {
;;;338        /* Enable the selected DMAy Channelx */
;;;339        DMAy_Channelx->CCR |= DMA_CCR1_EN;
;;;340      }
;;;341      else
;;;342      {
;;;343        /* Disable the selected DMAy Channelx */
;;;344        DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L3.12|
000006  f0410101          ORR      r1,r1,#1              ;339
00000a  e002              B        |L3.18|
                  |L3.12|
00000c  f64f72fe          MOV      r2,#0xfffe
000010  4011              ANDS     r1,r1,r2
                  |L3.18|
000012  6001              STR      r1,[r0,#0]            ;339
;;;345      }
;;;346    }
000014  4770              BX       lr
;;;347    
                          ENDP


                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;143      */
;;;144    void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6801              LDR      r1,[r0,#0]
;;;145    {
;;;146      /* Check the parameters */
;;;147      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;148    
;;;149      /* Disable the selected DMAy Channelx */
;;;150      DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
000002  f64f72fe          MOV      r2,#0xfffe
000006  4011              ANDS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;151    
;;;152      /* Reset DMAy Channelx control register */
;;;153      DMAy_Channelx->CCR  = 0;
00000a  2100              MOVS     r1,#0
00000c  6001              STR      r1,[r0,#0]
;;;154      
;;;155      /* Reset DMAy Channelx remaining bytes register */
;;;156      DMAy_Channelx->CNDTR = 0;
00000e  6041              STR      r1,[r0,#4]
;;;157      
;;;158      /* Reset DMAy Channelx peripheral address register */
;;;159      DMAy_Channelx->CPAR  = 0;
000010  6081              STR      r1,[r0,#8]
;;;160      
;;;161      /* Reset DMAy Channelx memory address register */
;;;162      DMAy_Channelx->CMAR = 0;
000012  60c1              STR      r1,[r0,#0xc]
;;;163      
;;;164      if (DMAy_Channelx == DMA1_Channel1)
;;;165      {
;;;166        /* Reset interrupt pending bits for DMA1 Channel1 */
;;;167        DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
000014  4931              LDR      r1,|L4.220|
000016  4a31              LDR      r2,|L4.220|
000018  3908              SUBS     r1,r1,#8
00001a  4290              CMP      r0,r2                 ;164
00001c  d103              BNE      |L4.38|
00001e  6848              LDR      r0,[r1,#4]
000020  f040000f          ORR      r0,r0,#0xf
000024  e006              B        |L4.52|
                  |L4.38|
;;;168      }
;;;169      else if (DMAy_Channelx == DMA1_Channel2)
000026  4a2d              LDR      r2,|L4.220|
000028  3214              ADDS     r2,r2,#0x14
00002a  4290              CMP      r0,r2
00002c  d104              BNE      |L4.56|
;;;170      {
;;;171        /* Reset interrupt pending bits for DMA1 Channel2 */
;;;172        DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
00002e  6848              LDR      r0,[r1,#4]
000030  f04000f0          ORR      r0,r0,#0xf0
                  |L4.52|
000034  6048              STR      r0,[r1,#4]            ;167
;;;173      }
;;;174      else if (DMAy_Channelx == DMA1_Channel3)
;;;175      {
;;;176        /* Reset interrupt pending bits for DMA1 Channel3 */
;;;177        DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
;;;178      }
;;;179      else if (DMAy_Channelx == DMA1_Channel4)
;;;180      {
;;;181        /* Reset interrupt pending bits for DMA1 Channel4 */
;;;182        DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
;;;183      }
;;;184      else if (DMAy_Channelx == DMA1_Channel5)
;;;185      {
;;;186        /* Reset interrupt pending bits for DMA1 Channel5 */
;;;187        DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
;;;188      }
;;;189      else if (DMAy_Channelx == DMA1_Channel6)
;;;190      {
;;;191        /* Reset interrupt pending bits for DMA1 Channel6 */
;;;192        DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
;;;193      }
;;;194      else if (DMAy_Channelx == DMA1_Channel7)
;;;195      {
;;;196        /* Reset interrupt pending bits for DMA1 Channel7 */
;;;197        DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
;;;198      }
;;;199      else if (DMAy_Channelx == DMA2_Channel1)
;;;200      {
;;;201        /* Reset interrupt pending bits for DMA2 Channel1 */
;;;202        DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
;;;203      }
;;;204      else if (DMAy_Channelx == DMA2_Channel2)
;;;205      {
;;;206        /* Reset interrupt pending bits for DMA2 Channel2 */
;;;207        DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
;;;208      }
;;;209      else if (DMAy_Channelx == DMA2_Channel3)
;;;210      {
;;;211        /* Reset interrupt pending bits for DMA2 Channel3 */
;;;212        DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
;;;213      }
;;;214      else if (DMAy_Channelx == DMA2_Channel4)
;;;215      {
;;;216        /* Reset interrupt pending bits for DMA2 Channel4 */
;;;217        DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
;;;218      }
;;;219      else
;;;220      { 
;;;221        if (DMAy_Channelx == DMA2_Channel5)
;;;222        {
;;;223          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;224          DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
;;;225        }
;;;226      }
;;;227    }
000036  4770              BX       lr
                  |L4.56|
000038  4a28              LDR      r2,|L4.220|
00003a  3228              ADDS     r2,r2,#0x28           ;174
00003c  4290              CMP      r0,r2                 ;174
00003e  d103              BNE      |L4.72|
000040  6848              LDR      r0,[r1,#4]            ;177
000042  f4406070          ORR      r0,r0,#0xf00          ;177
000046  e7f5              B        |L4.52|
                  |L4.72|
000048  4a24              LDR      r2,|L4.220|
00004a  323c              ADDS     r2,r2,#0x3c           ;179
00004c  4290              CMP      r0,r2                 ;179
00004e  d103              BNE      |L4.88|
000050  6848              LDR      r0,[r1,#4]            ;182
000052  f4404070          ORR      r0,r0,#0xf000         ;182
000056  e7ed              B        |L4.52|
                  |L4.88|
000058  4a20              LDR      r2,|L4.220|
00005a  3250              ADDS     r2,r2,#0x50           ;184
00005c  4290              CMP      r0,r2                 ;184
00005e  d103              BNE      |L4.104|
000060  6848              LDR      r0,[r1,#4]            ;187
000062  f4402070          ORR      r0,r0,#0xf0000        ;187
000066  e7e5              B        |L4.52|
                  |L4.104|
000068  4a1c              LDR      r2,|L4.220|
00006a  3264              ADDS     r2,r2,#0x64           ;189
00006c  4290              CMP      r0,r2                 ;189
00006e  d103              BNE      |L4.120|
000070  6848              LDR      r0,[r1,#4]            ;192
000072  f4400070          ORR      r0,r0,#0xf00000       ;192
000076  e7dd              B        |L4.52|
                  |L4.120|
000078  4a18              LDR      r2,|L4.220|
00007a  3278              ADDS     r2,r2,#0x78           ;194
00007c  4290              CMP      r0,r2                 ;194
00007e  d103              BNE      |L4.136|
000080  6848              LDR      r0,[r1,#4]            ;197
000082  f0406070          ORR      r0,r0,#0xf000000      ;197
000086  e7d5              B        |L4.52|
                  |L4.136|
000088  4a15              LDR      r2,|L4.224|
00008a  1f11              SUBS     r1,r2,#4              ;202
00008c  4290              CMP      r0,r2                 ;199
00008e  d103              BNE      |L4.152|
000090  6808              LDR      r0,[r1,#0]            ;202
000092  f040000f          ORR      r0,r0,#0xf            ;202
000096  e006              B        |L4.166|
                  |L4.152|
000098  4a11              LDR      r2,|L4.224|
00009a  3214              ADDS     r2,r2,#0x14           ;204
00009c  4290              CMP      r0,r2                 ;204
00009e  d104              BNE      |L4.170|
0000a0  6808              LDR      r0,[r1,#0]            ;207
0000a2  f04000f0          ORR      r0,r0,#0xf0           ;207
                  |L4.166|
0000a6  6008              STR      r0,[r1,#0]            ;202
                  |L4.168|
0000a8  4770              BX       lr
                  |L4.170|
0000aa  4a0d              LDR      r2,|L4.224|
0000ac  3228              ADDS     r2,r2,#0x28           ;209
0000ae  4290              CMP      r0,r2                 ;209
0000b0  d103              BNE      |L4.186|
0000b2  6808              LDR      r0,[r1,#0]            ;212
0000b4  f4406070          ORR      r0,r0,#0xf00          ;212
0000b8  e7f5              B        |L4.166|
                  |L4.186|
0000ba  4a09              LDR      r2,|L4.224|
0000bc  323c              ADDS     r2,r2,#0x3c           ;214
0000be  4290              CMP      r0,r2                 ;214
0000c0  d103              BNE      |L4.202|
0000c2  6808              LDR      r0,[r1,#0]            ;217
0000c4  f4404070          ORR      r0,r0,#0xf000         ;217
0000c8  e7ed              B        |L4.166|
                  |L4.202|
0000ca  4a05              LDR      r2,|L4.224|
0000cc  3250              ADDS     r2,r2,#0x50           ;221
0000ce  4290              CMP      r0,r2                 ;221
0000d0  d1ea              BNE      |L4.168|
0000d2  6808              LDR      r0,[r1,#0]            ;224
0000d4  f4402070          ORR      r0,r0,#0xf0000        ;224
0000d8  e7e5              B        |L4.166|
;;;228    
                          ENDP

0000da  0000              DCW      0x0000
                  |L4.220|
                          DCD      0x40026008
                  |L4.224|
                          DCD      0x40026408

                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrDataCounter PROC
;;;406      */
;;;407    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6840              LDR      r0,[r0,#4]
;;;408    {
;;;409      /* Check the parameters */
;;;410      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;411      /* Return the number of remaining data units for DMAy Channelx */
;;;412      return ((uint16_t)(DMAy_Channelx->CNDTR));
000002  b280              UXTH     r0,r0
;;;413    }
000004  4770              BX       lr
;;;414    
                          ENDP


                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;561      */
;;;562    FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
000000  4601              MOV      r1,r0
;;;563    {
;;;564      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
000004  00ca              LSLS     r2,r1,#3
000006  d401              BMI      |L6.12|
;;;565      uint32_t tmpreg = 0;
;;;566    
;;;567      /* Check the parameters */
;;;568      assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
;;;569    
;;;570      /* Calculate the used DMAy */
;;;571      if ((DMAy_FLAG & FLAG_MASK) == (uint32_t)RESET)
;;;572      {
;;;573        /* Get DMA1 ISR register value */
;;;574        tmpreg = DMA1->ISR;
000008  4a03              LDR      r2,|L6.24|
00000a  e000              B        |L6.14|
                  |L6.12|
;;;575      }
;;;576      else
;;;577      {
;;;578        /* Get DMA2 ISR register value */
;;;579        tmpreg = DMA2->ISR;
00000c  4a03              LDR      r2,|L6.28|
                  |L6.14|
00000e  6812              LDR      r2,[r2,#0]
;;;580      }
;;;581    
;;;582      /* Check the status of the specified DMAy flag */
;;;583      if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
000010  420a              TST      r2,r1
000012  d000              BEQ      |L6.22|
;;;584      {
;;;585        /* DMAy_FLAG is set */
;;;586        bitstatus = SET;
000014  2001              MOVS     r0,#1
                  |L6.22|
;;;587      }
;;;588      else
;;;589      {
;;;590        /* DMAy_FLAG is reset */
;;;591        bitstatus = RESET;
;;;592      }
;;;593      
;;;594      /* Return the DMAy_FLAG status */
;;;595      return  bitstatus;
;;;596    }
000016  4770              BX       lr
;;;597    
                          ENDP

                  |L6.24|
                          DCD      0x40026000
                  |L6.28|
                          DCD      0x40026400

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;735      */
;;;736    ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
000000  4601              MOV      r1,r0
;;;737    {
;;;738      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
000004  00ca              LSLS     r2,r1,#3
000006  d401              BMI      |L7.12|
;;;739      uint32_t tmpreg = 0;
;;;740     
;;;741      /* Check the parameters */
;;;742      assert_param(IS_DMA_GET_IT(DMAy_IT));
;;;743    
;;;744      /* Calculate the used DMAy */
;;;745      if ((DMAy_IT & FLAG_MASK) == (uint32_t)RESET)
;;;746      {
;;;747        /* Get DMA1 ISR register value */
;;;748        tmpreg = DMA1->ISR;
000008  4a03              LDR      r2,|L7.24|
00000a  e000              B        |L7.14|
                  |L7.12|
;;;749      }
;;;750      else
;;;751      {
;;;752        /* Get DMA2 ISR register value */
;;;753        tmpreg = DMA2->ISR;
00000c  4a03              LDR      r2,|L7.28|
                  |L7.14|
00000e  6812              LDR      r2,[r2,#0]
;;;754      }
;;;755      
;;;756      /* Check the status of the specified DMAy interrupt */
;;;757      if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
000010  420a              TST      r2,r1
000012  d000              BEQ      |L7.22|
;;;758      {
;;;759        /* DMAy_IT is set */
;;;760        bitstatus = SET;
000014  2001              MOVS     r0,#1
                  |L7.22|
;;;761      }
;;;762      else
;;;763      {
;;;764        /* DMAy_IT is reset */
;;;765        bitstatus = RESET;
;;;766      }
;;;767      /* Return the DMAy_IT status */
;;;768      return  bitstatus;
;;;769    }
000016  4770              BX       lr
;;;770    
                          ENDP

                  |L7.24|
                          DCD      0x40026000
                  |L7.28|
                          DCD      0x40026400

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=1

                  DMA_ITConfig PROC
;;;481      */
;;;482    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;483    {
;;;484      /* Check the parameters */
;;;485      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;486      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;487      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;488    
;;;489      if (NewState != DISABLE)
;;;490      {
;;;491        /* Enable the selected DMA interrupts */
;;;492        DMAy_Channelx->CCR |= DMA_IT;
;;;493      }
;;;494      else
;;;495      {
;;;496        /* Disable the selected DMA interrupts */
;;;497        DMAy_Channelx->CCR &= ~DMA_IT;
000002  6802              LDR      r2,[r0,#0]
000004  d001              BEQ      |L8.10|
000006  430a              ORRS     r2,r2,r1              ;492
000008  e000              B        |L8.12|
                  |L8.10|
00000a  438a              BICS     r2,r2,r1
                  |L8.12|
00000c  6002              STR      r2,[r0,#0]            ;492
;;;498      }
;;;499    }
00000e  4770              BX       lr
;;;500    
                          ENDP


                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=1

                  DMA_Init PROC
;;;237      */
;;;238    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;239    {
;;;240      uint32_t tmpreg = 0;
;;;241    
;;;242      /* Check the parameters */
;;;243      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;244      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
;;;245      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
;;;246      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;247      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
;;;248      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;249      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;250      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;251      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;252      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
;;;253    
;;;254    /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
;;;255      /* Get the DMAy_Channelx CCR value */
;;;256      tmpreg = DMAy_Channelx->CCR;
000002  6803              LDR      r3,[r0,#0]
;;;257      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;258      tmpreg &= CCR_CLEAR_MASK;
000004  f64772f0          MOV      r2,#0x7ff0
000008  4393              BICS     r3,r3,r2
;;;259      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;260      /* Set DIR bit according to DMA_DIR value */
;;;261      /* Set CIRC bit according to DMA_Mode value */
;;;262      /* Set PINC bit according to DMA_PeripheralInc value */
;;;263      /* Set MINC bit according to DMA_MemoryInc value */
;;;264      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;265      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;266      /* Set PL bits according to DMA_Priority value */
;;;267      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;268      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
00000a  6a0c              LDR      r4,[r1,#0x20]
00000c  688a              LDR      r2,[r1,#8]
00000e  4322              ORRS     r2,r2,r4
000010  e9d14504          LDRD     r4,r5,[r1,#0x10]
000014  432c              ORRS     r4,r4,r5
000016  4322              ORRS     r2,r2,r4
000018  698c              LDR      r4,[r1,#0x18]
00001a  4322              ORRS     r2,r2,r4
00001c  69cc              LDR      r4,[r1,#0x1c]
00001e  4322              ORRS     r2,r2,r4
000020  6a4c              LDR      r4,[r1,#0x24]
000022  4322              ORRS     r2,r2,r4
000024  6a8c              LDR      r4,[r1,#0x28]
000026  4322              ORRS     r2,r2,r4
000028  431a              ORRS     r2,r2,r3
;;;269                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;270                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;271                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;272    
;;;273      /* Write to DMAy Channelx CCR */
;;;274      DMAy_Channelx->CCR = tmpreg;
00002a  6002              STR      r2,[r0,#0]
;;;275    
;;;276    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;277      /* Write to DMAy Channelx CNDTR */
;;;278      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
00002c  68ca              LDR      r2,[r1,#0xc]
00002e  6042              STR      r2,[r0,#4]
;;;279    
;;;280    /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
;;;281      /* Write to DMAy Channelx CPAR */
;;;282      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000030  680a              LDR      r2,[r1,#0]
000032  6082              STR      r2,[r0,#8]
;;;283    
;;;284    /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
;;;285      /* Write to DMAy Channelx CMAR */
;;;286      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
000034  6849              LDR      r1,[r1,#4]
000036  60c1              STR      r1,[r0,#0xc]
;;;287    }
000038  bd30              POP      {r4,r5,pc}
;;;288    
                          ENDP


                          AREA ||i.DMA_SetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_SetCurrDataCounter PROC
;;;388      */
;;;389    void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
000000  6041              STR      r1,[r0,#4]
;;;390    {
;;;391      /* Check the parameters */
;;;392      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;393      
;;;394    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;395      /* Write to DMAy Channelx CNDTR */
;;;396      DMAy_Channelx->CNDTR = DataNumber;  
;;;397    }
000002  4770              BX       lr
;;;398    
                          ENDP


                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;294      */
;;;295    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;296    {
;;;297    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;298      /* Initialize the DMA_PeripheralBaseAddr member */
;;;299      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
;;;300      /* Initialize the DMA_MemoryBaseAddr member */
;;;301      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;302      /* Initialize the DMA_DIR member */
;;;303      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000004  6041              STR      r1,[r0,#4]
;;;304      /* Initialize the DMA_BufferSize member */
;;;305      DMA_InitStruct->DMA_BufferSize = 0;
000006  6081              STR      r1,[r0,#8]
;;;306      /* Initialize the DMA_PeripheralInc member */
;;;307      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000008  60c1              STR      r1,[r0,#0xc]
;;;308      /* Initialize the DMA_MemoryInc member */
;;;309      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;310      /* Initialize the DMA_PeripheralDataSize member */
;;;311      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000c  6141              STR      r1,[r0,#0x14]
;;;312      /* Initialize the DMA_MemoryDataSize member */
;;;313      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;314      /* Initialize the DMA_Mode member */
;;;315      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000010  61c1              STR      r1,[r0,#0x1c]
;;;316      /* Initialize the DMA_Priority member */
;;;317      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000012  6201              STR      r1,[r0,#0x20]
;;;318      /* Initialize the DMA_M2M member */
;;;319      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000014  6241              STR      r1,[r0,#0x24]
000016  6281              STR      r1,[r0,#0x28]
;;;320    }
000018  4770              BX       lr
;;;321    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32L1xx_StdPeriph_Driver\\src\\stm32l1xx_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32l1xx_dma_c_e9b554c0____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32l1xx_dma_c_e9b554c0____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32l1xx_dma_c_e9b554c0____REVSH|
#line 144
|__asm___15_stm32l1xx_dma_c_e9b554c0____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
