; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\stm32l1xx_spi.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\stm32l1xx_spi.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL --omf_browse=.\stm32l152-eval\stm32l1xx_spi.crf ..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_spi.c]
                          THUMB

                          AREA ||i.I2S_Cmd||, CODE, READONLY, ALIGN=1

                  I2S_Cmd PROC
;;;428      */
;;;429    void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;430    {
;;;431      /* Check the parameters */
;;;432      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;433      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;434      
;;;435      if (NewState != DISABLE)
;;;436      {
;;;437        /* Enable the selected SPI peripheral (in I2S mode) */
;;;438        SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
;;;439      }
;;;440      else
;;;441      {
;;;442        /* Disable the selected SPI peripheral in I2S mode */
;;;443        SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
000002  8b81              LDRH     r1,[r0,#0x1c]
000004  d002              BEQ      |L1.12|
000006  f4416180          ORR      r1,r1,#0x400          ;438
00000a  e001              B        |L1.16|
                  |L1.12|
00000c  f4216180          BIC      r1,r1,#0x400
                  |L1.16|
000010  8381              STRH     r1,[r0,#0x1c]         ;438
;;;444      }
;;;445    }
000012  4770              BX       lr
;;;446    
                          ENDP


                          AREA ||i.I2S_Init||, CODE, READONLY, ALIGN=2

                  I2S_Init PROC
;;;246      */
;;;247    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;248    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;249      uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
000008  2002              MOVS     r0,#2
00000a  2100              MOVS     r1,#0
;;;250      uint32_t tmp = 0;
;;;251      RCC_ClocksTypeDef RCC_Clocks;
;;;252      uint32_t sourceclock = 0;
;;;253      
;;;254      /* Check the I2S parameters */
;;;255      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;256      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;257      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;258      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;259      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
;;;260      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
;;;261      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;262    
;;;263    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;264      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;265      SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
00000c  8baa              LDRH     r2,[r5,#0x1c]
00000e  2601              MOVS     r6,#1                 ;249
000010  f24f0340          MOV      r3,#0xf040
000014  401a              ANDS     r2,r2,r3
000016  83aa              STRH     r2,[r5,#0x1c]
;;;266      SPIx->I2SPR = 0x0002;
000018  8428              STRH     r0,[r5,#0x20]
;;;267      
;;;268      /* Get the I2SCFGR register value */
;;;269      tmpreg = SPIx->I2SCFGR;
00001a  8baf              LDRH     r7,[r5,#0x1c]
;;;270      
;;;271      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;272      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
00001c  68a2              LDR      r2,[r4,#8]
00001e  2a02              CMP      r2,#2
000020  d027              BEQ      |L2.114|
;;;273      {
;;;274        i2sodd = (uint16_t)0;
;;;275        i2sdiv = (uint16_t)2;   
;;;276      }
;;;277      /* If the requested audio frequency is not the default, compute the prescaler */
;;;278      else
;;;279      {
;;;280        /* Check the frame length (For the Prescaler computing) */
;;;281        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
000022  88a0              LDRH     r0,[r4,#4]
000024  b100              CBZ      r0,|L2.40|
;;;282        {
;;;283          /* Packet length is 16 bits */
;;;284          packetlength = 1;
;;;285        }
;;;286        else
;;;287        {
;;;288          /* Packet length is 32 bits */
;;;289          packetlength = 2;
000026  2602              MOVS     r6,#2
                  |L2.40|
;;;290        }
;;;291    
;;;292        /* I2S Clock source is System clock: Get System Clock frequency */
;;;293        RCC_GetClocksFreq(&RCC_Clocks);      
000028  4668              MOV      r0,sp
00002a  f7fffffe          BL       RCC_GetClocksFreq
;;;294          
;;;295        /* Get the source clock value: based on System Clock value */
;;;296        sourceclock = RCC_Clocks.SYSCLK_Frequency;    
;;;297       
;;;298        /* Compute the Real divider depending on the MCLK output state with a flaoting point */
;;;299        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
00002e  88e1              LDRH     r1,[r4,#6]
000030  9800              LDR      r0,[sp,#0]
000032  f5b17f00          CMP      r1,#0x200
000036  d02d              BEQ      |L2.148|
;;;300        {
;;;301          /* MCLK output is enabled */
;;;302          tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
;;;303        }
;;;304        else
;;;305        {
;;;306          /* MCLK output is disabled */
;;;307          tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
000038  0171              LSLS     r1,r6,#5
00003a  fbb0f0f1          UDIV     r0,r0,r1
00003e  bf00              NOP      
                  |L2.64|
000040  eb000080          ADD      r0,r0,r0,LSL #2
000044  68a1              LDR      r1,[r4,#8]
000046  0040              LSLS     r0,r0,#1
000048  fbb0f0f1          UDIV     r0,r0,r1
00004c  1d40              ADDS     r0,r0,#5
00004e  b280              UXTH     r0,r0
;;;308        }
;;;309        
;;;310        /* Remove the flaoting point */
;;;311        tmp = tmp / 10;  
000050  210a              MOVS     r1,#0xa
000052  fbb0f0f1          UDIV     r0,r0,r1
;;;312          
;;;313        /* Check the parity of the divider */
;;;314        i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
000056  f0000101          AND      r1,r0,#1
;;;315       
;;;316        /* Compute the i2sdiv prescaler */
;;;317        i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
00005a  1a40              SUBS     r0,r0,r1
;;;318       
;;;319        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;320        i2sodd = (uint16_t) (i2sodd << 8);
00005c  f64f72ff          MOV      r2,#0xffff
000060  f3c0004f          UBFX     r0,r0,#1,#16          ;317
000064  ea022101          AND      r1,r2,r1,LSL #8
;;;321      }
;;;322      
;;;323      /* Test if the divider is 1 or 0 or greater than 0xFF */
;;;324      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
000068  1e82              SUBS     r2,r0,#2
00006a  2afe              CMP      r2,#0xfe
00006c  d301              BCC      |L2.114|
;;;325      {
;;;326        /* Set the default values */
;;;327        i2sdiv = 2;
00006e  2002              MOVS     r0,#2
;;;328        i2sodd = 0;
000070  2100              MOVS     r1,#0
                  |L2.114|
;;;329      }
;;;330    
;;;331      /* Write to SPIx I2SPR register the computed value */
;;;332      SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
000072  88e2              LDRH     r2,[r4,#6]
000074  4308              ORRS     r0,r0,r1
000076  4302              ORRS     r2,r2,r0
000078  842a              STRH     r2,[r5,#0x20]
;;;333     
;;;334      /* Configure the I2S with the SPI_InitStruct values */
;;;335      tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
00007a  8820              LDRH     r0,[r4,#0]
00007c  8861              LDRH     r1,[r4,#2]
00007e  89a2              LDRH     r2,[r4,#0xc]
000080  4308              ORRS     r0,r0,r1
000082  88a1              LDRH     r1,[r4,#4]
000084  4311              ORRS     r1,r1,r2
000086  4308              ORRS     r0,r0,r1
000088  4338              ORRS     r0,r0,r7
00008a  f4406000          ORR      r0,r0,#0x800
;;;336                      (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
;;;337                      (uint16_t)I2S_InitStruct->I2S_CPOL))));
;;;338     
;;;339      /* Write to SPIx I2SCFGR */  
;;;340      SPIx->I2SCFGR = tmpreg;   
00008e  83a8              STRH     r0,[r5,#0x1c]
;;;341    }
000090  e8bd81ff          POP      {r0-r8,pc}
                  |L2.148|
000094  0a00              LSRS     r0,r0,#8              ;302
000096  e7d3              B        |L2.64|
;;;342    
                          ENDP


                          AREA ||i.I2S_StructInit||, CODE, READONLY, ALIGN=1

                  I2S_StructInit PROC
;;;375      */
;;;376    void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
000000  2100              MOVS     r1,#0
;;;377    {
;;;378    /*--------------- Reset I2S init structure parameters values -----------------*/
;;;379      /* Initialize the I2S_Mode member */
;;;380      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000002  8001              STRH     r1,[r0,#0]
;;;381      
;;;382      /* Initialize the I2S_Standard member */
;;;383      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000004  8041              STRH     r1,[r0,#2]
;;;384      
;;;385      /* Initialize the I2S_DataFormat member */
;;;386      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
000006  8081              STRH     r1,[r0,#4]
;;;387      
;;;388      /* Initialize the I2S_MCLKOutput member */
;;;389      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;390      
;;;391      /* Initialize the I2S_AudioFreq member */
;;;392      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00000a  2202              MOVS     r2,#2
;;;393      
;;;394      /* Initialize the I2S_CPOL member */
;;;395      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
00000c  6082              STR      r2,[r0,#8]
00000e  8181              STRH     r1,[r0,#0xc]
;;;396    }
000010  4770              BX       lr
;;;397    
                          ENDP


                          AREA ||i.SPI_BiDirectionalLineConfig||, CODE, READONLY, ALIGN=1

                  SPI_BiDirectionalLineConfig PROC
;;;475      */
;;;476    void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
000000  f5b14f80          CMP      r1,#0x4000
;;;477    {
;;;478      /* Check the parameters */
;;;479      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;480      assert_param(IS_SPI_DIRECTION(SPI_Direction));
;;;481      if (SPI_Direction == SPI_Direction_Tx)
;;;482      {
;;;483        /* Set the Tx only mode */
;;;484        SPIx->CR1 |= SPI_Direction_Tx;
;;;485      }
;;;486      else
;;;487      {
;;;488        /* Set the Rx only mode */
;;;489        SPIx->CR1 &= SPI_Direction_Rx;
000004  8801              LDRH     r1,[r0,#0]
000006  d003              BEQ      |L4.16|
000008  f4214180          BIC      r1,r1,#0x4000
                  |L4.12|
00000c  8001              STRH     r1,[r0,#0]            ;484
;;;490      }
;;;491    }
00000e  4770              BX       lr
                  |L4.16|
000010  f4414180          ORR      r1,r1,#0x4000         ;484
000014  e7fa              B        |L4.12|
;;;492    
                          ENDP


                          AREA ||i.SPI_CalculateCRC||, CODE, READONLY, ALIGN=1

                  SPI_CalculateCRC PROC
;;;669      */
;;;670    void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;671    {
;;;672      /* Check the parameters */
;;;673      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;674      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;675      if (NewState != DISABLE)
;;;676      {
;;;677        /* Enable the selected SPI CRC calculation */
;;;678        SPIx->CR1 |= SPI_CR1_CRCEN;
;;;679      }
;;;680      else
;;;681      {
;;;682        /* Disable the selected SPI CRC calculation */
;;;683        SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L5.12|
000006  f4415100          ORR      r1,r1,#0x2000         ;678
00000a  e001              B        |L5.16|
                  |L5.12|
00000c  f4215100          BIC      r1,r1,#0x2000
                  |L5.16|
000010  8001              STRH     r1,[r0,#0]            ;678
;;;684      }
;;;685    }
000012  4770              BX       lr
;;;686    
                          ENDP


                          AREA ||i.SPI_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_Cmd PROC
;;;404      */
;;;405    void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;406    {
;;;407      /* Check the parameters */
;;;408      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;409      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;410      if (NewState != DISABLE)
;;;411      {
;;;412        /* Enable the selected SPI peripheral */
;;;413        SPIx->CR1 |= SPI_CR1_SPE;
;;;414      }
;;;415      else
;;;416      {
;;;417        /* Disable the selected SPI peripheral */
;;;418        SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L6.12|
000006  f0410140          ORR      r1,r1,#0x40           ;413
00000a  e001              B        |L6.16|
                  |L6.12|
00000c  f0210140          BIC      r1,r1,#0x40
                  |L6.16|
000010  8001              STRH     r1,[r0,#0]            ;413
;;;419      }
;;;420    }
000012  4770              BX       lr
;;;421    
                          ENDP


                          AREA ||i.SPI_DataSizeConfig||, CODE, READONLY, ALIGN=1

                  SPI_DataSizeConfig PROC
;;;455      */
;;;456    void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
000000  8802              LDRH     r2,[r0,#0]
;;;457    {
;;;458      /* Check the parameters */
;;;459      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;460      assert_param(IS_SPI_DATASIZE(SPI_DataSize));
;;;461      /* Clear DFF bit */
;;;462      SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
000002  f4226200          BIC      r2,r2,#0x800
000006  8002              STRH     r2,[r0,#0]
;;;463      /* Set new DFF bit value */
;;;464      SPIx->CR1 |= SPI_DataSize;
000008  8802              LDRH     r2,[r0,#0]
00000a  430a              ORRS     r2,r2,r1
00000c  8002              STRH     r2,[r0,#0]
;;;465    }
00000e  4770              BX       lr
;;;466    
                          ENDP


                          AREA ||i.SPI_GetCRC||, CODE, READONLY, ALIGN=1

                  SPI_GetCRC PROC
;;;709      */
;;;710    uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
000000  2901              CMP      r1,#1
;;;711    {
000002  d001              BEQ      |L8.8|
;;;712      uint16_t crcreg = 0;
;;;713      /* Check the parameters */
;;;714      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;715      assert_param(IS_SPI_CRC(SPI_CRC));
;;;716      if (SPI_CRC != SPI_CRC_Rx)
;;;717      {
;;;718        /* Get the Tx CRC register */
;;;719        crcreg = SPIx->TXCRCR;
000004  8b00              LDRH     r0,[r0,#0x18]
;;;720      }
;;;721      else
;;;722      {
;;;723        /* Get the Rx CRC register */
;;;724        crcreg = SPIx->RXCRCR;
;;;725      }
;;;726      /* Return the selected CRC register */
;;;727      return crcreg;
;;;728    }
000006  4770              BX       lr
                  |L8.8|
000008  8a80              LDRH     r0,[r0,#0x14]         ;724
00000a  4770              BX       lr
;;;729    
                          ENDP


                          AREA ||i.SPI_GetCRCPolynomial||, CODE, READONLY, ALIGN=1

                  SPI_GetCRCPolynomial PROC
;;;734      */
;;;735    uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
000000  8a00              LDRH     r0,[r0,#0x10]
;;;736    {
;;;737      /* Check the parameters */
;;;738      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;739      
;;;740      /* Return the CRC polynomial register */
;;;741      return SPIx->CRCPR;
;;;742    }
000002  4770              BX       lr
;;;743    
                          ENDP


                          AREA ||i.SPI_I2S_ClearFlag||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearFlag PROC
;;;964      */
;;;965    void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  43c9              MVNS     r1,r1
;;;966    {
;;;967      /* Check the parameters */
;;;968      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;969      assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
;;;970        
;;;971      /* Clear the selected SPI CRC Error (CRCERR) flag */
;;;972      SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
000002  8101              STRH     r1,[r0,#8]
;;;973    }
000004  4770              BX       lr
;;;974    
                          ENDP


                          AREA ||i.SPI_I2S_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearITPendingBit PROC
;;;1045     */
;;;1046   void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  f001020f          AND      r2,r1,#0xf
;;;1047   {
;;;1048     uint16_t itpos = 0;
;;;1049     /* Check the parameters */
;;;1050     assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;1051     assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
;;;1052   
;;;1053     /* Get the SPI_I2S IT index */
;;;1054     itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
;;;1055   
;;;1056     /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
;;;1057     SPIx->SR = (uint16_t)~itpos;
000008  43c9              MVNS     r1,r1
00000a  8101              STRH     r1,[r0,#8]
;;;1058   }
00000c  4770              BX       lr
;;;1059   
                          ENDP


                          AREA ||i.SPI_I2S_DMACmd||, CODE, READONLY, ALIGN=1

                  SPI_I2S_DMACmd PROC
;;;771      */
;;;772    void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;773    {
;;;774      /* Check the parameters */
;;;775      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;776      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;777      assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
;;;778    
;;;779      if (NewState != DISABLE)
;;;780      {
;;;781        /* Enable the selected SPI DMA requests */
;;;782        SPIx->CR2 |= SPI_I2S_DMAReq;
;;;783      }
;;;784      else
;;;785      {
;;;786        /* Disable the selected SPI DMA requests */
;;;787        SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
000002  8882              LDRH     r2,[r0,#4]
000004  d001              BEQ      |L12.10|
000006  430a              ORRS     r2,r2,r1              ;782
000008  e000              B        |L12.12|
                  |L12.10|
00000a  438a              BICS     r2,r2,r1
                  |L12.12|
00000c  8082              STRH     r2,[r0,#4]            ;782
;;;788      }
;;;789    }
00000e  4770              BX       lr
;;;790    
                          ENDP


                          AREA ||i.SPI_I2S_DeInit||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DeInit PROC
;;;147      */
;;;148    void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
000000  4911              LDR      r1,|L13.72|
;;;149    {
000002  b510              PUSH     {r4,lr}
;;;150      /* Check the parameters */
;;;151      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;152    
;;;153      if (SPIx == SPI1)
000004  4288              CMP      r0,r1
000006  d10a              BNE      |L13.30|
;;;154      {
;;;155        /* Enable SPI1 reset state */
;;;156        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
000008  1484              ASRS     r4,r0,#18
00000a  2101              MOVS     r1,#1
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;157        /* Release SPI1 from reset state */
;;;158        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
000012  4620              MOV      r0,r4
000014  e8bd4010          POP      {r4,lr}
000018  2100              MOVS     r1,#0
00001a  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L13.30|
;;;159      }
;;;160      else if (SPIx == SPI2)
00001e  490b              LDR      r1,|L13.76|
000020  4288              CMP      r0,r1
000022  d102              BNE      |L13.42|
;;;161      {
;;;162        /* Enable SPI2 reset state */
;;;163        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
000024  2101              MOVS     r1,#1
000026  1404              ASRS     r4,r0,#16
;;;164        /* Release SPI2 from reset state */
;;;165        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
000028  e004              B        |L13.52|
                  |L13.42|
;;;166        }
;;;167      else
;;;168      {
;;;169        if (SPIx == SPI3)
00002a  4909              LDR      r1,|L13.80|
00002c  4288              CMP      r0,r1
00002e  d10a              BNE      |L13.70|
;;;170        {
;;;171          /* Enable SPI3 reset state */
;;;172          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
000030  2101              MOVS     r1,#1
000032  13c4              ASRS     r4,r0,#15
                  |L13.52|
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;173          /* Release SPI3 from reset state */
;;;174          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
00003a  4620              MOV      r0,r4
00003c  e8bd4010          POP      {r4,lr}
000040  2100              MOVS     r1,#0
000042  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L13.70|
;;;175        }
;;;176      }
;;;177    }
000046  bd10              POP      {r4,pc}
;;;178    
                          ENDP

                  |L13.72|
                          DCD      0x40013000
                  |L13.76|
                          DCD      0x40003800
                  |L13.80|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetFlagStatus PROC
;;;924      */
;;;925    FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  4602              MOV      r2,r0
;;;926    {
;;;927      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;928      /* Check the parameters */
;;;929      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;930      assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
;;;931      
;;;932      /* Check the status of the specified SPI flag */
;;;933      if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
000004  8912              LDRH     r2,[r2,#8]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L14.12|
;;;934      {
;;;935        /* SPI_I2S_FLAG is set */
;;;936        bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L14.12|
;;;937      }
;;;938      else
;;;939      {
;;;940        /* SPI_I2S_FLAG is reset */
;;;941        bitstatus = RESET;
;;;942      }
;;;943      /* Return the SPI_I2S_FLAG status */
;;;944      return  bitstatus;
;;;945    }
00000c  4770              BX       lr
;;;946    
                          ENDP


                          AREA ||i.SPI_I2S_GetITStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetITStatus PROC
;;;990      */
;;;991    ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b510              PUSH     {r4,lr}
;;;992    {
;;;993      ITStatus bitstatus = RESET;
;;;994      uint16_t itpos = 0, itmask = 0, enablestatus = 0;
;;;995    
;;;996      /* Check the parameters */
;;;997      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;998      assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
;;;999    
;;;1000     /* Get the SPI_I2S_IT index */
;;;1001     itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000002  f001040f          AND      r4,r1,#0xf
000006  2201              MOVS     r2,#1
000008  4603              MOV      r3,r0                 ;992
00000a  fa02f404          LSL      r4,r2,r4
00000e  2000              MOVS     r0,#0                 ;993
;;;1002   
;;;1003     /* Get the SPI_I2S_IT IT mask */
;;;1004     itmask = SPI_I2S_IT >> 4;
000010  0909              LSRS     r1,r1,#4
;;;1005   
;;;1006     /* Set the IT mask */
;;;1007     itmask = 0x01 << itmask;
000012  408a              LSLS     r2,r2,r1
000014  b291              UXTH     r1,r2
;;;1008   
;;;1009     /* Get the SPI_I2S_IT enable bit status */
;;;1010     enablestatus = (SPIx->CR2 & itmask) ;
000016  889a              LDRH     r2,[r3,#4]
000018  b2a4              UXTH     r4,r4                 ;1001
00001a  400a              ANDS     r2,r2,r1
;;;1011   
;;;1012     /* Check the status of the specified SPI interrupt */
;;;1013     if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
00001c  8919              LDRH     r1,[r3,#8]
00001e  4221              TST      r1,r4
000020  d002              BEQ      |L15.40|
000022  2a00              CMP      r2,#0
000024  d000              BEQ      |L15.40|
;;;1014     {
;;;1015       /* SPI_I2S_IT is set */
;;;1016       bitstatus = SET;
000026  2001              MOVS     r0,#1
                  |L15.40|
;;;1017     }
;;;1018     else
;;;1019     {
;;;1020       /* SPI_I2S_IT is reset */
;;;1021       bitstatus = RESET;
;;;1022     }
;;;1023     /* Return the SPI_I2S_IT status */
;;;1024     return bitstatus;
;;;1025   }
000028  bd10              POP      {r4,pc}
;;;1026   
                          ENDP


                          AREA ||i.SPI_I2S_ITConfig||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ITConfig PROC
;;;879      */
;;;880    void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
000000  0909              LSRS     r1,r1,#4
;;;881    {
;;;882      uint16_t itpos = 0, itmask = 0 ;
;;;883      
;;;884      /* Check the parameters */
;;;885      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;886      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;887      assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
;;;888    
;;;889      /* Get the SPI IT index */
;;;890      itpos = SPI_I2S_IT >> 4;
;;;891    
;;;892      /* Set the IT mask */
;;;893      itmask = (uint16_t)1 << (uint16_t)itpos;
000002  2301              MOVS     r3,#1
000004  408b              LSLS     r3,r3,r1
;;;894    
;;;895      if (NewState != DISABLE)
000006  2a00              CMP      r2,#0
;;;896      {
;;;897        /* Enable the selected SPI interrupt */
;;;898        SPIx->CR2 |= itmask;
;;;899      }
;;;900      else
;;;901      {
;;;902        /* Disable the selected SPI interrupt */
;;;903        SPIx->CR2 &= (uint16_t)~itmask;
000008  8882              LDRH     r2,[r0,#4]
00000a  b299              UXTH     r1,r3                 ;893
00000c  d001              BEQ      |L16.18|
00000e  430a              ORRS     r2,r2,r1              ;898
000010  e000              B        |L16.20|
                  |L16.18|
000012  438a              BICS     r2,r2,r1
                  |L16.20|
000014  8082              STRH     r2,[r0,#4]            ;898
;;;904      }
;;;905    }
000016  4770              BX       lr
;;;906    
                          ENDP


                          AREA ||i.SPI_I2S_ReceiveData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ReceiveData PROC
;;;573      */
;;;574    uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
000000  8980              LDRH     r0,[r0,#0xc]
;;;575    {
;;;576      /* Check the parameters */
;;;577      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;578      
;;;579      /* Return the data in the DR register */
;;;580      return SPIx->DR;
;;;581    }
000002  4770              BX       lr
;;;582    
                          ENDP


                          AREA ||i.SPI_I2S_SendData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_SendData PROC
;;;589      */
;;;590    void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
000000  8181              STRH     r1,[r0,#0xc]
;;;591    {
;;;592      /* Check the parameters */
;;;593      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;594    	
;;;595      /* Write in the DR register the data to be sent */
;;;596      SPIx->DR = Data;
;;;597    }
000002  4770              BX       lr
;;;598    
                          ENDP


                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=1

                  SPI_Init PROC
;;;186      */
;;;187    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;188    {
;;;189      uint16_t tmpreg = 0;
;;;190      
;;;191      /* check the parameters */
;;;192      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;193      
;;;194      /* Check the SPI parameters */
;;;195      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
;;;196      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
;;;197      assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
;;;198      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
;;;199      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
;;;200      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
;;;201      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
;;;202      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
;;;203      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
;;;204    
;;;205    /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;206      /* Get the SPIx CR1 value */
;;;207      tmpreg = SPIx->CR1;
000002  8802              LDRH     r2,[r0,#0]
;;;208      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
;;;209      tmpreg &= CR1_CLEAR_MASK;
;;;210      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;211         master/salve mode, CPOL and CPHA */
;;;212      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;213      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
;;;214      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;215      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;216      /* Set CPOL bit according to SPI_CPOL value */
;;;217      /* Set CPHA bit according to SPI_CPHA value */
;;;218      tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
000004  884c              LDRH     r4,[r1,#2]
000006  f4025341          AND      r3,r2,#0x3040         ;209
00000a  880a              LDRH     r2,[r1,#0]
00000c  88cd              LDRH     r5,[r1,#6]
00000e  4322              ORRS     r2,r2,r4
000010  888c              LDRH     r4,[r1,#4]
000012  432c              ORRS     r4,r4,r5
000014  4322              ORRS     r2,r2,r4
000016  890c              LDRH     r4,[r1,#8]
000018  4322              ORRS     r2,r2,r4
00001a  894c              LDRH     r4,[r1,#0xa]
00001c  4322              ORRS     r2,r2,r4
00001e  898c              LDRH     r4,[r1,#0xc]
000020  4322              ORRS     r2,r2,r4
000022  89cc              LDRH     r4,[r1,#0xe]
000024  4322              ORRS     r2,r2,r4
000026  431a              ORRS     r2,r2,r3
;;;219                      SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
;;;220                      SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
;;;221                      SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
;;;222      /* Write to SPIx CR1 */
;;;223      SPIx->CR1 = tmpreg;
000028  8002              STRH     r2,[r0,#0]
;;;224    
;;;225      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;226      SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
00002a  8b82              LDRH     r2,[r0,#0x1c]
00002c  f4226200          BIC      r2,r2,#0x800
000030  8382              STRH     r2,[r0,#0x1c]
;;;227    /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;228      /* Write to SPIx CRCPOLY */
;;;229      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
000032  8a09              LDRH     r1,[r1,#0x10]
000034  8201              STRH     r1,[r0,#0x10]
;;;230    }
000036  bd30              POP      {r4,r5,pc}
;;;231    
                          ENDP


                          AREA ||i.SPI_NSSInternalSoftwareConfig||, CODE, READONLY, ALIGN=1

                  SPI_NSSInternalSoftwareConfig PROC
;;;501      */
;;;502    void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
000000  f5a1427e          SUB      r2,r1,#0xfe00
;;;503    {
;;;504      /* Check the parameters */
;;;505      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;506      assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
;;;507      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
;;;508      {
;;;509        /* Set NSS pin internally by software */
;;;510        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
;;;511      }
;;;512      else
;;;513      {
;;;514        /* Reset NSS pin internally by software */
;;;515        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
000004  8801              LDRH     r1,[r0,#0]
000006  3aff              SUBS     r2,r2,#0xff           ;507
000008  d002              BEQ      |L20.16|
00000a  f4417180          ORR      r1,r1,#0x100          ;510
00000e  e001              B        |L20.20|
                  |L20.16|
000010  f4217180          BIC      r1,r1,#0x100
                  |L20.20|
000014  8001              STRH     r1,[r0,#0]            ;510
;;;516      }
;;;517    }
000016  4770              BX       lr
;;;518    
                          ENDP


                          AREA ||i.SPI_SSOutputCmd||, CODE, READONLY, ALIGN=1

                  SPI_SSOutputCmd PROC
;;;525      */
;;;526    void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;527    {
;;;528      /* Check the parameters */
;;;529      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;530      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;531      if (NewState != DISABLE)
;;;532      {
;;;533        /* Enable the selected SPI SS output */
;;;534        SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
;;;535      }
;;;536      else
;;;537      {
;;;538        /* Disable the selected SPI SS output */
;;;539        SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L21.12|
000006  f0410104          ORR      r1,r1,#4              ;534
00000a  e001              B        |L21.16|
                  |L21.12|
00000c  f0210104          BIC      r1,r1,#4
                  |L21.16|
000010  8081              STRH     r1,[r0,#4]            ;534
;;;540      }
;;;541    }
000012  4770              BX       lr
;;;542    
                          ENDP


                          AREA ||i.SPI_StructInit||, CODE, READONLY, ALIGN=1

                  SPI_StructInit PROC
;;;347      */
;;;348    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
000000  2100              MOVS     r1,#0
;;;349    {
;;;350    /*--------------- Reset SPI init structure parameters values -----------------*/
;;;351      /* Initialize the SPI_Direction member */
;;;352      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000002  8001              STRH     r1,[r0,#0]
;;;353      /* initialize the SPI_Mode member */
;;;354      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
000004  8041              STRH     r1,[r0,#2]
;;;355      /* initialize the SPI_DataSize member */
;;;356      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000006  8081              STRH     r1,[r0,#4]
;;;357      /* Initialize the SPI_CPOL member */
;;;358      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
000008  80c1              STRH     r1,[r0,#6]
;;;359      /* Initialize the SPI_CPHA member */
;;;360      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
00000a  8101              STRH     r1,[r0,#8]
;;;361      /* Initialize the SPI_NSS member */
;;;362      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
00000c  8141              STRH     r1,[r0,#0xa]
;;;363      /* Initialize the SPI_BaudRatePrescaler member */
;;;364      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
00000e  8181              STRH     r1,[r0,#0xc]
;;;365      /* Initialize the SPI_FirstBit member */
;;;366      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
000010  81c1              STRH     r1,[r0,#0xe]
;;;367      /* Initialize the SPI_CRCPolynomial member */
;;;368      SPI_InitStruct->SPI_CRCPolynomial = 7;
000012  2107              MOVS     r1,#7
000014  8201              STRH     r1,[r0,#0x10]
;;;369    }
000016  4770              BX       lr
;;;370    
                          ENDP


                          AREA ||i.SPI_TransmitCRC||, CODE, READONLY, ALIGN=1

                  SPI_TransmitCRC PROC
;;;691      */
;;;692    void SPI_TransmitCRC(SPI_TypeDef* SPIx)
000000  8801              LDRH     r1,[r0,#0]
;;;693    {
;;;694      /* Check the parameters */
;;;695      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;696      
;;;697      /* Enable the selected SPI CRC transmission */
;;;698      SPIx->CR1 |= SPI_CR1_CRCNEXT;
000002  f4415180          ORR      r1,r1,#0x1000
000006  8001              STRH     r1,[r0,#0]
;;;699    }
000008  4770              BX       lr
;;;700    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32L1xx_StdPeriph_Driver\\src\\stm32l1xx_spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32l1xx_spi_c_2b928927____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32l1xx_spi_c_2b928927____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32l1xx_spi_c_2b928927____REVSH|
#line 144
|__asm___15_stm32l1xx_spi_c_2b928927____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
