; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\stm32l1xx_gpio.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\stm32l1xx_gpio.d --feedback=.\STM32L152-EVAL\STM32L152-EVAL.fed --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL --omf_browse=.\stm32l152-eval\stm32l1xx_gpio.crf ..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_gpio.c]
                          THUMB

                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;118      */
;;;119    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  492a              LDR      r1,|L1.172|
;;;120    {
000002  b510              PUSH     {r4,lr}
;;;121      /* Check the parameters */
;;;122      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;123    
;;;124      if(GPIOx == GPIOA)
000004  4288              CMP      r0,r1
000006  d106              BNE      |L1.22|
;;;125      {
;;;126        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
000008  2101              MOVS     r1,#1
00000a  4608              MOV      r0,r1
00000c  f7fffffe          BL       RCC_AHBPeriphResetCmd
;;;127        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);  
000010  2100              MOVS     r1,#0
000012  2001              MOVS     r0,#1
000014  e044              B        |L1.160|
                  |L1.22|
;;;128      }
;;;129      else if(GPIOx == GPIOB)
000016  4926              LDR      r1,|L1.176|
000018  4288              CMP      r0,r1
00001a  d106              BNE      |L1.42|
;;;130      {
;;;131        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  2002              MOVS     r0,#2
000020  f7fffffe          BL       RCC_AHBPeriphResetCmd
;;;132        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
000024  2100              MOVS     r1,#0
000026  2002              MOVS     r0,#2
000028  e03a              B        |L1.160|
                  |L1.42|
;;;133      }
;;;134      else if(GPIOx == GPIOC)
00002a  4922              LDR      r1,|L1.180|
00002c  4288              CMP      r0,r1
00002e  d106              BNE      |L1.62|
;;;135      {
;;;136        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
000030  2101              MOVS     r1,#1
000032  2004              MOVS     r0,#4
000034  f7fffffe          BL       RCC_AHBPeriphResetCmd
;;;137        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
000038  2100              MOVS     r1,#0
00003a  2004              MOVS     r0,#4
00003c  e030              B        |L1.160|
                  |L1.62|
;;;138      }
;;;139      else if(GPIOx == GPIOD)
00003e  491e              LDR      r1,|L1.184|
000040  4288              CMP      r0,r1
000042  d106              BNE      |L1.82|
;;;140      {
;;;141        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
000044  2101              MOVS     r1,#1
000046  2008              MOVS     r0,#8
000048  f7fffffe          BL       RCC_AHBPeriphResetCmd
;;;142        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
00004c  2100              MOVS     r1,#0
00004e  2008              MOVS     r0,#8
000050  e026              B        |L1.160|
                  |L1.82|
;;;143      }
;;;144      else if(GPIOx == GPIOE)
000052  491a              LDR      r1,|L1.188|
000054  4288              CMP      r0,r1
000056  d106              BNE      |L1.102|
;;;145      {
;;;146        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
000058  2101              MOVS     r1,#1
00005a  2010              MOVS     r0,#0x10
00005c  f7fffffe          BL       RCC_AHBPeriphResetCmd
;;;147        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
000060  2100              MOVS     r1,#0
000062  2010              MOVS     r0,#0x10
000064  e01c              B        |L1.160|
                  |L1.102|
;;;148      }
;;;149      else if(GPIOx == GPIOF)
000066  4916              LDR      r1,|L1.192|
000068  4288              CMP      r0,r1
00006a  d106              BNE      |L1.122|
;;;150      {
;;;151        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
00006c  2101              MOVS     r1,#1
00006e  2040              MOVS     r0,#0x40
000070  f7fffffe          BL       RCC_AHBPeriphResetCmd
;;;152        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
000074  2100              MOVS     r1,#0
000076  2040              MOVS     r0,#0x40
000078  e012              B        |L1.160|
                  |L1.122|
;;;153      }
;;;154      else if(GPIOx == GPIOG)
00007a  4912              LDR      r1,|L1.196|
00007c  4288              CMP      r0,r1
00007e  d106              BNE      |L1.142|
;;;155      {
;;;156        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, ENABLE);
000080  2101              MOVS     r1,#1
000082  2080              MOVS     r0,#0x80
000084  f7fffffe          BL       RCC_AHBPeriphResetCmd
;;;157        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, DISABLE);
000088  2100              MOVS     r1,#0
00008a  2080              MOVS     r0,#0x80
00008c  e008              B        |L1.160|
                  |L1.142|
;;;158      }   
;;;159      else
;;;160      {
;;;161        if(GPIOx == GPIOH)
00008e  490e              LDR      r1,|L1.200|
000090  4288              CMP      r0,r1
000092  d109              BNE      |L1.168|
;;;162        {
;;;163          RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
000094  2101              MOVS     r1,#1
000096  2020              MOVS     r0,#0x20
000098  f7fffffe          BL       RCC_AHBPeriphResetCmd
;;;164          RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
00009c  2100              MOVS     r1,#0
00009e  2020              MOVS     r0,#0x20
                  |L1.160|
0000a0  e8bd4010          POP      {r4,lr}
0000a4  f7ffbffe          B.W      RCC_AHBPeriphResetCmd
                  |L1.168|
;;;165        }
;;;166      }
;;;167    }
0000a8  bd10              POP      {r4,pc}
;;;168    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L1.172|
                          DCD      0x40020000
                  |L1.176|
                          DCD      0x40020400
                  |L1.180|
                          DCD      0x40020800
                  |L1.184|
                          DCD      0x40020c00
                  |L1.188|
                          DCD      0x40021000
                  |L1.192|
                          DCD      0x40021800
                  |L1.196|
                          DCD      0x40021c00
                  |L1.200|
                          DCD      0x40021400

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=1

                  GPIO_Init PROC
;;;178      */
;;;179    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;180    {
;;;181      uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
000002  2300              MOVS     r3,#0
;;;182      
;;;183      /* Check the parameters */
;;;184      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;185      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;186      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;187      assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
;;;188    
;;;189      /* -------------------------Configure the port pins---------------- */
;;;190      /*-- GPIO Mode Configuration --*/
;;;191      for (pinpos = 0x00; pinpos < 0x10; pinpos++)
;;;192      {
;;;193        pos = ((uint32_t)0x01) << pinpos;
000004  2401              MOVS     r4,#1
;;;194    
;;;195        /* Get the port pins position */
;;;196        currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;197    
;;;198        if (currentpin == pos)
;;;199        {
;;;200          GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
000006  2703              MOVS     r7,#3
                  |L2.8|
000008  680d              LDR      r5,[r1,#0]            ;196
00000a  fa04f203          LSL      r2,r4,r3              ;193
00000e  4015              ANDS     r5,r5,r2              ;196
000010  4295              CMP      r5,r2                 ;198
000012  d140              BNE      |L2.150|
000014  f8d0c000          LDR      r12,[r0,#0]
000018  005e              LSLS     r6,r3,#1
00001a  fa07f506          LSL      r5,r7,r6
00001e  ea2c0c05          BIC      r12,r12,r5
000022  f8c0c000          STR      r12,[r0,#0]
;;;201    
;;;202          GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
000026  f891c004          LDRB     r12,[r1,#4]
00002a  f8d0e000          LDR      lr,[r0,#0]
00002e  fa0cfc06          LSL      r12,r12,r6
000032  ea4c0c0e          ORR      r12,r12,lr
000036  f8c0c000          STR      r12,[r0,#0]
;;;203    
;;;204          if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
00003a  f891c004          LDRB     r12,[r1,#4]
00003e  f1bc0f01          CMP      r12,#1
000042  d002              BEQ      |L2.74|
000044  f1bc0f02          CMP      r12,#2
000048  d11d              BNE      |L2.134|
                  |L2.74|
;;;205          {
;;;206            /* Check Speed mode parameters */
;;;207            assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;208    
;;;209            /* Speed mode configuration */
;;;210            GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
00004a  f8d0c008          LDR      r12,[r0,#8]
00004e  ea2c0c05          BIC      r12,r12,r5
000052  f8c0c008          STR      r12,[r0,#8]
;;;211            GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
000056  f891c005          LDRB     r12,[r1,#5]
00005a  f8d0e008          LDR      lr,[r0,#8]
00005e  fa0cfc06          LSL      r12,r12,r6
000062  ea4c0c0e          ORR      r12,r12,lr
000066  f8c0c008          STR      r12,[r0,#8]
;;;212    
;;;213            /*Check Output mode parameters */
;;;214            assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
;;;215    
;;;216            /* Output mode configuration */
;;;217            GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
00006a  f8b0c004          LDRH     r12,[r0,#4]
00006e  ea2c0c02          BIC      r12,r12,r2
000072  f8a0c004          STRH     r12,[r0,#4]
;;;218            GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
000076  f8b0c004          LDRH     r12,[r0,#4]
00007a  798a              LDRB     r2,[r1,#6]
00007c  409a              LSLS     r2,r2,r3
00007e  ea4c0c02          ORR      r12,r12,r2
000082  f8a0c004          STRH     r12,[r0,#4]
                  |L2.134|
;;;219          }
;;;220    
;;;221          /* Pull-up Pull down resistor configuration */
;;;222          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
000086  68c2              LDR      r2,[r0,#0xc]
000088  43aa              BICS     r2,r2,r5
00008a  60c2              STR      r2,[r0,#0xc]
;;;223          GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
00008c  79ca              LDRB     r2,[r1,#7]
00008e  68c5              LDR      r5,[r0,#0xc]
000090  40b2              LSLS     r2,r2,r6
000092  432a              ORRS     r2,r2,r5
000094  60c2              STR      r2,[r0,#0xc]
                  |L2.150|
000096  1c5b              ADDS     r3,r3,#1
000098  2b10              CMP      r3,#0x10              ;191
00009a  d3b5              BCC      |L2.8|
;;;224        }
;;;225      }
;;;226    }
00009c  bdf0              POP      {r4-r7,pc}
;;;227    
                          ENDP


                          AREA ||i.GPIO_PinAFConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinAFConfig PROC
;;;525      */
;;;526    void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
000000  074b              LSLS     r3,r1,#29
;;;527    {
;;;528      uint32_t temp = 0x00;
;;;529      uint32_t temp_2 = 0x00;
;;;530      
;;;531      /* Check the parameters */
;;;532      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;533      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;534      assert_param(IS_GPIO_AF(GPIO_AF));
;;;535      
;;;536      temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
000002  0edb              LSRS     r3,r3,#27
000004  409a              LSLS     r2,r2,r3
;;;537      GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
000006  08c9              LSRS     r1,r1,#3
000008  b510              PUSH     {r4,lr}               ;527
00000a  eb000081          ADD      r0,r0,r1,LSL #2
00000e  6a01              LDR      r1,[r0,#0x20]
000010  240f              MOVS     r4,#0xf
000012  409c              LSLS     r4,r4,r3
000014  43a1              BICS     r1,r1,r4
000016  6201              STR      r1,[r0,#0x20]
;;;538      temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
000018  6a01              LDR      r1,[r0,#0x20]
00001a  4311              ORRS     r1,r1,r2
;;;539      GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
00001c  6201              STR      r1,[r0,#0x20]
;;;540    }
00001e  bd10              POP      {r4,pc}
;;;541    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;254      */
;;;255    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b508              PUSH     {r3,lr}
;;;256    {
;;;257      __IO uint32_t tmp = 0x00010000;
;;;258      
;;;259      /* Check the parameters */
;;;260      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;261      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;262      
;;;263      tmp |= GPIO_Pin;
000002  f4413280          ORR      r2,r1,#0x10000
;;;264      /* Set LCKK bit */
;;;265      GPIOx->LCKR = tmp;
000006  9200              STR      r2,[sp,#0]
000008  61c2              STR      r2,[r0,#0x1c]
;;;266      /* Reset LCKK bit */
;;;267      GPIOx->LCKR =  GPIO_Pin;
00000a  61c1              STR      r1,[r0,#0x1c]
;;;268      /* Set LCKK bit */
;;;269      GPIOx->LCKR = tmp;
00000c  9900              LDR      r1,[sp,#0]
00000e  61c1              STR      r1,[r0,#0x1c]
;;;270      /* Read LCKK bit*/
;;;271      tmp = GPIOx->LCKR;
000010  69c1              LDR      r1,[r0,#0x1c]
;;;272      /* Read LCKK bit*/
;;;273      tmp = GPIOx->LCKR;
000012  69c0              LDR      r0,[r0,#0x1c]
000014  9000              STR      r0,[sp,#0]
;;;274    }
000016  bd08              POP      {r3,pc}
;;;275    
                          ENDP


                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;322      */
;;;323    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  8a00              LDRH     r0,[r0,#0x10]
;;;324    {
;;;325      /* Check the parameters */
;;;326      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;327      
;;;328      return ((uint16_t)GPIOx->IDR);
;;;329    }
000002  4770              BX       lr
;;;330    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;298      */
;;;299    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;300    {
;;;301      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;302      
;;;303      /* Check the parameters */
;;;304      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;305      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;306    
;;;307      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  8a12              LDRH     r2,[r2,#0x10]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L6.12|
;;;308      {
;;;309        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L6.12|
;;;310      }
;;;311      else
;;;312      {
;;;313        bitstatus = (uint8_t)Bit_RESET;
;;;314      }
;;;315      return bitstatus;
;;;316    }
00000c  4770              BX       lr
;;;317    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;361      */
;;;362    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  8a80              LDRH     r0,[r0,#0x14]
;;;363    {
;;;364      /* Check the parameters */
;;;365      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;366      
;;;367      return ((uint16_t)GPIOx->ODR);
;;;368    }
000002  4770              BX       lr
;;;369    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;337      */
;;;338    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;339    {
;;;340      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;341    
;;;342      /* Check the parameters */
;;;343      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;344      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;345      
;;;346      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  8a92              LDRH     r2,[r2,#0x14]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L8.12|
;;;347      {
;;;348        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L8.12|
;;;349      }
;;;350      else
;;;351      {
;;;352        bitstatus = (uint8_t)Bit_RESET;
;;;353      }
;;;354      return bitstatus;
;;;355    }
00000c  4770              BX       lr
;;;356    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;398      */
;;;399    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8341              STRH     r1,[r0,#0x1a]
;;;400    {
;;;401      /* Check the parameters */
;;;402      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;403      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;404      
;;;405      GPIOx->BSRRH = GPIO_Pin;
;;;406    }
000002  4770              BX       lr
;;;407    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;379      */
;;;380    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8301              STRH     r1,[r0,#0x18]
;;;381    {
;;;382      /* Check the parameters */
;;;383      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;384      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;385      
;;;386      GPIOx->BSRRL = GPIO_Pin;
;;;387    }
000002  4770              BX       lr
;;;388    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;233      */
;;;234    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;235    {
;;;236      /* Reset GPIO init structure parameters values */
;;;237      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
;;;238      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
000004  6001              STR      r1,[r0,#0]
000006  2100              MOVS     r1,#0
000008  7101              STRB     r1,[r0,#4]
;;;239      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_400KHz;
00000a  7141              STRB     r1,[r0,#5]
;;;240      GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
00000c  7181              STRB     r1,[r0,#6]
;;;241      GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
00000e  71c1              STRB     r1,[r0,#7]
;;;242    }
000010  4770              BX       lr
;;;243    
                          ENDP


                          AREA ||i.GPIO_ToggleBits||, CODE, READONLY, ALIGN=1

                  GPIO_ToggleBits PROC
;;;456      */
;;;457    void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8a82              LDRH     r2,[r0,#0x14]
;;;458    {
;;;459      /* Check the parameters */
;;;460      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;461    
;;;462      GPIOx->ODR ^= GPIO_Pin;
000002  404a              EORS     r2,r2,r1
000004  8282              STRH     r2,[r0,#0x14]
;;;463    }
000006  4770              BX       lr
;;;464    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;442      */
;;;443    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  8281              STRH     r1,[r0,#0x14]
;;;444    {
;;;445      /* Check the parameters */
;;;446      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;447      
;;;448      GPIOx->ODR = PortVal;
;;;449    }
000002  4770              BX       lr
;;;450    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;418      */
;;;419    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  b10a              CBZ      r2,|L14.6|
;;;420    {
;;;421      /* Check the parameters */
;;;422      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;423      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;424      assert_param(IS_GPIO_BIT_ACTION(BitVal));
;;;425      
;;;426      if (BitVal != Bit_RESET)
;;;427      {
;;;428        GPIOx->BSRRL = GPIO_Pin;
000002  8301              STRH     r1,[r0,#0x18]
;;;429      }
;;;430      else
;;;431      {
;;;432        GPIOx->BSRRH = GPIO_Pin ;
;;;433      }
;;;434    }
000004  4770              BX       lr
                  |L14.6|
000006  8341              STRH     r1,[r0,#0x1a]         ;432
000008  4770              BX       lr
;;;435    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32L1xx_StdPeriph_Driver\\src\\stm32l1xx_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32l1xx_gpio_c_f8e8e39a____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32l1xx_gpio_c_f8e8e39a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32l1xx_gpio_c_f8e8e39a____REVSH|
#line 144
|__asm___16_stm32l1xx_gpio_c_f8e8e39a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
