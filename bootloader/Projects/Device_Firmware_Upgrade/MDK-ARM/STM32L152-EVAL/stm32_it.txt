; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\stm32_it.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\stm32_it.d --feedback=.\STM32L152-EVAL\STM32L152-EVAL.fed --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL --omf_browse=.\stm32l152-eval\stm32_it.crf ..\src\stm32_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
                  |L1.0|
;;;97     *******************************************************************************/
;;;98     void BusFault_Handler(void)
000000  e7fe              B        |L1.0|
;;;99     {
;;;100      /* Go to infinite loop when Bus Fault exception occurs */
;;;101      while (1)
;;;102      {
;;;103      }
;;;104    }
;;;105    
                          ENDP


                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;138    *******************************************************************************/
;;;139    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;140    {
;;;141    }
;;;142    
                          ENDP


                          AREA ||i.EXTI15_10_IRQHandler||, CODE, READONLY, ALIGN=2

                  EXTI15_10_IRQHandler PROC
;;;198    #else
;;;199    void EXTI15_10_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;200    #endif
;;;201    {
;;;202      if (EXTI_GetITStatus(KEY_BUTTON_EXTI_LINE) != RESET)
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       EXTI_GetITStatus
000008  2800              CMP      r0,#0
00000a  d00c              BEQ      |L3.38|
;;;203      {
;;;204        if (pInformation->Current_Feature & 0x20) //Remote wake-up enabled
00000c  4806              LDR      r0,|L3.40|
00000e  6800              LDR      r0,[r0,#0]  ; pInformation
000010  7a40              LDRB     r0,[r0,#9]
000012  0680              LSLS     r0,r0,#26
000014  d502              BPL      |L3.28|
;;;205        {
;;;206          Resume(RESUME_INTERNAL);
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       Resume
                  |L3.28|
;;;207        }
;;;208    
;;;209        /* Clear the EXTI line 9 pending bit */
;;;210        EXTI_ClearITPendingBit(KEY_BUTTON_EXTI_LINE);
00001c  e8bd4010          POP      {r4,lr}
000020  2001              MOVS     r0,#1
000022  f7ffbffe          B.W      EXTI_ClearITPendingBit
                  |L3.38|
;;;211      }
;;;212    }
000026  bd10              POP      {r4,pc}
;;;213    
                          ENDP

                  |L3.40|
                          DCD      pInformation

                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
                  |L4.0|
;;;67     *******************************************************************************/
;;;68     void HardFault_Handler(void)
000000  e7fe              B        |L4.0|
;;;69     {
;;;70       /* Go to infinite loop when Hard Fault exception occurs */
;;;71       while (1)
;;;72       {
;;;73       }
;;;74     }
;;;75     
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
                  |L5.0|
;;;82     *******************************************************************************/
;;;83     void MemManage_Handler(void)
000000  e7fe              B        |L5.0|
;;;84     {
;;;85       /* Go to infinite loop when Memory Manage exception occurs */
;;;86       while (1)
;;;87       {
;;;88       }
;;;89     }
;;;90     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;56     *******************************************************************************/
;;;57     void NMI_Handler(void)
000000  4770              BX       lr
;;;58     {
;;;59     }
;;;60     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;149    *******************************************************************************/
;;;150    void PendSV_Handler(void)
000000  4770              BX       lr
;;;151    {
;;;152    }
;;;153    
                          ENDP


                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;127    *******************************************************************************/
;;;128    void SVC_Handler(void)
000000  4770              BX       lr
;;;129    {
;;;130    }
;;;131    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;160    *******************************************************************************/
;;;161    void SysTick_Handler(void)
000000  4802              LDR      r0,|L9.12|
;;;162    {
;;;163      extern uint32_t msTicks;
;;;164      msTicks++;		// инкремент счётчика времени
000002  6801              LDR      r1,[r0,#0]  ; msTicks
000004  1c49              ADDS     r1,r1,#1
000006  6001              STR      r1,[r0,#0]  ; msTicks
;;;165    
;;;166    }
000008  4770              BX       lr
;;;167    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      msTicks

                          AREA ||i.USB_FS_WKUP_IRQHandler||, CODE, READONLY, ALIGN=1

                  USB_FS_WKUP_IRQHandler PROC
;;;222    #if defined(STM32L1XX_MD) || defined(STM32L1XX_HD)|| defined(STM32L1XX_MD_PLUS)
;;;223    void USB_FS_WKUP_IRQHandler(void)
000000  f44f2080          MOV      r0,#0x40000
;;;224    #else
;;;225    void USBWakeUp_IRQHandler(void)
;;;226    #endif
;;;227    {
;;;228      EXTI_ClearITPendingBit(EXTI_Line18);
000004  f7ffbffe          B.W      EXTI_ClearITPendingBit
;;;229    }
;;;230    
                          ENDP


                          AREA ||i.USB_LP_IRQHandler||, CODE, READONLY, ALIGN=1

                  USB_LP_IRQHandler PROC
;;;178    #if defined(STM32L1XX_MD) || defined(STM32L1XX_HD)|| defined(STM32L1XX_MD_PLUS)|| defined (STM32F37X)
;;;179    void USB_LP_IRQHandler(void)
000000  f7ffbffe          B.W      USB_Istr
;;;180    #else
;;;181    void USB_LP_CAN1_RX0_IRQHandler(void)
;;;182    #endif
;;;183    {
;;;184      USB_Istr();
;;;185    }
;;;186    /*******************************************************************************
                          ENDP


                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
                  |L12.0|
;;;112    *******************************************************************************/
;;;113    void UsageFault_Handler(void)
000000  e7fe              B        |L12.0|
;;;114    {
;;;115      /* Go to infinite loop when Usage Fault exception occurs */
;;;116      while (1)
;;;117      {
;;;118      }
;;;119    }
;;;120    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\src\\stm32_it.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_stm32_it_c_bb8ca80c____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_stm32_it_c_bb8ca80c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_stm32_it_c_bb8ca80c____REVSH|
#line 144
|__asm___10_stm32_it_c_bb8ca80c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
