; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\flash_if.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\flash_if.d --feedback=.\STM32L152-EVAL\STM32L152-EVAL.fed --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL --omf_browse=.\stm32l152-eval\flash_if.crf ..\src\flash_if.c]
                          THUMB

                          AREA ||i.FLASH_If_Erase||, CODE, READONLY, ALIGN=1

                  FLASH_If_Erase PROC
;;;64     *******************************************************************************/
;;;65     uint16_t FLASH_If_Erase(uint32_t SectorAddress)
000000  b510              PUSH     {r4,lr}
;;;66     {
000002  4604              MOV      r4,r0
;;;67     #if defined(STM32L1XX_MD) || defined(STM32L1XX_HD)|| defined(STM32L1XX_MD_PLUS)
;;;68       FLASH_ClearFlag(FLASH_FLAG_PGAERR | FLASH_FLAG_OPTVERR);
000004  f44f6020          MOV      r0,#0xa00
000008  f7fffffe          BL       FLASH_ClearFlag
;;;69       FLASH_ErasePage(SectorAddress);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       FLASH_ErasePage
;;;70     #else
;;;71       FLASH_ErasePage(SectorAddress);
;;;72     #endif /* STM32L1XX_XD */
;;;73       
;;;74       return MAL_OK;
000012  2000              MOVS     r0,#0
;;;75     }
000014  bd10              POP      {r4,pc}
;;;76     
                          ENDP


                          AREA ||i.FLASH_If_Init||, CODE, READONLY, ALIGN=1

                  FLASH_If_Init PROC
;;;52     *******************************************************************************/
;;;53     uint16_t FLASH_If_Init(void)
000000  2000              MOVS     r0,#0
;;;54     {
;;;55       return MAL_OK;
;;;56     }
000002  4770              BX       lr
;;;57     
                          ENDP


                          AREA ||i.FLASH_If_Read||, CODE, READONLY, ALIGN=1

                  FLASH_If_Read PROC
;;;165    *******************************************************************************/
;;;166    uint8_t *FLASH_If_Read (uint32_t SectorAddress, uint32_t DataLength)
000000  4770              BX       lr
;;;167    {
;;;168      return  (uint8_t*)(SectorAddress);
;;;169    }
;;;170    
                          ENDP


                          AREA ||i.FLASH_If_Write||, CODE, READONLY, ALIGN=2

                  FLASH_If_Write PROC
;;;83     *******************************************************************************/
;;;84     uint16_t FLASH_If_Write(uint32_t SectorAddress, uint32_t DataLength)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;85     {
;;;86       uint32_t idx = 0;
;;;87     #if defined(STM32L1XX_MD) || defined(STM32L1XX_HD)|| defined(STM32L1XX_MD_PLUS)
;;;88       __IO uint32_t* malPointer = (uint32_t *)MAL_Buffer;
000004  4c1c              LDR      r4,|L4.120|
000006  b0a1              SUB      sp,sp,#0x84           ;85
;;;89       __IO uint32_t* memPointer = (uint32_t *)SectorAddress;
;;;90       __IO uint32_t memBuffer[32]; /* Temporary buffer holding data that will be written in a half-page space */
;;;91       __IO uint32_t* mempBuffer = memBuffer;  
;;;92       __IO uint32_t* tmp;
;;;93     #endif /* STM32L1XX_XD */      
;;;94       
;;;95       if  (DataLength & 0x3) /* Not an aligned data */
000008  078a              LSLS     r2,r1,#30
00000a  4627              MOV      r7,r4                 ;88
00000c  d00a              BEQ      |L4.36|
;;;96       {
;;;97         for (idx = DataLength; idx < ((DataLength & 0xFFFC) + 4); idx++)
00000e  f64f73fc          MOV      r3,#0xfffc
;;;98         {
;;;99           MAL_Buffer[idx] = 0xFF;
000012  25ff              MOVS     r5,#0xff
000014  400b              ANDS     r3,r3,r1              ;97
000016  460a              MOV      r2,r1                 ;97
000018  1d1b              ADDS     r3,r3,#4              ;97
00001a  e001              B        |L4.32|
                  |L4.28|
00001c  54bd              STRB     r5,[r7,r2]
00001e  1c52              ADDS     r2,r2,#1
                  |L4.32|
000020  4293              CMP      r3,r2                 ;97
000022  d8fb              BHI      |L4.28|
                  |L4.36|
;;;100        }
;;;101      } 
;;;102      
;;;103    #if defined(STM32L1XX_MD) || defined(STM32L1XX_HD)|| defined(STM32L1XX_MD_PLUS) 
;;;104      /* Reinitialize the intermediate buffer pointer */
;;;105      mempBuffer = memBuffer;
000024  466a              MOV      r2,sp
;;;106      
;;;107      /* If the address is not aligned to half-page fill the first location with existing data */
;;;108      if (((uint32_t)memPointer & 0x7F) != 0)
000026  0643              LSLS     r3,r0,#25
000028  d006              BEQ      |L4.56|
;;;109      {
;;;110        /* get the aligned address */
;;;111        tmp = (uint32_t *)((uint32_t)memPointer & 0xFFFFFF80);
00002a  f020037f          BIC      r3,r0,#0x7f
;;;112        
;;;113        /* Read the first part from the memory */
;;;114        while (tmp < memPointer)
00002e  e001              B        |L4.52|
                  |L4.48|
;;;115        {
;;;116          *(uint32_t *)(mempBuffer++) = *(uint32_t *)(tmp++);
000030  cb20              LDM      r3!,{r5}
000032  c220              STM      r2!,{r5}
                  |L4.52|
000034  4283              CMP      r3,r0                 ;114
000036  d3fb              BCC      |L4.48|
                  |L4.56|
;;;117        }
;;;118      }    
;;;119      
;;;120      while (malPointer < (uint32_t*)(MAL_Buffer + DataLength))
;;;121      {    
;;;122        /* Fill with the received buffer */
;;;123        while (mempBuffer < (memBuffer + 32))
;;;124        {
;;;125          /* If there are still data available in the received buffer */
;;;126          if (malPointer < ((uint32_t *)MAL_Buffer + DataLength))
000038  eb070681          ADD      r6,r7,r1,LSL #2
00003c  f04f0800          MOV      r8,#0
000040  440f              ADD      r7,r7,r1              ;120
000042  ad20              ADD      r5,sp,#0x80           ;120
                  |L4.68|
000044  42a7              CMP      r7,r4                 ;120
000046  d913              BLS      |L4.112|
000048  4641              MOV      r1,r8                 ;120
                  |L4.74|
00004a  42aa              CMP      r2,r5                 ;123
00004c  d206              BCS      |L4.92|
00004e  42a6              CMP      r6,r4
000050  d902              BLS      |L4.88|
;;;127          {
;;;128            *(uint32_t *)(mempBuffer++) = *(uint32_t *)(malPointer++);
000052  cc08              LDM      r4!,{r3}
000054  c208              STM      r2!,{r3}
000056  e7f8              B        |L4.74|
                  |L4.88|
;;;129          }
;;;130          else /* no more data available in the received buffer: fill remaining with dummy 0 */
;;;131          {
;;;132            *(uint32_t *)(mempBuffer++) = 0;
000058  c202              STM      r2!,{r1}
00005a  e7f6              B        |L4.74|
                  |L4.92|
;;;133          }
;;;134        }
;;;135       
;;;136        /* Write the buffer to the memory*/    
;;;137        FLASH_ProgramHalfPage(((uint32_t)memPointer & 0xFFFFFF80), (uint32_t *)(memBuffer));    
00005c  f020007f          BIC      r0,r0,#0x7f
000060  4681              MOV      r9,r0
000062  4669              MOV      r1,sp
000064  f7fffffe          BL       FLASH_ProgramHalfPage
;;;138        
;;;139        /* Increment the memory pointer */ 
;;;140        memPointer = (uint32_t *)(((uint32_t)memPointer & 0xFFFFFF80) + (32*4));
000068  f1090080          ADD      r0,r9,#0x80
;;;141        
;;;142        /* Reinitialize the intermediate buffer pointer */
;;;143        mempBuffer = memBuffer;
00006c  466a              MOV      r2,sp
00006e  e7e9              B        |L4.68|
                  |L4.112|
;;;144      }
;;;145      
;;;146    #else
;;;147      
;;;148      /* Data received are Word multiple */    
;;;149      for (idx = 0; idx <  DataLength; idx = idx + 4)
;;;150      {
;;;151        FLASH_ProgramWord(SectorAddress, *(uint32_t *)(MAL_Buffer + idx));  
;;;152        SectorAddress += 4;
;;;153      } 
;;;154    #endif /* STM32L1XX_XD */
;;;155     
;;;156      return MAL_OK;
;;;157    }
000070  b021              ADD      sp,sp,#0x84
000072  2000              MOVS     r0,#0                 ;156
000074  e8bd83f0          POP      {r4-r9,pc}
;;;158    
                          ENDP

                  |L4.120|
                          DCD      MAL_Buffer

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tHalfPage1
                          %        128

                          AREA ||area_number.7||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.bss||
                  tHalfPage2
                          %        128

;*** Start embedded assembler ***

#line 1 "..\\src\\flash_if.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_flash_if_c_79a35935____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_flash_if_c_79a35935____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_flash_if_c_79a35935____REVSH|
#line 144
|__asm___10_flash_if_c_79a35935____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
