; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\misc.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\misc.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL --omf_browse=.\stm32l152-eval\misc.crf ..\..\..\Libraries\STM32F10x_StdPeriph_Driver\src\misc.c]
                          THUMB

                          AREA ||i.NVIC_Init||, CODE, READONLY, ALIGN=2

                  NVIC_Init PROC
;;;117      */
;;;118    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;119    {
;;;120      uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
000002  230f              MOVS     r3,#0xf
;;;121      
;;;122      /* Check the parameters */
;;;123      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;124      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;125      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;126        
;;;127      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000004  78c4              LDRB     r4,[r0,#3]
;;;128      {
;;;129        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;130        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
;;;131        tmppre = (0x4 - tmppriority);
;;;132        tmpsub = tmpsub >> tmppriority;
;;;133    
;;;134        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
;;;135        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
;;;136        tmppriority = tmppriority << 0x04;
;;;137            
;;;138        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
000006  7801              LDRB     r1,[r0,#0]
;;;139        
;;;140        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;141        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000008  2201              MOVS     r2,#1
00000a  b1f4              CBZ      r4,|L1.74|
00000c  4c14              LDR      r4,|L1.96|
00000e  6824              LDR      r4,[r4,#0]            ;130
000010  7845              LDRB     r5,[r0,#1]            ;134
000012  f40464e0          AND      r4,r4,#0x700          ;130
000016  f5c464e0          RSB      r4,r4,#0x700          ;130
00001a  0a24              LSRS     r4,r4,#8              ;130
00001c  f1c40604          RSB      r6,r4,#4              ;131
000020  40e3              LSRS     r3,r3,r4              ;132
000022  7884              LDRB     r4,[r0,#2]            ;135
000024  40b5              LSLS     r5,r5,r6              ;134
000026  401c              ANDS     r4,r4,r3              ;135
000028  432c              ORRS     r4,r4,r5              ;135
00002a  f10121e0          ADD      r1,r1,#0xe000e000     ;135
00002e  0123              LSLS     r3,r4,#4              ;135
000030  f8813400          STRB     r3,[r1,#0x400]        ;138
000034  7800              LDRB     r0,[r0,#0]
000036  f000011f          AND      r1,r0,#0x1f
00003a  408a              LSLS     r2,r2,r1
00003c  0940              LSRS     r0,r0,#5
00003e  0080              LSLS     r0,r0,#2
000040  f10020e0          ADD      r0,r0,#0xe000e000
000044  f8c02100          STR      r2,[r0,#0x100]
;;;142          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;143      }
;;;144      else
;;;145      {
;;;146        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;147        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
;;;148          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;149      }
;;;150    }
000048  bd70              POP      {r4-r6,pc}
                  |L1.74|
00004a  f001001f          AND      r0,r1,#0x1f           ;147
00004e  4082              LSLS     r2,r2,r0              ;147
000050  0948              LSRS     r0,r1,#5              ;147
000052  0080              LSLS     r0,r0,#2              ;147
000054  f10020e0          ADD      r0,r0,#0xe000e000     ;147
000058  f8c02180          STR      r2,[r0,#0x180]        ;147
00005c  bd70              POP      {r4-r6,pc}
;;;151    
                          ENDP

00005e  0000              DCW      0x0000
                  |L1.96|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_PriorityGroupConfig||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;101      */
;;;102    void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  4902              LDR      r1,|L2.12|
;;;103    {
;;;104      /* Check the parameters */
;;;105      assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;106      
;;;107      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;108      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  4308              ORRS     r0,r0,r1
000004  4902              LDR      r1,|L2.16|
000006  6008              STR      r0,[r1,#0]
;;;109    }
000008  4770              BX       lr
;;;110    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x05fa0000
                  |L2.16|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_SetVectorTable||, CODE, READONLY, ALIGN=2

                  NVIC_SetVectorTable PROC
;;;161      */
;;;162    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000000  4a02              LDR      r2,|L3.12|
;;;163    { 
;;;164      /* Check the parameters */
;;;165      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;166      assert_param(IS_NVIC_OFFSET(Offset));  
;;;167       
;;;168      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000002  4011              ANDS     r1,r1,r2
000004  4301              ORRS     r1,r1,r0
000006  4802              LDR      r0,|L3.16|
000008  6001              STR      r1,[r0,#0]
;;;169    }
00000a  4770              BX       lr
;;;170    
                          ENDP

                  |L3.12|
                          DCD      0x1fffff80
                  |L3.16|
                          DCD      0xe000ed08

                          AREA ||i.NVIC_SystemLPConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemLPConfig PROC
;;;180      */
;;;181    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000000  4a04              LDR      r2,|L4.20|
;;;182    {
;;;183      /* Check the parameters */
;;;184      assert_param(IS_NVIC_LP(LowPowerMode));
;;;185      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;186      
;;;187      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;188      {
;;;189        SCB->SCR |= LowPowerMode;
;;;190      }
;;;191      else
;;;192      {
;;;193        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L4.12|
000008  4301              ORRS     r1,r1,r0              ;189
00000a  e000              B        |L4.14|
                  |L4.12|
00000c  4381              BICS     r1,r1,r0
                  |L4.14|
00000e  6011              STR      r1,[r2,#0]            ;189
;;;194      }
;;;195    }
000010  4770              BX       lr
;;;196    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0xe000ed10

                          AREA ||i.SysTick_CLKSourceConfig||, CODE, READONLY, ALIGN=1

                  SysTick_CLKSourceConfig PROC
;;;204      */
;;;205    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;206    {
;;;207      /* Check the parameters */
;;;208      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;209      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
000004  2804              CMP      r0,#4
;;;210      {
;;;211        SysTick->CTRL |= SysTick_CLKSource_HCLK;
;;;212      }
;;;213      else
;;;214      {
;;;215        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
000006  6908              LDR      r0,[r1,#0x10]
000008  d003              BEQ      |L5.18|
00000a  f0200004          BIC      r0,r0,#4
                  |L5.14|
00000e  6108              STR      r0,[r1,#0x10]         ;211
;;;216      }
;;;217    }
000010  4770              BX       lr
                  |L5.18|
000012  f0400004          ORR      r0,r0,#4              ;211
000016  e7fa              B        |L5.14|
;;;218    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F10x_StdPeriph_Driver\\src\\misc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_misc_c_d0fc1254____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_misc_c_d0fc1254____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_misc_c_d0fc1254____REVSH|
#line 144
|__asm___6_misc_c_d0fc1254____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
