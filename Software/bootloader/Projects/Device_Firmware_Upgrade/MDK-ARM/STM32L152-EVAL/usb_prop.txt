; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\usb_prop.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\usb_prop.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL --omf_browse=.\stm32l152-eval\usb_prop.crf ..\src\usb_prop.c]
                          THUMB

                          AREA ||i.DFU_Data_Setup||, CODE, READONLY, ALIGN=2

                  DFU_Data_Setup PROC
;;;289    *******************************************************************************/
;;;290    RESULT DFU_Data_Setup(uint8_t RequestNo)
000000  4916              LDR      r1,|L1.92|
;;;291    {
000002  b510              PUSH     {r4,lr}
;;;292      uint8_t *(*CopyRoutine)(uint16_t);
;;;293      CopyRoutine = NULL;
;;;294    
;;;295      if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
000004  680a              LDR      r2,[r1,#0]  ; pInformation
000006  7811              LDRB     r1,[r2,#0]
000008  f001017f          AND      r1,r1,#0x7f
00000c  2921              CMP      r1,#0x21
00000e  d122              BNE      |L1.86|
;;;296      {
;;;297        if (RequestNo == DFU_UPLOAD && (DeviceState == STATE_dfuIDLE
000010  4b13              LDR      r3,|L1.96|
000012  2802              CMP      r0,#2
000014  7819              LDRB     r1,[r3,#0]
000016  d006              BEQ      |L1.38|
;;;298                                        || DeviceState == STATE_dfuUPLOAD_IDLE ))
;;;299        {
;;;300          CopyRoutine = UPLOAD;
;;;301        }
;;;302        else if (RequestNo == DFU_DNLOAD && (DeviceState == STATE_dfuIDLE
000018  2801              CMP      r0,#1
00001a  d00a              BEQ      |L1.50|
;;;303                                             || DeviceState == STATE_dfuDNLOAD_IDLE))
;;;304        {
;;;305          DeviceState = STATE_dfuDNLOAD_SYNC;
;;;306          CopyRoutine = DNLOAD;
;;;307        }
;;;308        else if (RequestNo == DFU_GETSTATE)
00001c  2805              CMP      r0,#5
00001e  d010              BEQ      |L1.66|
;;;309        {
;;;310          CopyRoutine = GETSTATE;
;;;311        }
;;;312        else if (RequestNo == DFU_GETSTATUS)
000020  2803              CMP      r0,#3
000022  d010              BEQ      |L1.70|
000024  e017              B        |L1.86|
                  |L1.38|
000026  2902              CMP      r1,#2                 ;297
000028  d001              BEQ      |L1.46|
00002a  2909              CMP      r1,#9                 ;298
00002c  d113              BNE      |L1.86|
                  |L1.46|
00002e  490d              LDR      r1,|L1.100|
000030  e00a              B        |L1.72|
                  |L1.50|
000032  2902              CMP      r1,#2                 ;302
000034  d001              BEQ      |L1.58|
000036  2905              CMP      r1,#5                 ;303
000038  d10d              BNE      |L1.86|
                  |L1.58|
00003a  2003              MOVS     r0,#3                 ;305
00003c  7018              STRB     r0,[r3,#0]            ;305
00003e  490a              LDR      r1,|L1.104|
000040  e002              B        |L1.72|
                  |L1.66|
000042  490a              LDR      r1,|L1.108|
000044  e000              B        |L1.72|
                  |L1.70|
;;;313        {
;;;314          CopyRoutine = GETSTATUS;
000046  490a              LDR      r1,|L1.112|
                  |L1.72|
;;;315        }
;;;316        else
;;;317        {
;;;318          return USB_UNSUPPORT;
;;;319        }
;;;320      }
;;;321      else
;;;322      {
;;;323        return USB_UNSUPPORT;
;;;324      }
;;;325    
;;;326      if (CopyRoutine == NULL)
000048  b129              CBZ      r1,|L1.86|
;;;327      {
;;;328        return USB_UNSUPPORT;
;;;329      }
;;;330    
;;;331      pInformation->Ctrl_Info.CopyData = CopyRoutine;
;;;332      pInformation->Ctrl_Info.Usb_wOffset = 0;
00004a  2000              MOVS     r0,#0
00004c  6191              STR      r1,[r2,#0x18]
00004e  8250              STRH     r0,[r2,#0x12]
;;;333      (*CopyRoutine)(0);
000050  4788              BLX      r1
;;;334    
;;;335      return USB_SUCCESS;
000052  2000              MOVS     r0,#0
;;;336    }
000054  bd10              POP      {r4,pc}
                  |L1.86|
000056  2002              MOVS     r0,#2                 ;328
000058  bd10              POP      {r4,pc}
;;;337    
                          ENDP

00005a  0000              DCW      0x0000
                  |L1.92|
                          DCD      pInformation
                  |L1.96|
                          DCD      DeviceState
                  |L1.100|
                          DCD      UPLOAD
                  |L1.104|
                          DCD      DNLOAD
                  |L1.108|
                          DCD      GETSTATE
                  |L1.112|
                          DCD      GETSTATUS

                          AREA ||i.DFU_GetConfigDescriptor||, CODE, READONLY, ALIGN=2

                  DFU_GetConfigDescriptor PROC
;;;446    *******************************************************************************/
;;;447    uint8_t *DFU_GetConfigDescriptor(uint16_t Length)
000000  4901              LDR      r1,|L2.8|
;;;448    {
;;;449      return Standard_GetDescriptorData (Length, &Config_Descriptor);
000002  f7ffbffe          B.W      Standard_GetDescriptorData
;;;450    }
;;;451    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||.data||+0x18

                          AREA ||i.DFU_GetDeviceDescriptor||, CODE, READONLY, ALIGN=2

                  DFU_GetDeviceDescriptor PROC
;;;434    *******************************************************************************/
;;;435    uint8_t *DFU_GetDeviceDescriptor(uint16_t Length)
000000  4901              LDR      r1,|L3.8|
;;;436    {
;;;437      return Standard_GetDescriptorData(Length, &Device_Descriptor);
000002  f7ffbffe          B.W      Standard_GetDescriptorData
;;;438    }
;;;439    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      ||.data||+0x10

                          AREA ||i.DFU_GetStringDescriptor||, CODE, READONLY, ALIGN=2

                  DFU_GetStringDescriptor PROC
;;;458    *******************************************************************************/
;;;459    uint8_t *DFU_GetStringDescriptor(uint16_t Length)
000000  4905              LDR      r1,|L4.24|
;;;460    {
;;;461      uint8_t wValue0 = pInformation->USBwValue0;
000002  6809              LDR      r1,[r1,#0]  ; pInformation
000004  78c9              LDRB     r1,[r1,#3]
;;;462    
;;;463      if (wValue0 > 8)
000006  2908              CMP      r1,#8
000008  d901              BLS      |L4.14|
;;;464      {
;;;465        return NULL;
00000a  2000              MOVS     r0,#0
;;;466      }
;;;467      else
;;;468      {
;;;469        return Standard_GetDescriptorData(Length, &DFU_String_Descriptor[wValue0]);
;;;470      }
;;;471    }
00000c  4770              BX       lr
                  |L4.14|
00000e  4a03              LDR      r2,|L4.28|
000010  eb0201c1          ADD      r1,r2,r1,LSL #3       ;469
000014  f7ffbffe          B.W      Standard_GetDescriptorData
;;;472    
                          ENDP

                  |L4.24|
                          DCD      pInformation
                  |L4.28|
                          DCD      ||.data||+0x50

                          AREA ||i.DFU_Get_Interface_Setting||, CODE, READONLY, ALIGN=1

                  DFU_Get_Interface_Setting PROC
;;;481    *******************************************************************************/
;;;482    RESULT DFU_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
000000  2903              CMP      r1,#3
;;;483    {
000002  d801              BHI      |L5.8|
;;;484      if (AlternateSetting > 3)
;;;485      {
;;;486        return USB_UNSUPPORT;   /* In this application we don't have more than 3 AlternateSettings */
;;;487      }
;;;488      else if (Interface > 2)
000004  2802              CMP      r0,#2
000006  d901              BLS      |L5.12|
                  |L5.8|
;;;489      {
;;;490        return USB_UNSUPPORT; /* In this application we have only 1 interfaces */
000008  2002              MOVS     r0,#2
;;;491      }
;;;492    
;;;493      return USB_SUCCESS;
;;;494    }
00000a  4770              BX       lr
                  |L5.12|
00000c  2000              MOVS     r0,#0                 ;493
00000e  4770              BX       lr
;;;495    
                          ENDP


                          AREA ||i.DFU_NoData_Setup||, CODE, READONLY, ALIGN=2

                  DFU_NoData_Setup PROC
;;;344    *******************************************************************************/
;;;345    RESULT DFU_NoData_Setup(uint8_t RequestNo)
000000  b570              PUSH     {r4-r6,lr}
;;;346    {
;;;347    
;;;348      if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
000002  4929              LDR      r1,|L6.168|
000004  6809              LDR      r1,[r1,#0]  ; pInformation
000006  7809              LDRB     r1,[r1,#0]
000008  f001017f          AND      r1,r1,#0x7f
00000c  2921              CMP      r1,#0x21
00000e  d112              BNE      |L6.54|
;;;349      {
;;;350        /*DFU_NDLOAD*/
;;;351        if (RequestNo == DFU_DNLOAD)
;;;352        {
;;;353          /* End of DNLOAD operation*/
;;;354          if (DeviceState == STATE_dfuDNLOAD_IDLE || DeviceState == STATE_dfuIDLE )
000010  4b28              LDR      r3,|L6.180|
000012  2200              MOVS     r2,#0                 ;346
;;;355          {
;;;356            Manifest_State = Manifest_In_Progress;
000014  4e25              LDR      r6,|L6.172|
;;;357            DeviceState = STATE_dfuMANIFEST_SYNC;
;;;358            DeviceStatus[1] = 0;
000016  4926              LDR      r1,|L6.176|
000018  781d              LDRB     r5,[r3,#0]            ;354
00001a  2801              CMP      r0,#1                 ;351
00001c  d007              BEQ      |L6.46|
00001e  2402              MOVS     r4,#2                 ;354
;;;359            DeviceStatus[2] = 0;
;;;360            DeviceStatus[3] = 0;
;;;361            DeviceStatus[4] = DeviceState;
;;;362            return USB_SUCCESS;
;;;363          }
;;;364        }
;;;365        /*DFU_UPLOAD*/
;;;366        else if (RequestNo == DFU_UPLOAD)
000020  2802              CMP      r0,#2
000022  d013              BEQ      |L6.76|
;;;367        {
;;;368          DeviceState = STATE_dfuIDLE;
;;;369          DeviceStatus[1] = 0;
;;;370          DeviceStatus[2] = 0;
;;;371          DeviceStatus[3] = 0;
;;;372          DeviceStatus[4] = DeviceState;
;;;373          return USB_SUCCESS;
;;;374        }
;;;375    
;;;376        /*DFU_CLRSTATUS*/
;;;377        else if (RequestNo == DFU_CLRSTATUS)
000024  2804              CMP      r0,#4
000026  d017              BEQ      |L6.88|
;;;378        {
;;;379    
;;;380          if (DeviceState == STATE_dfuERROR)
;;;381          {
;;;382            DeviceState = STATE_dfuIDLE;
;;;383            DeviceStatus[0] = STATUS_OK;/*bStatus*/
;;;384            DeviceStatus[1] = 0;
;;;385            DeviceStatus[2] = 0;
;;;386            DeviceStatus[3] = 0; /*bwPollTimeout=0ms*/
;;;387            DeviceStatus[4] = DeviceState;/*bState*/
;;;388            DeviceStatus[5] = 0;/*iString*/
;;;389          }
;;;390          else
;;;391          {   /*State Error*/
;;;392            DeviceState = STATE_dfuERROR;
;;;393            DeviceStatus[0] = STATUS_ERRUNKNOWN;/*bStatus*/
;;;394            DeviceStatus[1] = 0;
;;;395            DeviceStatus[2] = 0;
;;;396            DeviceStatus[3] = 0; /*bwPollTimeout=0ms*/
;;;397            DeviceStatus[4] = DeviceState;/*bState*/
;;;398            DeviceStatus[5] = 0;/*iString*/
;;;399          }
;;;400          return USB_SUCCESS;
;;;401        }
;;;402        /*DFU_ABORT*/
;;;403        else if (RequestNo == DFU_ABORT)
000028  2806              CMP      r0,#6
00002a  d028              BEQ      |L6.126|
00002c  e003              B        |L6.54|
                  |L6.46|
00002e  2d05              CMP      r5,#5                 ;354
000030  d003              BEQ      |L6.58|
000032  2d02              CMP      r5,#2                 ;354
000034  d001              BEQ      |L6.58|
                  |L6.54|
;;;404        {
;;;405          if (DeviceState == STATE_dfuIDLE || DeviceState == STATE_dfuDNLOAD_SYNC
;;;406              || DeviceState == STATE_dfuDNLOAD_IDLE || DeviceState == STATE_dfuMANIFEST_SYNC
;;;407              || DeviceState == STATE_dfuUPLOAD_IDLE )
;;;408          {
;;;409            DeviceState = STATE_dfuIDLE;
;;;410            DeviceStatus[0] = STATUS_OK;
;;;411            DeviceStatus[1] = 0;
;;;412            DeviceStatus[2] = 0;
;;;413            DeviceStatus[3] = 0; /*bwPollTimeout=0ms*/
;;;414            DeviceStatus[4] = DeviceState;
;;;415            DeviceStatus[5] = 0; /*iString*/
;;;416            wBlockNum = 0;
;;;417            wlength = 0;
;;;418          }
;;;419          return USB_SUCCESS;
;;;420        }
;;;421      }
;;;422    
;;;423    
;;;424      return USB_UNSUPPORT;
000036  2002              MOVS     r0,#2
;;;425    
;;;426    } /* End of DFU_NoData_Setup */
000038  bd70              POP      {r4-r6,pc}
                  |L6.58|
00003a  2001              MOVS     r0,#1                 ;356
00003c  60b0              STR      r0,[r6,#8]            ;357  ; Manifest_State
00003e  2006              MOVS     r0,#6                 ;357
000040  7018              STRB     r0,[r3,#0]            ;357
000042  704a              STRB     r2,[r1,#1]            ;358
000044  708a              STRB     r2,[r1,#2]            ;359
000046  70ca              STRB     r2,[r1,#3]            ;360
000048  7108              STRB     r0,[r1,#4]            ;361
00004a  e02b              B        |L6.164|
                  |L6.76|
00004c  701c              STRB     r4,[r3,#0]            ;368
00004e  704a              STRB     r2,[r1,#1]            ;369
000050  708a              STRB     r2,[r1,#2]            ;370
000052  70ca              STRB     r2,[r1,#3]            ;371
000054  710c              STRB     r4,[r1,#4]            ;372
000056  e025              B        |L6.164|
                  |L6.88|
000058  2d0a              CMP      r5,#0xa               ;380
00005a  d009              BEQ      |L6.112|
00005c  200a              MOVS     r0,#0xa               ;392
00005e  7018              STRB     r0,[r3,#0]            ;392
000060  230e              MOVS     r3,#0xe               ;393
000062  700b              STRB     r3,[r1,#0]            ;393
000064  704a              STRB     r2,[r1,#1]            ;394
000066  708a              STRB     r2,[r1,#2]            ;395
000068  70ca              STRB     r2,[r1,#3]            ;396
00006a  7108              STRB     r0,[r1,#4]            ;397
                  |L6.108|
00006c  714a              STRB     r2,[r1,#5]            ;398
00006e  e019              B        |L6.164|
                  |L6.112|
000070  701c              STRB     r4,[r3,#0]            ;382
000072  700a              STRB     r2,[r1,#0]            ;383
000074  704a              STRB     r2,[r1,#1]            ;384
000076  708a              STRB     r2,[r1,#2]            ;385
000078  70ca              STRB     r2,[r1,#3]            ;386
00007a  710c              STRB     r4,[r1,#4]            ;387
00007c  e7f6              B        |L6.108|
                  |L6.126|
00007e  2d02              CMP      r5,#2                 ;405
000080  d007              BEQ      |L6.146|
000082  2d03              CMP      r5,#3                 ;405
000084  d005              BEQ      |L6.146|
000086  2d05              CMP      r5,#5                 ;406
000088  d003              BEQ      |L6.146|
00008a  2d06              CMP      r5,#6                 ;406
00008c  d001              BEQ      |L6.146|
00008e  2d09              CMP      r5,#9                 ;407
000090  d108              BNE      |L6.164|
                  |L6.146|
000092  701c              STRB     r4,[r3,#0]            ;409
000094  700a              STRB     r2,[r1,#0]            ;410
000096  704a              STRB     r2,[r1,#1]            ;411
000098  708a              STRB     r2,[r1,#2]            ;412
00009a  70ca              STRB     r2,[r1,#3]            ;413
00009c  710c              STRB     r4,[r1,#4]            ;414
00009e  714a              STRB     r2,[r1,#5]            ;415
0000a0  6032              STR      r2,[r6,#0]            ;417  ; wBlockNum
0000a2  6072              STR      r2,[r6,#4]            ;417  ; wlength
                  |L6.164|
0000a4  2000              MOVS     r0,#0                 ;419
0000a6  bd70              POP      {r4-r6,pc}
;;;427    
                          ENDP

                  |L6.168|
                          DCD      pInformation
                  |L6.172|
                          DCD      ||.data||
                  |L6.176|
                          DCD      DeviceStatus
                  |L6.180|
                          DCD      DeviceState

                          AREA ||i.DFU_Reset||, CODE, READONLY, ALIGN=2

                  DFU_Reset PROC
;;;157    *******************************************************************************/
;;;158    void DFU_Reset(void)
000000  b570              PUSH     {r4-r6,lr}
;;;159    {
;;;160      /* Set DFU_DEVICE as not configured */
;;;161      Device_Info.Current_Configuration = 0;
000002  4920              LDR      r1,|L7.132|
000004  2000              MOVS     r0,#0
;;;162    
;;;163      /* Current Feature initialization */
;;;164      pInformation->Current_Feature = DFU_ConfigDescriptor[7];
000006  4a21              LDR      r2,|L7.140|
000008  7288              STRB     r0,[r1,#0xa]          ;161
00000a  491f              LDR      r1,|L7.136|
00000c  6812              LDR      r2,[r2,#0]  ; pInformation
;;;165    
;;;166      _SetBTABLE(BTABLE_ADDRESS);
00000e  4c20              LDR      r4,|L7.144|
000010  79c9              LDRB     r1,[r1,#7]            ;164  ; DFU_ConfigDescriptor
000012  7251              STRB     r1,[r2,#9]            ;164
000014  6020              STR      r0,[r4,#0]
;;;167    
;;;168      /* Initialize Endpoint 0 */
;;;169      _SetEPType(ENDP0, EP_CONTROL);
000016  481e              LDR      r0,|L7.144|
000018  3850              SUBS     r0,r0,#0x50
00001a  6801              LDR      r1,[r0,#0]
00001c  f648128f          MOV      r2,#0x898f
000020  4011              ANDS     r1,r1,r2
000022  f4417100          ORR      r1,r1,#0x200
000026  6001              STR      r1,[r0,#0]
;;;170      _SetEPTxStatus(ENDP0, EP_TX_NAK);
000028  6801              LDR      r1,[r0,#0]
00002a  f64872bf          MOV      r2,#0x8fbf
00002e  4011              ANDS     r1,r1,r2
000030  f0810120          EOR      r1,r1,#0x20
000034  f2480280          MOV      r2,#0x8080
000038  4311              ORRS     r1,r1,r2
00003a  6001              STR      r1,[r0,#0]
;;;171      _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
00003c  6821              LDR      r1,[r4,#0]
00003e  2010              MOVS     r0,#0x10
000040  4d14              LDR      r5,|L7.148|
000042  0409              LSLS     r1,r1,#16
000044  eb0531d1          ADD      r1,r5,r1,LSR #15
;;;172      SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
000048  4e13              LDR      r6,|L7.152|
00004a  6088              STR      r0,[r1,#8]
00004c  2000              MOVS     r0,#0
00004e  f8161f2c          LDRB     r1,[r6,#0x2c]!  ; Device_Property
000052  f7fffffe          BL       SetEPRxCount
;;;173      _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
000056  6821              LDR      r1,[r4,#0]
000058  2050              MOVS     r0,#0x50
00005a  0409              LSLS     r1,r1,#16
00005c  eb0531d1          ADD      r1,r5,r1,LSR #15
;;;174      SetEPTxCount(ENDP0, Device_Property.MaxPacketSize);
000060  6008              STR      r0,[r1,#0]
000062  7831              LDRB     r1,[r6,#0]  ; Device_Property
000064  2000              MOVS     r0,#0
000066  f7fffffe          BL       SetEPTxCount
;;;175      Clear_Status_Out(ENDP0);
00006a  2000              MOVS     r0,#0
00006c  f7fffffe          BL       Clear_Status_Out
;;;176      SetEPRxValid(ENDP0);
000070  2000              MOVS     r0,#0
000072  f7fffffe          BL       SetEPRxValid
;;;177    
;;;178      /* Set this device to response on default address */
;;;179      SetDeviceAddress(0);
000076  2000              MOVS     r0,#0
000078  f7fffffe          BL       SetDeviceAddress
;;;180    
;;;181      /* Set the new control state of the device to Attached */
;;;182      bDeviceState = ATTACHED;
00007c  4907              LDR      r1,|L7.156|
00007e  2001              MOVS     r0,#1
000080  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;183    }
000082  bd70              POP      {r4-r6,pc}
;;;184    /*******************************************************************************
                          ENDP

                  |L7.132|
                          DCD      Device_Info
                  |L7.136|
                          DCD      DFU_ConfigDescriptor
                  |L7.140|
                          DCD      pInformation
                  |L7.144|
                          DCD      0x40005c50
                  |L7.148|
                          DCD      0x40006000
                  |L7.152|
                          DCD      ||.data||+0x20
                  |L7.156|
                          DCD      bDeviceState

                          AREA ||i.DFU_SetConfiguration||, CODE, READONLY, ALIGN=2

                  DFU_SetConfiguration PROC
;;;190    *******************************************************************************/
;;;191    void DFU_SetConfiguration(void)
000000  4803              LDR      r0,|L8.16|
;;;192    {
;;;193      DEVICE_INFO *pInfo = &Device_Info;
;;;194    
;;;195      if (pInfo->Current_Configuration != 0)
000002  7a80              LDRB     r0,[r0,#0xa]
000004  2800              CMP      r0,#0                 ;192
000006  d002              BEQ      |L8.14|
;;;196      {
;;;197        /* Device configured */
;;;198        bDeviceState = CONFIGURED;
000008  4902              LDR      r1,|L8.20|
00000a  2005              MOVS     r0,#5
00000c  6008              STR      r0,[r1,#0]  ; bDeviceState
                  |L8.14|
;;;199      }
;;;200    }
00000e  4770              BX       lr
;;;201    /*******************************************************************************
                          ENDP

                  |L8.16|
                          DCD      Device_Info
                  |L8.20|
                          DCD      bDeviceState

                          AREA ||i.DFU_SetDeviceAddress||, CODE, READONLY, ALIGN=2

                  DFU_SetDeviceAddress PROC
;;;207    *******************************************************************************/
;;;208    void DFU_SetDeviceAddress (void)
000000  4901              LDR      r1,|L9.8|
;;;209    {
;;;210      bDeviceState = ADDRESSED;
000002  2004              MOVS     r0,#4
000004  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;211    }
000006  4770              BX       lr
;;;212    /*******************************************************************************
                          ENDP

                  |L9.8|
                          DCD      bDeviceState

                          AREA ||i.DFU_Status_In||, CODE, READONLY, ALIGN=1

                  DFU_Status_In PROC
;;;218    *******************************************************************************/
;;;219    void DFU_Status_In(void)
000000  4770              BX       lr
;;;220    {}
;;;221    
                          ENDP


                          AREA ||i.DFU_Status_Out||, CODE, READONLY, ALIGN=2

                  DFU_Status_Out PROC
;;;228    *******************************************************************************/
;;;229    void DFU_Status_Out (void)
000000  b570              PUSH     {r4-r6,lr}
;;;230    {
;;;231      DEVICE_INFO *pInfo = &Device_Info;
000002  4821              LDR      r0,|L11.136|
;;;232      uint32_t Addr;
;;;233    
;;;234      if (pInfo->USBbRequest == DFU_GETSTATUS)
000004  7840              LDRB     r0,[r0,#1]
000006  2803              CMP      r0,#3
000008  d121              BNE      |L11.78|
;;;235      {
;;;236        if (DeviceState == STATE_dfuDNBUSY)
00000a  4d20              LDR      r5,|L11.140|
00000c  7828              LDRB     r0,[r5,#0]  ; DeviceState
00000e  2804              CMP      r0,#4
000010  d005              BEQ      |L11.30|
;;;237        {
;;;238          if (wBlockNum == 0)   /* Decode the Special Command*/
;;;239          {
;;;240            if ((MAL_Buffer[0] ==  CMD_GETCOMMANDS) && (wlength == 1))
;;;241            {}
;;;242            else if  (( MAL_Buffer[0] ==  CMD_SETADDRESSPOINTER ) && (wlength == 5))
;;;243            {
;;;244              Pointer  = MAL_Buffer[1];
;;;245              Pointer += MAL_Buffer[2] << 8;
;;;246              Pointer += MAL_Buffer[3] << 16;
;;;247              Pointer += MAL_Buffer[4] << 24;
;;;248            }
;;;249            else if (( MAL_Buffer[0] ==  CMD_ERASE ) && (wlength == 5))
;;;250            {
;;;251              Pointer  = MAL_Buffer[1];
;;;252              Pointer += MAL_Buffer[2] << 8;
;;;253              Pointer += MAL_Buffer[3] << 16;
;;;254              Pointer += MAL_Buffer[4] << 24;
;;;255              MAL_Erase(Pointer);
;;;256            }
;;;257          }
;;;258    
;;;259          else if (wBlockNum > 1)  // Download Command
;;;260          {
;;;261            Addr = ((wBlockNum - 2) * wTransferSize) + Pointer;
;;;262            MAL_Write(Addr, wlength);
;;;263          }
;;;264          wlength = 0;
;;;265          wBlockNum = 0;
;;;266    
;;;267          DeviceState =  STATE_dfuDNLOAD_SYNC;
;;;268          DeviceStatus[4] = DeviceState;
;;;269          DeviceStatus[1] = 0;
;;;270          DeviceStatus[2] = 0;
;;;271          DeviceStatus[3] = 0;
;;;272          return;
;;;273        }
;;;274        else if (DeviceState == STATE_dfuMANIFEST)/* Manifestation in progress*/
000012  2807              CMP      r0,#7
000014  d11b              BNE      |L11.78|
;;;275        {
;;;276          DFU_write_crc();
000016  e8bd4070          POP      {r4-r6,lr}
00001a  f7ffbffe          B.W      DFU_write_crc
                  |L11.30|
00001e  4c1c              LDR      r4,|L11.144|
000020  4621              MOV      r1,r4                 ;238
000022  6820              LDR      r0,[r4,#0]            ;240  ; wBlockNum
000024  6849              LDR      r1,[r1,#4]            ;240
000026  b198              CBZ      r0,|L11.80|
000028  2801              CMP      r0,#1                 ;259
00002a  d906              BLS      |L11.58|
00002c  0280              LSLS     r0,r0,#10             ;261
00002e  68e2              LDR      r2,[r4,#0xc]          ;261  ; Pointer
000030  f5a06000          SUB      r0,r0,#0x800          ;261
000034  4410              ADD      r0,r0,r2              ;261
000036  f7fffffe          BL       MAL_Write
                  |L11.58|
00003a  2000              MOVS     r0,#0                 ;264
00003c  6060              STR      r0,[r4,#4]            ;265  ; wlength
00003e  4915              LDR      r1,|L11.148|
000040  2203              MOVS     r2,#3                 ;267
000042  6020              STR      r0,[r4,#0]            ;267  ; wBlockNum
000044  702a              STRB     r2,[r5,#0]            ;267
000046  710a              STRB     r2,[r1,#4]            ;268
000048  7048              STRB     r0,[r1,#1]            ;269
00004a  7088              STRB     r0,[r1,#2]            ;270
00004c  70c8              STRB     r0,[r1,#3]            ;271
                  |L11.78|
;;;277          return;
;;;278        }
;;;279      }
;;;280      return;
;;;281    }
00004e  bd70              POP      {r4-r6,pc}
                  |L11.80|
000050  4811              LDR      r0,|L11.152|
000052  7802              LDRB     r2,[r0,#0]            ;240  ; MAL_Buffer
000054  2a00              CMP      r2,#0                 ;240
000056  d0f0              BEQ      |L11.58|
000058  7846              LDRB     r6,[r0,#1]            ;244
00005a  7883              LDRB     r3,[r0,#2]            ;245
00005c  2a21              CMP      r2,#0x21              ;242
00005e  eb062303          ADD      r3,r6,r3,LSL #8       ;245
000062  78c6              LDRB     r6,[r0,#3]            ;246
000064  7900              LDRB     r0,[r0,#4]            ;247
000066  eb034306          ADD      r3,r3,r6,LSL #16      ;246
00006a  eb036000          ADD      r0,r3,r0,LSL #24      ;247
00006e  d007              BEQ      |L11.128|
000070  2a41              CMP      r2,#0x41              ;249
000072  d1e2              BNE      |L11.58|
000074  2905              CMP      r1,#5                 ;249
000076  d1e0              BNE      |L11.58|
000078  60e0              STR      r0,[r4,#0xc]          ;255  ; Pointer
00007a  f7fffffe          BL       MAL_Erase
00007e  e7dc              B        |L11.58|
                  |L11.128|
000080  2905              CMP      r1,#5                 ;242
000082  d1da              BNE      |L11.58|
000084  60e0              STR      r0,[r4,#0xc]          ;247  ; Pointer
000086  e7d8              B        |L11.58|
;;;282    
                          ENDP

                  |L11.136|
                          DCD      Device_Info
                  |L11.140|
                          DCD      DeviceState
                  |L11.144|
                          DCD      ||.data||
                  |L11.148|
                          DCD      DeviceStatus
                  |L11.152|
                          DCD      MAL_Buffer

                          AREA ||i.DFU_init||, CODE, READONLY, ALIGN=2

                  DFU_init PROC
;;;129    *******************************************************************************/
;;;130    void DFU_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;131    {
;;;132      DEVICE_INFO *pInfo = &Device_Info;
000002  4d07              LDR      r5,|L12.32|
;;;133    
;;;134      /* Update the serial number string descriptor with the data from the unique ID*/
;;;135      Get_SerialNum();
000004  f7fffffe          BL       Get_SerialNum
;;;136    
;;;137      pInfo->Current_Configuration = 0;
000008  2400              MOVS     r4,#0
00000a  72ac              STRB     r4,[r5,#0xa]
;;;138    
;;;139      /* Connect the device */
;;;140      PowerOn();
00000c  f7fffffe          BL       PowerOn
;;;141    
;;;142      /* Perform basic device initialization operations */
;;;143      USB_SIL_Init();
000010  f7fffffe          BL       USB_SIL_Init
;;;144    
;;;145      /* Enable USB interrupts */
;;;146      USB_Interrupts_Config();
000014  f7fffffe          BL       USB_Interrupts_Config
;;;147    
;;;148      bDeviceState = UNCONNECTED;
000018  4802              LDR      r0,|L12.36|
00001a  6004              STR      r4,[r0,#0]  ; bDeviceState
;;;149    }
00001c  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP

00001e  0000              DCW      0x0000
                  |L12.32|
                          DCD      Device_Info
                  |L12.36|
                          DCD      bDeviceState

                          AREA ||i.DFU_write_crc||, CODE, READONLY, ALIGN=2

                  DFU_write_crc PROC
;;;717    *******************************************************************************/
;;;718    void DFU_write_crc(void)
000000  490c              LDR      r1,|L13.52|
;;;719    {
;;;720      Manifest_State = Manifest_complete;
000002  2000              MOVS     r0,#0
;;;721    
;;;722      if (Config_Descriptor.Descriptor[20] & 0x04)
;;;723      {
;;;724        DeviceState = STATE_dfuMANIFEST_SYNC;
000004  4a0c              LDR      r2,|L13.56|
000006  6088              STR      r0,[r1,#8]            ;722  ; Manifest_State
000008  3118              ADDS     r1,r1,#0x18           ;722
00000a  6809              LDR      r1,[r1,#0]            ;722  ; Config_Descriptor
00000c  7d09              LDRB     r1,[r1,#0x14]         ;722
00000e  074b              LSLS     r3,r1,#29             ;722
;;;725        DeviceStatus[4] = DeviceState;
000010  490a              LDR      r1,|L13.60|
000012  d506              BPL      |L13.34|
000014  2306              MOVS     r3,#6                 ;724
000016  7013              STRB     r3,[r2,#0]            ;724
000018  710b              STRB     r3,[r1,#4]
;;;726        DeviceStatus[1] = 0;
00001a  7048              STRB     r0,[r1,#1]
;;;727        DeviceStatus[2] = 0;
00001c  7088              STRB     r0,[r1,#2]
;;;728        DeviceStatus[3] = 0;
00001e  70c8              STRB     r0,[r1,#3]
;;;729        return;
;;;730      }
;;;731      else
;;;732      {
;;;733        DeviceState = STATE_dfuMANIFEST_WAIT_RESET;
;;;734        DeviceStatus[4] = DeviceState;
;;;735        DeviceStatus[1] = 0;
;;;736        DeviceStatus[2] = 0;
;;;737        DeviceStatus[3] = 0;
;;;738    
;;;739        Reset_Device();
;;;740    
;;;741        return;
;;;742      }
;;;743    }
000020  4770              BX       lr
                  |L13.34|
000022  2308              MOVS     r3,#8                 ;733
000024  7013              STRB     r3,[r2,#0]            ;733
000026  710b              STRB     r3,[r1,#4]            ;734
000028  7048              STRB     r0,[r1,#1]            ;735
00002a  7088              STRB     r0,[r1,#2]            ;736
00002c  70c8              STRB     r0,[r1,#3]            ;737
00002e  f7ffbffe          B.W      Reset_Device
;;;744    
                          ENDP

000032  0000              DCW      0x0000
                  |L13.52|
                          DCD      ||.data||
                  |L13.56|
                          DCD      DeviceState
                  |L13.60|
                          DCD      DeviceStatus

                          AREA ||i.DNLOAD||, CODE, READONLY, ALIGN=2

                  DNLOAD PROC
;;;590    *******************************************************************************/
;;;591    uint8_t *DNLOAD (uint16_t Length)
000000  490e              LDR      r1,|L14.60|
;;;592    {
000002  b510              PUSH     {r4,lr}
;;;593      DEVICE_INFO             *pInfo = &Device_Info;
;;;594      uint8_t         B1, B0;
;;;595      uint16_t          offset, returned;
;;;596    
;;;597      B0 = pInfo->USBwValues.bw.bb0;
000004  78cc              LDRB     r4,[r1,#3]
;;;598      B1 = pInfo->USBwValues.bw.bb1;
000006  788a              LDRB     r2,[r1,#2]
;;;599      wBlockNum = (uint16_t)B1;
000008  4b0d              LDR      r3,|L14.64|
;;;600      wBlockNum = wBlockNum * 0x100;
;;;601      wBlockNum += (uint16_t)B0;
00000a  eb042202          ADD      r2,r4,r2,LSL #8
;;;602      B0 = pInfo->USBwLengths.bw.bb0;
00000e  601a              STR      r2,[r3,#0]  ; wBlockNum
000010  79ca              LDRB     r2,[r1,#7]
;;;603      B1 =  pInfo->USBwLengths.bw.bb1;
000012  798c              LDRB     r4,[r1,#6]
;;;604      wlength = (uint16_t)B0;
;;;605      wlength = wlength * 0x100;
;;;606      wlength += (uint16_t)B1;
000014  eb042202          ADD      r2,r4,r2,LSL #8
;;;607    
;;;608      offset = pInfo->Ctrl_Info.Usb_wOffset;
000018  605a              STR      r2,[r3,#4]  ; wlength
;;;609    
;;;610      DeviceState = STATE_dfuDNLOAD_SYNC;
00001a  4c0a              LDR      r4,|L14.68|
00001c  8a49              LDRH     r1,[r1,#0x12]         ;608
00001e  2303              MOVS     r3,#3
000020  7023              STRB     r3,[r4,#0]
;;;611      DeviceStatus[4] = DeviceState;
000022  4c09              LDR      r4,|L14.72|
;;;612    
;;;613      returned = wlength - offset;
000024  1a52              SUBS     r2,r2,r1
000026  b292              UXTH     r2,r2
000028  7123              STRB     r3,[r4,#4]            ;611
00002a  b110              CBZ      r0,|L14.50|
;;;614    
;;;615      if (Length == 0)
;;;616      {
;;;617        pInformation->Ctrl_Info.Usb_wLength = returned ;
;;;618        return NULL;
;;;619      }
;;;620    
;;;621      return((uint8_t*)MAL_Buffer + offset);
00002c  4807              LDR      r0,|L14.76|
00002e  4408              ADD      r0,r0,r1
;;;622    }
000030  bd10              POP      {r4,pc}
                  |L14.50|
000032  4807              LDR      r0,|L14.80|
000034  6800              LDR      r0,[r0,#0]            ;617  ; pInformation
000036  8202              STRH     r2,[r0,#0x10]         ;617
000038  2000              MOVS     r0,#0                 ;618
00003a  bd10              POP      {r4,pc}
;;;623    
                          ENDP

                  |L14.60|
                          DCD      Device_Info
                  |L14.64|
                          DCD      ||.data||
                  |L14.68|
                          DCD      DeviceState
                  |L14.72|
                          DCD      DeviceStatus
                  |L14.76|
                          DCD      MAL_Buffer
                  |L14.80|
                          DCD      pInformation

                          AREA ||i.GETSTATE||, CODE, READONLY, ALIGN=2

                  GETSTATE PROC
;;;630    *******************************************************************************/
;;;631    uint8_t *GETSTATE(uint16_t Length)
000000  b108              CBZ      r0,|L15.6|
;;;632    {
;;;633      if (Length == 0)
;;;634      {
;;;635        pInformation->Ctrl_Info.Usb_wLength = 1 ;
;;;636        return NULL;
;;;637      }
;;;638      else
;;;639        return(&DeviceState);
000002  4804              LDR      r0,|L15.20|
;;;640    }
000004  4770              BX       lr
                  |L15.6|
000006  4904              LDR      r1,|L15.24|
000008  2001              MOVS     r0,#1                 ;635
00000a  6809              LDR      r1,[r1,#0]            ;635  ; pInformation
00000c  8208              STRH     r0,[r1,#0x10]         ;635
00000e  2000              MOVS     r0,#0                 ;636
000010  4770              BX       lr
;;;641    
                          ENDP

000012  0000              DCW      0x0000
                  |L15.20|
                          DCD      DeviceState
                  |L15.24|
                          DCD      pInformation

                          AREA ||i.GETSTATUS||, CODE, READONLY, ALIGN=2

                  GETSTATUS PROC
;;;648    *******************************************************************************/
;;;649    uint8_t *GETSTATUS(uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;650    {
000002  4604              MOV      r4,r0
;;;651      switch (DeviceState)
000004  4820              LDR      r0,|L16.136|
000006  2200              MOVS     r2,#0
;;;652      {
;;;653        case   STATE_dfuDNLOAD_SYNC:
;;;654          if (wlength != 0)
;;;655          {
;;;656            DeviceState = STATE_dfuDNBUSY;
;;;657            DeviceStatus[4] = DeviceState;
000008  4920              LDR      r1,|L16.140|
00000a  7805              LDRB     r5,[r0,#0]            ;651  ; DeviceState
00000c  4b20              LDR      r3,|L16.144|
00000e  2d03              CMP      r5,#3                 ;651
000010  d002              BEQ      |L16.24|
000012  2d06              CMP      r5,#6                 ;651
000014  d12f              BNE      |L16.118|
000016  e017              B        |L16.72|
                  |L16.24|
000018  685d              LDR      r5,[r3,#4]            ;654  ; wlength
00001a  b19d              CBZ      r5,|L16.68|
00001c  2204              MOVS     r2,#4                 ;656
00001e  7002              STRB     r2,[r0,#0]            ;656
000020  481b              LDR      r0,|L16.144|
000022  710a              STRB     r2,[r1,#4]
;;;658            if ((wBlockNum == 0) && (MAL_Buffer[0] == CMD_ERASE))
;;;659            {
;;;660              MAL_GetStatus(Pointer, 0, DeviceStatus);
000024  6819              LDR      r1,[r3,#0]  ; wBlockNum
000026  68c0              LDR      r0,[r0,#0xc]
000028  b919              CBNZ     r1,|L16.50|
00002a  491a              LDR      r1,|L16.148|
00002c  7809              LDRB     r1,[r1,#0]            ;658  ; MAL_Buffer
00002e  2941              CMP      r1,#0x41              ;658
000030  d005              BEQ      |L16.62|
                  |L16.50|
;;;661            }
;;;662            else
;;;663            {
;;;664              MAL_GetStatus(Pointer, 1, DeviceStatus);
000032  4a16              LDR      r2,|L16.140|
000034  f05f0101          MOVS.W   r1,#1
                  |L16.56|
000038  f7fffffe          BL       MAL_GetStatus
00003c  e01b              B        |L16.118|
                  |L16.62|
00003e  4a13              LDR      r2,|L16.140|
000040  2100              MOVS     r1,#0                 ;660
000042  e7f9              B        |L16.56|
                  |L16.68|
;;;665            }
;;;666          }
;;;667          else  /* (wlength==0)*/
;;;668          {
;;;669            DeviceState = STATE_dfuDNLOAD_IDLE;
000044  2305              MOVS     r3,#5
;;;670            DeviceStatus[4] = DeviceState;
;;;671            DeviceStatus[1] = 0;
;;;672            DeviceStatus[2] = 0;
;;;673            DeviceStatus[3] = 0;
000046  e011              B        |L16.108|
                  |L16.72|
;;;674    
;;;675          }
;;;676          break;
;;;677        case   STATE_dfuMANIFEST_SYNC :
;;;678          if (Manifest_State == Manifest_In_Progress)
000048  689b              LDR      r3,[r3,#8]  ; Manifest_State
00004a  2b01              CMP      r3,#1
00004c  d001              BEQ      |L16.82|
;;;679          {
;;;680            DeviceState = STATE_dfuMANIFEST;
;;;681            DeviceStatus[4] = DeviceState;
;;;682            DeviceStatus[1] = 1;             /*bwPollTimeout = 1ms*/
;;;683            DeviceStatus[2] = 0;
;;;684            DeviceStatus[3] = 0;
;;;685            //break;
;;;686          }
;;;687          else if (Manifest_State == Manifest_complete && Config_Descriptor.Descriptor[20]
00004e  b133              CBZ      r3,|L16.94|
000050  e011              B        |L16.118|
                  |L16.82|
000052  2307              MOVS     r3,#7                 ;680
000054  7003              STRB     r3,[r0,#0]            ;680
000056  710b              STRB     r3,[r1,#4]            ;681
000058  2001              MOVS     r0,#1                 ;682
00005a  7048              STRB     r0,[r1,#1]            ;682
00005c  e009              B        |L16.114|
                  |L16.94|
00005e  4b0c              LDR      r3,|L16.144|
000060  3318              ADDS     r3,r3,#0x18
000062  681b              LDR      r3,[r3,#0]  ; Config_Descriptor
000064  7d1b              LDRB     r3,[r3,#0x14]
000066  075b              LSLS     r3,r3,#29
000068  d505              BPL      |L16.118|
;;;688                   & 0x04)
;;;689          {
;;;690            DeviceState = STATE_dfuIDLE;
00006a  2302              MOVS     r3,#2
                  |L16.108|
00006c  7003              STRB     r3,[r0,#0]            ;669
00006e  710b              STRB     r3,[r1,#4]            ;670
000070  704a              STRB     r2,[r1,#1]            ;671
                  |L16.114|
;;;691            DeviceStatus[4] = DeviceState;
;;;692            DeviceStatus[1] = 0;
;;;693            DeviceStatus[2] = 0;
000072  708a              STRB     r2,[r1,#2]
;;;694            DeviceStatus[3] = 0;
000074  70ca              STRB     r2,[r1,#3]
                  |L16.118|
;;;695            //break;
;;;696          }
;;;697          break;
;;;698        default :
;;;699          break;
;;;700      }
;;;701    
;;;702      if (Length == 0)
000076  b10c              CBZ      r4,|L16.124|
;;;703      {
;;;704        pInformation->Ctrl_Info.Usb_wLength = 6 ;
;;;705        return NULL;
;;;706      }
;;;707      else
;;;708        return(&(DeviceStatus[0]));
000078  4804              LDR      r0,|L16.140|
;;;709    }
00007a  bd70              POP      {r4-r6,pc}
                  |L16.124|
00007c  4906              LDR      r1,|L16.152|
00007e  2006              MOVS     r0,#6                 ;704
000080  6809              LDR      r1,[r1,#0]            ;704  ; pInformation
000082  8208              STRH     r0,[r1,#0x10]         ;704
000084  2000              MOVS     r0,#0                 ;705
000086  bd70              POP      {r4-r6,pc}
;;;710    
                          ENDP

                  |L16.136|
                          DCD      DeviceState
                  |L16.140|
                          DCD      DeviceStatus
                  |L16.144|
                          DCD      ||.data||
                  |L16.148|
                          DCD      MAL_Buffer
                  |L16.152|
                          DCD      pInformation

                          AREA ||i.UPLOAD||, CODE, READONLY, ALIGN=2

                  UPLOAD PROC
;;;502    *******************************************************************************/
;;;503    uint8_t *UPLOAD(uint16_t Length)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;504    {
000004  4606              MOV      r6,r0
;;;505      DEVICE_INFO *pInfo = &Device_Info;
000006  482a              LDR      r0,|L17.176|
;;;506      uint8_t B1, B0;
;;;507      uint16_t offset, returned;
;;;508      uint8_t *Phy_Addr = NULL;
;;;509      uint32_t Addr = 0;
;;;510    
;;;511      B0 = pInfo->USBwValues.bw.bb0;
;;;512      B1 = pInfo->USBwValues.bw.bb1;
;;;513      wBlockNum = (uint16_t)B1;
000008  4c2a              LDR      r4,|L17.180|
;;;514      wBlockNum = wBlockNum * 0x100;
;;;515      wBlockNum += (uint16_t)B0; /* wBlockNum value updated*/
;;;516    
;;;517      B0 = pInfo->USBwLengths.bw.bb0;
;;;518      B1 =  pInfo->USBwLengths.bw.bb1;
;;;519      wlength = (uint16_t)B0;
;;;520      wlength = wlength * 0x100;
;;;521      wlength += (uint16_t)B1; /* wlength value updated*/
;;;522    
;;;523      offset = pInformation->Ctrl_Info.Usb_wOffset;
00000a  f8df90ac          LDR      r9,|L17.184|
00000e  78c2              LDRB     r2,[r0,#3]            ;511
000010  7881              LDRB     r1,[r0,#2]            ;512
;;;524    
;;;525      if (wBlockNum == 0)  /* Get Command */
;;;526      {
;;;527        if (wlength > 3)
;;;528        {
;;;529          DeviceState = STATE_dfuIDLE ;
000012  4b2b              LDR      r3,|L17.192|
000014  eb122701          ADDS     r7,r2,r1,LSL #8       ;515
000018  6027              STR      r7,[r4,#0]            ;517  ; wBlockNum
00001a  79c1              LDRB     r1,[r0,#7]            ;517
00001c  7980              LDRB     r0,[r0,#6]            ;518
;;;530        }
;;;531        else
;;;532        {
;;;533          DeviceState = STATE_dfuUPLOAD_IDLE;
;;;534        }
;;;535    
;;;536        DeviceStatus[4] = DeviceState;
00001e  4a27              LDR      r2,|L17.188|
000020  eb002101          ADD      r1,r0,r1,LSL #8       ;521
000024  6061              STR      r1,[r4,#4]            ;523  ; wlength
000026  f8d98000          LDR      r8,[r9,#0]            ;523  ; pInformation
00002a  f04f0c09          MOV      r12,#9                ;533
00002e  f04f0000          MOV      r0,#0                 ;533
000032  f8b85012          LDRH     r5,[r8,#0x12]         ;523
000036  d016              BEQ      |L17.102|
;;;537        DeviceStatus[1] = 0;
;;;538        DeviceStatus[2] = 0;
;;;539        DeviceStatus[3] = 0;
;;;540    
;;;541        MAL_Buffer[0] = CMD_GETCOMMANDS;
;;;542        MAL_Buffer[1] = CMD_SETADDRESSPOINTER;
;;;543        MAL_Buffer[2] = CMD_ERASE;
;;;544    
;;;545        if (Length == 0)
;;;546        {
;;;547          pInformation->Ctrl_Info.Usb_wLength = 3 ;
;;;548          return NULL;
;;;549        }
;;;550    
;;;551        return(&MAL_Buffer[0]);
;;;552      }
;;;553      else if (wBlockNum > 1)
000038  2f01              CMP      r7,#1
00003a  d932              BLS      |L17.162|
;;;554      {
;;;555        DeviceState = STATE_dfuUPLOAD_IDLE ;
00003c  f883c000          STRB     r12,[r3,#0]
;;;556        DeviceStatus[4] = DeviceState;
000040  f882c004          STRB     r12,[r2,#4]
;;;557        DeviceStatus[1] = 0;
000044  7050              STRB     r0,[r2,#1]
;;;558        DeviceStatus[2] = 0;
000046  7090              STRB     r0,[r2,#2]
;;;559        DeviceStatus[3] = 0;
000048  70d0              STRB     r0,[r2,#3]
;;;560        Addr = ((wBlockNum - 2) * wTransferSize) + Pointer;  /* Change is Accelerated*/
00004a  02b8              LSLS     r0,r7,#10
00004c  68e2              LDR      r2,[r4,#0xc]  ; Pointer
00004e  f5a06000          SUB      r0,r0,#0x800
000052  4410              ADD      r0,r0,r2
;;;561    
;;;562        Phy_Addr = MAL_Read(Addr, wlength);
000054  f7fffffe          BL       MAL_Read
;;;563        returned = wlength - offset;
000058  88a1              LDRH     r1,[r4,#4]  ; wlength
00005a  1b49              SUBS     r1,r1,r5
00005c  b289              UXTH     r1,r1
;;;564    
;;;565        if (Length == 0)
00005e  b1de              CBZ      r6,|L17.152|
;;;566        {
;;;567          pInformation->Ctrl_Info.Usb_wLength = returned ;
;;;568          return NULL;
;;;569        }
;;;570        return(Phy_Addr + offset);
000060  4428              ADD      r0,r0,r5
                  |L17.98|
;;;571      }
;;;572      else  /* unsupported wBlockNum */
;;;573      {
;;;574        DeviceState = STATUS_ERRSTALLEDPKT;
;;;575        DeviceStatus[4] = DeviceState;
;;;576        DeviceStatus[1] = 0;
;;;577        DeviceStatus[2] = 0;
;;;578        DeviceStatus[3] = 0;
;;;579    
;;;580        return NULL;
;;;581      }
;;;582    }
000062  e8bd87f0          POP      {r4-r10,pc}
                  |L17.102|
000066  2903              CMP      r1,#3                 ;527
000068  d902              BLS      |L17.112|
00006a  2102              MOVS     r1,#2                 ;529
00006c  7019              STRB     r1,[r3,#0]            ;529
00006e  e001              B        |L17.116|
                  |L17.112|
000070  f883c000          STRB     r12,[r3,#0]           ;533
                  |L17.116|
000074  7819              LDRB     r1,[r3,#0]            ;536  ; DeviceState
000076  7111              STRB     r1,[r2,#4]            ;536
000078  7050              STRB     r0,[r2,#1]            ;537
00007a  4912              LDR      r1,|L17.196|
00007c  7090              STRB     r0,[r2,#2]            ;538
00007e  70d0              STRB     r0,[r2,#3]            ;539
000080  7008              STRB     r0,[r1,#0]            ;541
000082  2021              MOVS     r0,#0x21              ;542
000084  7048              STRB     r0,[r1,#1]            ;542
000086  2041              MOVS     r0,#0x41              ;543
000088  7088              STRB     r0,[r1,#2]            ;543
00008a  b10e              CBZ      r6,|L17.144|
00008c  4608              MOV      r0,r1                 ;551
00008e  e7e8              B        |L17.98|
                  |L17.144|
000090  2003              MOVS     r0,#3                 ;547
000092  f8a80010          STRH     r0,[r8,#0x10]         ;547
000096  e002              B        |L17.158|
                  |L17.152|
000098  f8d90000          LDR      r0,[r9,#0]            ;567  ; pInformation
00009c  8201              STRH     r1,[r0,#0x10]         ;567
                  |L17.158|
00009e  2000              MOVS     r0,#0                 ;580
0000a0  e7df              B        |L17.98|
                  |L17.162|
0000a2  210f              MOVS     r1,#0xf               ;574
0000a4  7019              STRB     r1,[r3,#0]            ;574
0000a6  7111              STRB     r1,[r2,#4]            ;575
0000a8  7050              STRB     r0,[r2,#1]            ;576
0000aa  7090              STRB     r0,[r2,#2]            ;577
0000ac  70d0              STRB     r0,[r2,#3]            ;578
0000ae  e7f6              B        |L17.158|
;;;583    
                          ENDP

                  |L17.176|
                          DCD      Device_Info
                  |L17.180|
                          DCD      ||.data||
                  |L17.184|
                          DCD      pInformation
                  |L17.188|
                          DCD      DeviceStatus
                  |L17.192|
                          DCD      DeviceState
                  |L17.196|
                          DCD      MAL_Buffer

                          AREA ||.data||, DATA, ALIGN=2

                  wBlockNum
                          DCD      0x00000000
                  wlength
                          DCD      0x00000000
                  Manifest_State
                          DCD      0x00000000
                  Pointer
                          DCD      0x08003000
                  Device_Descriptor
                          DCD      DFU_DeviceDescriptor
000014  0012              DCW      0x0012
000016  0000              DCB      0x00,0x00
                  Config_Descriptor
                          DCD      DFU_ConfigDescriptor
00001c  001b              DCW      0x001b
00001e  0000              DCB      0x00,0x00
                  Device_Property
                          DCD      DFU_init
                          DCD      DFU_Reset
                          DCD      DFU_Status_In
                          DCD      DFU_Status_Out
                          DCD      DFU_Data_Setup
                          DCD      DFU_NoData_Setup
                          DCD      DFU_Get_Interface_Setting
                          DCD      DFU_GetDeviceDescriptor
                          DCD      DFU_GetConfigDescriptor
                          DCD      DFU_GetStringDescriptor
                          DCD      0x00000000
00004c  40000000          DCB      0x40,0x00,0x00,0x00
                  DFU_String_Descriptor
                          DCD      DFU_StringLangId
000054  0004              DCW      0x0004
000056  0000              DCB      0x00,0x00
                          DCD      DFU_StringVendor
00005c  0026              DCW      0x0026
00005e  0000              DCB      0x00,0x00
                          DCD      DFU_StringProduct
000064  0014              DCW      0x0014
000066  0000              DCB      0x00,0x00
                          DCD      DFU_StringSerial
00006c  001a              DCW      0x001a
00006e  0000              DCB      0x00,0x00
                          DCD      DFU_StringInterface0
000074  0062              DCW      0x0062
000076  0000              DCB      0x00,0x00

                          AREA ||area_number.21||, DATA, ALIGN=0

                          EXPORTAS ||area_number.21||, ||.data||
                  Device_Table
000000  0101              DCB      0x01,0x01

                          AREA ||area_number.22||, DATA, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.data||
                  User_Standard_Requests
                          DCD      NOP_Process
                          DCD      DFU_SetConfiguration
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      DFU_SetDeviceAddress

;*** Start embedded assembler ***

#line 1 "..\\src\\usb_prop.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_prop_c_853da93f____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_usb_prop_c_853da93f____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_prop_c_853da93f____REVSH|
#line 144
|__asm___10_usb_prop_c_853da93f____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
