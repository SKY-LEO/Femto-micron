; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\stm32l152_eval.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\stm32l152_eval.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL --omf_browse=.\stm32l152-eval\stm32l152_eval.crf ..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL\stm32l152_eval.c]
                          THUMB

                          AREA ||i.LM75_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  LM75_LowLevel_DeInit PROC
;;;486      */
;;;487    void LM75_LowLevel_DeInit(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;488    { 
;;;489      GPIO_InitTypeDef  GPIO_InitStructure;
;;;490    
;;;491      /*!< Disable LM75_I2C */
;;;492      I2C_Cmd(LM75_I2C, DISABLE);
000002  4c13              LDR      r4,|L1.80|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       I2C_Cmd
;;;493      
;;;494      /*!< DeInitializes the LM75_I2C */
;;;495      I2C_DeInit(LM75_I2C);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       I2C_DeInit
;;;496      
;;;497      /*!< LM75_I2C Periph clock disable */
;;;498      RCC_APB1PeriphClockCmd(LM75_I2C_CLK, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f1000          MOV      r0,#0x200000
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;499        
;;;500      /*!< Configure LM75_I2C pins: SCL */
;;;501      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SCL_PIN;
00001c  2040              MOVS     r0,#0x40
;;;502      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00001e  9000              STR      r0,[sp,#0]
000020  2000              MOVS     r0,#0
000022  f88d0004          STRB     r0,[sp,#4]
;;;503      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;504      GPIO_Init(LM75_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
000026  4c0b              LDR      r4,|L1.84|
000028  f88d0007          STRB     r0,[sp,#7]            ;503
00002c  4669              MOV      r1,sp
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       GPIO_Init
;;;505    
;;;506      /*!< Configure LM75_I2C pins: SDA */
;;;507      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SDA_PIN;
000034  2080              MOVS     r0,#0x80
;;;508      GPIO_Init(LM75_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000036  9000              STR      r0,[sp,#0]
000038  4669              MOV      r1,sp
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       GPIO_Init
;;;509    
;;;510      /*!< Configure LM75_I2C pin: SMBUS ALERT */
;;;511      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SMBUSALERT_PIN;
000040  2020              MOVS     r0,#0x20
;;;512      GPIO_Init(LM75_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure);
000042  9000              STR      r0,[sp,#0]
000044  4669              MOV      r1,sp
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       GPIO_Init
;;;513    }
00004c  bd1c              POP      {r2-r4,pc}
;;;514    
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      0x40005400
                  |L1.84|
                          DCD      0x40020400

                          AREA ||i.LM75_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  LM75_LowLevel_Init PROC
;;;519      */
;;;520    void LM75_LowLevel_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;521    { 
;;;522      GPIO_InitTypeDef  GPIO_InitStructure;
;;;523    
;;;524      /*!< LM75_I2C Periph clock enable */
;;;525      RCC_APB1PeriphClockCmd(LM75_I2C_CLK, ENABLE);
000002  2101              MOVS     r1,#1
000004  0548              LSLS     r0,r1,#21
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;526        
;;;527      /*!< LM75_I2C_SCL_GPIO_CLK, LM75_I2C_SDA_GPIO_CLK 
;;;528           and LM75_I2C_SMBUSALERT_GPIO_CLK Periph clock enable */
;;;529      RCC_AHBPeriphClockCmd(LM75_I2C_SCL_GPIO_CLK | LM75_I2C_SDA_GPIO_CLK |
00000a  2101              MOVS     r1,#1
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;530                            LM75_I2C_SMBUSALERT_GPIO_CLK, ENABLE);
;;;531    
;;;532      /* Connect PXx to I2C_SCL */
;;;533      GPIO_PinAFConfig(LM75_I2C_SCL_GPIO_PORT, LM75_I2C_SCL_SOURCE, LM75_I2C_SCL_AF);
000012  4c17              LDR      r4,|L2.112|
000014  2204              MOVS     r2,#4
000016  2106              MOVS     r1,#6
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       GPIO_PinAFConfig
;;;534    
;;;535      /* Connect PXx to I2C_SDA */
;;;536      GPIO_PinAFConfig(LM75_I2C_SDA_GPIO_PORT, LM75_I2C_SDA_SOURCE, LM75_I2C_SDA_AF); 
00001e  2204              MOVS     r2,#4
000020  2107              MOVS     r1,#7
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       GPIO_PinAFConfig
;;;537    
;;;538      /* Connect PXx to I2C_SMBUSALER */
;;;539      GPIO_PinAFConfig(LM75_I2C_SMBUSALERT_GPIO_PORT, LM75_I2C_SMBUSALERT_SOURCE, LM75_I2C_SMBUSALERT_AF);   
000028  2204              MOVS     r2,#4
00002a  2105              MOVS     r1,#5
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       GPIO_PinAFConfig
;;;540       
;;;541      /*!< Configure LM75_I2C pins: SCL */
;;;542      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SCL_PIN;
000032  2040              MOVS     r0,#0x40
;;;543      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000034  9000              STR      r0,[sp,#0]
000036  2002              MOVS     r0,#2
000038  f88d0004          STRB     r0,[sp,#4]
;;;544      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
00003c  2003              MOVS     r0,#3
00003e  f88d0005          STRB     r0,[sp,#5]
;;;545      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
000042  2001              MOVS     r0,#1
000044  f88d0006          STRB     r0,[sp,#6]
;;;546      GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
000048  2000              MOVS     r0,#0
00004a  f88d0007          STRB     r0,[sp,#7]
;;;547      GPIO_Init(LM75_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
00004e  4669              MOV      r1,sp
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       GPIO_Init
;;;548    
;;;549      /*!< Configure LM75_I2C pins: SDA */
;;;550      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SDA_PIN;
000056  2080              MOVS     r0,#0x80
;;;551      GPIO_Init(LM75_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000058  9000              STR      r0,[sp,#0]
00005a  4669              MOV      r1,sp
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       GPIO_Init
;;;552    
;;;553      /*!< Configure LM75_I2C pin: SMBUS ALERT */
;;;554      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SMBUSALERT_PIN;
000062  2020              MOVS     r0,#0x20
;;;555      GPIO_Init(LM75_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure);
000064  9000              STR      r0,[sp,#0]
000066  4669              MOV      r1,sp
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       GPIO_Init
;;;556    }
00006e  bd1c              POP      {r2-r4,pc}
;;;557    
                          ENDP

                  |L2.112|
                          DCD      0x40020400

                          AREA ||i.SD_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DeInit PROC
;;;374      */
;;;375    void SD_LowLevel_DeInit(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;376    {
;;;377      GPIO_InitTypeDef  GPIO_InitStructure;
;;;378      
;;;379      SPI_Cmd(SD_SPI, DISABLE); /*!< SD_SPI disable */
000002  4c18              LDR      r4,|L3.100|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SPI_Cmd
;;;380      SPI_DeInit(SD_SPI);   /*!< DeInitializes the SD_SPI */
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SPI_I2S_DeInit
;;;381      
;;;382      /*!< SD_SPI Periph clock disable */
;;;383      RCC_APB1PeriphClockCmd(SD_SPI_CLK, DISABLE); 
000012  1424              ASRS     r4,r4,#16
000014  2100              MOVS     r1,#0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;384    
;;;385      /*!< Configure SD_SPI pins: SCK */
;;;386      GPIO_InitStructure.GPIO_Pin = SD_SPI_SCK_PIN;
00001c  1060              ASRS     r0,r4,#1
;;;387      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00001e  9000              STR      r0,[sp,#0]
000020  2000              MOVS     r0,#0
000022  f88d0004          STRB     r0,[sp,#4]
;;;388      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;389      GPIO_Init(SD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
000026  4d10              LDR      r5,|L3.104|
000028  f88d0007          STRB     r0,[sp,#7]            ;388
00002c  4669              MOV      r1,sp
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       GPIO_Init
;;;390    
;;;391      /*!< Configure SD_SPI pins: MISO */
;;;392      GPIO_InitStructure.GPIO_Pin = SD_SPI_MISO_PIN;
;;;393      GPIO_Init(SD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000034  4669              MOV      r1,sp
000036  4628              MOV      r0,r5
000038  9400              STR      r4,[sp,#0]
00003a  f7fffffe          BL       GPIO_Init
;;;394    
;;;395      /*!< Configure SD_SPI pins: MOSI */
;;;396      GPIO_InitStructure.GPIO_Pin = SD_SPI_MOSI_PIN;
00003e  0060              LSLS     r0,r4,#1
;;;397      GPIO_Init(SD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
000040  9000              STR      r0,[sp,#0]
000042  4669              MOV      r1,sp
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       GPIO_Init
;;;398    
;;;399      /*!< Configure SD_SPI_CS_PIN pin: SD Card CS pin */
;;;400      GPIO_InitStructure.GPIO_Pin = SD_CS_PIN;
00004a  2080              MOVS     r0,#0x80
;;;401      GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStructure);
00004c  9000              STR      r0,[sp,#0]
00004e  4669              MOV      r1,sp
000050  4806              LDR      r0,|L3.108|
000052  f7fffffe          BL       GPIO_Init
;;;402    
;;;403      /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
;;;404      GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
000056  2040              MOVS     r0,#0x40
;;;405      GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
000058  9000              STR      r0,[sp,#0]
00005a  4669              MOV      r1,sp
00005c  4804              LDR      r0,|L3.112|
00005e  f7fffffe          BL       GPIO_Init
;;;406    }
000062  bd7c              POP      {r2-r6,pc}
;;;407    
                          ENDP

                  |L3.100|
                          DCD      0x40003800
                  |L3.104|
                          DCD      0x40020400
                  |L3.108|
                          DCD      0x40020c00
                  |L3.112|
                          DCD      0x40021000

                          AREA ||i.SD_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_Init PROC
;;;413      */
;;;414    void SD_LowLevel_Init(void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;415    {
000004  b087              SUB      sp,sp,#0x1c
;;;416      GPIO_InitTypeDef  GPIO_InitStructure;
;;;417      SPI_InitTypeDef   SPI_InitStructure;
;;;418    
;;;419      /*!< SD_SPI_CS_GPIO, SD_SPI_MOSI_GPIO, SD_SPI_MISO_GPIO, SD_SPI_DETECT_GPIO 
;;;420           and SD_SPI_SCK_GPIO Periph clock enable */
;;;421      RCC_AHBPeriphClockCmd(SD_CS_GPIO_CLK | SD_SPI_MOSI_GPIO_CLK | SD_SPI_MISO_GPIO_CLK |
000006  2101              MOVS     r1,#1
000008  201a              MOVS     r0,#0x1a
00000a  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;422                            SD_SPI_SCK_GPIO_CLK | SD_DETECT_GPIO_CLK, ENABLE);
;;;423    
;;;424      /*!< SD_SPI Periph clock enable */
;;;425      RCC_APB1PeriphClockCmd(SD_SPI_CLK, ENABLE); 
00000e  f44f4880          MOV      r8,#0x4000
000012  2101              MOVS     r1,#1
000014  4640              MOV      r0,r8
000016  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;426    
;;;427      /*!< Configure SD_SPI pins: SCK */
;;;428      GPIO_InitStructure.GPIO_Pin = SD_SPI_SCK_PIN;
;;;429      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00001a  2602              MOVS     r6,#2
00001c  f88d6004          STRB     r6,[sp,#4]
;;;430      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
000020  2703              MOVS     r7,#3
000022  f44f5000          MOV      r0,#0x2000            ;428
000026  f88d7005          STRB     r7,[sp,#5]
;;;431      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
;;;432      GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
;;;433      GPIO_Init(SD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
00002c  f8df90c0          LDR      r9,|L4.240|
000030  9000              STR      r0,[sp,#0]            ;429
000032  f88d4006          STRB     r4,[sp,#6]            ;431
000036  2501              MOVS     r5,#1                 ;432
000038  f88d5007          STRB     r5,[sp,#7]            ;432
00003c  4669              MOV      r1,sp
00003e  4648              MOV      r0,r9
000040  f7fffffe          BL       GPIO_Init
;;;434    
;;;435      /*!< Configure SD_SPI pins: MISO */
;;;436      GPIO_InitStructure.GPIO_Pin = SD_SPI_MISO_PIN;
;;;437      GPIO_Init(SD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000044  4669              MOV      r1,sp
000046  4648              MOV      r0,r9
000048  f8cd8000          STR      r8,[sp,#0]
00004c  f7fffffe          BL       GPIO_Init
;;;438    
;;;439      /*!< Configure SD_SPI pins: MOSI */
;;;440      GPIO_InitStructure.GPIO_Pin = SD_SPI_MOSI_PIN;
000050  03e8              LSLS     r0,r5,#15
;;;441      GPIO_Init(SD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
000052  9000              STR      r0,[sp,#0]
000054  4669              MOV      r1,sp
000056  4648              MOV      r0,r9
000058  f7fffffe          BL       GPIO_Init
;;;442    
;;;443      /*!< Configure SD_SPI_CS_PIN pin: SD Card CS pin */
;;;444      GPIO_InitStructure.GPIO_Pin = SD_CS_PIN;
;;;445      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
00005c  f88d5004          STRB     r5,[sp,#4]
000060  2080              MOVS     r0,#0x80              ;444
;;;446      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000062  f88d4006          STRB     r4,[sp,#6]
000066  9000              STR      r0,[sp,#0]            ;445
;;;447      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000068  f88d5007          STRB     r5,[sp,#7]
;;;448      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
00006c  f88d7005          STRB     r7,[sp,#5]
;;;449      GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStructure);
000070  4669              MOV      r1,sp
000072  4820              LDR      r0,|L4.244|
000074  f7fffffe          BL       GPIO_Init
;;;450    
;;;451      /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
;;;452      GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
000078  2040              MOVS     r0,#0x40
;;;453      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00007a  9000              STR      r0,[sp,#0]
00007c  f88d4004          STRB     r4,[sp,#4]
;;;454      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000080  f88d5007          STRB     r5,[sp,#7]
;;;455      GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
000084  4669              MOV      r1,sp
000086  481c              LDR      r0,|L4.248|
000088  f7fffffe          BL       GPIO_Init
;;;456    
;;;457      /* Connect PXx to SD_SPI_SCK */
;;;458      GPIO_PinAFConfig(SD_SPI_SCK_GPIO_PORT, SD_SPI_SCK_SOURCE, SD_SPI_SCK_AF);
00008c  2205              MOVS     r2,#5
00008e  210d              MOVS     r1,#0xd
000090  4648              MOV      r0,r9
000092  f7fffffe          BL       GPIO_PinAFConfig
;;;459    
;;;460      /* Connect PXx to SD_SPI_MISO */
;;;461      GPIO_PinAFConfig(SD_SPI_MISO_GPIO_PORT, SD_SPI_MISO_SOURCE, SD_SPI_MISO_AF); 
000096  2205              MOVS     r2,#5
000098  210e              MOVS     r1,#0xe
00009a  4648              MOV      r0,r9
00009c  f7fffffe          BL       GPIO_PinAFConfig
;;;462    
;;;463      /* Connect PXx to SD_SPI_MOSI */
;;;464      GPIO_PinAFConfig(SD_SPI_MOSI_GPIO_PORT, SD_SPI_MOSI_SOURCE, SD_SPI_MOSI_AF);  
0000a0  2205              MOVS     r2,#5
0000a2  210f              MOVS     r1,#0xf
0000a4  4648              MOV      r0,r9
0000a6  f7fffffe          BL       GPIO_PinAFConfig
;;;465      
;;;466      /*!< SD_SPI Config */
;;;467      SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
0000aa  f8ad4008          STRH     r4,[sp,#8]
;;;468      SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
0000ae  f44f7082          MOV      r0,#0x104
0000b2  f8ad000a          STRH     r0,[sp,#0xa]
;;;469      SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
;;;470      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
;;;471      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
0000b6  f8ad5010          STRH     r5,[sp,#0x10]
;;;472      SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
0000ba  0268              LSLS     r0,r5,#9
;;;473      SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
0000bc  f8ad4014          STRH     r4,[sp,#0x14]
0000c0  f8ad400c          STRH     r4,[sp,#0xc]          ;469
0000c4  f8ad0012          STRH     r0,[sp,#0x12]         ;472
;;;474    
;;;475      SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
0000c8  f8ad4016          STRH     r4,[sp,#0x16]
;;;476      SPI_InitStructure.SPI_CRCPolynomial = 7;
0000cc  2007              MOVS     r0,#7
;;;477      SPI_Init(SD_SPI, &SPI_InitStructure);
0000ce  4c0b              LDR      r4,|L4.252|
0000d0  f8ad0018          STRH     r0,[sp,#0x18]         ;476
0000d4  f8ad600e          STRH     r6,[sp,#0xe]          ;470
0000d8  a902              ADD      r1,sp,#8
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       SPI_Init
;;;478      
;;;479      SPI_Cmd(SD_SPI, ENABLE); /*!< SD_SPI enable */
0000e0  2101              MOVS     r1,#1
0000e2  4620              MOV      r0,r4
0000e4  f7fffffe          BL       SPI_Cmd
;;;480    }
0000e8  b007              ADD      sp,sp,#0x1c
0000ea  e8bd83f0          POP      {r4-r9,pc}
;;;481    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L4.240|
                          DCD      0x40020400
                  |L4.244|
                          DCD      0x40020c00
                  |L4.248|
                          DCD      0x40021000
                  |L4.252|
                          DCD      0x40003800

                          AREA ||i.STM_EVAL_COMInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_COMInit PROC
;;;334      */
;;;335    void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;336    {
000004  460f              MOV      r7,r1
000006  4604              MOV      r4,r0
;;;337      GPIO_InitTypeDef GPIO_InitStructure;
;;;338    
;;;339      /* Enable GPIO clock */
;;;340      RCC_AHBPeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
000008  4929              LDR      r1,|L5.176|
00000a  4829              LDR      r0,|L5.176|
00000c  3108              ADDS     r1,r1,#8
00000e  f8500024          LDR      r0,[r0,r4,LSL #2]
000012  f8511024          LDR      r1,[r1,r4,LSL #2]
000016  4308              ORRS     r0,r0,r1
000018  2101              MOVS     r1,#1
00001a  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;341    
;;;342      /* Enable UART clock */
;;;343      RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
00001e  4824              LDR      r0,|L5.176|
000020  2101              MOVS     r1,#1
000022  3808              SUBS     r0,r0,#8
000024  f8500024          LDR      r0,[r0,r4,LSL #2]
000028  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;344    
;;;345      /* Connect PXx to USARTx_Tx */
;;;346      GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);
00002c  4820              LDR      r0,|L5.176|
00002e  4d21              LDR      r5,|L5.180|
000030  3830              SUBS     r0,r0,#0x30
000032  5d02              LDRB     r2,[r0,r4]
000034  1f00              SUBS     r0,r0,#4
000036  5d01              LDRB     r1,[r0,r4]
000038  f8550024          LDR      r0,[r5,r4,LSL #2]
00003c  f7fffffe          BL       GPIO_PinAFConfig
;;;347    
;;;348      /* Connect PXx to USARTx_Rx */
;;;349      GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);
000040  481b              LDR      r0,|L5.176|
000042  f1050608          ADD      r6,r5,#8
000046  382e              SUBS     r0,r0,#0x2e
000048  5d02              LDRB     r2,[r0,r4]
00004a  1f00              SUBS     r0,r0,#4
00004c  5d01              LDRB     r1,[r0,r4]
00004e  f8560024          LDR      r0,[r6,r4,LSL #2]
000052  f7fffffe          BL       GPIO_PinAFConfig
;;;350      
;;;351      /* Configure USART Tx as alternate function push-pull */
;;;352      GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
000056  4816              LDR      r0,|L5.176|
;;;353      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;354      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
;;;355      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;356      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
;;;357      GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
000058  4669              MOV      r1,sp
00005a  382c              SUBS     r0,r0,#0x2c           ;352
00005c  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;352
000060  9000              STR      r0,[sp,#0]            ;353
000062  2002              MOVS     r0,#2                 ;353
000064  f88d0004          STRB     r0,[sp,#4]            ;353
000068  2003              MOVS     r0,#3                 ;354
00006a  f88d0005          STRB     r0,[sp,#5]            ;354
00006e  2000              MOVS     r0,#0                 ;355
000070  f88d0006          STRB     r0,[sp,#6]            ;355
000074  2001              MOVS     r0,#1                 ;356
000076  f88d0007          STRB     r0,[sp,#7]            ;356
00007a  f8550024          LDR      r0,[r5,r4,LSL #2]
00007e  f7fffffe          BL       GPIO_Init
;;;358        
;;;359      /* Configure USART Rx as alternate function push-pull */
;;;360      GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
000082  480b              LDR      r0,|L5.176|
;;;361      GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
000084  4669              MOV      r1,sp
000086  3828              SUBS     r0,r0,#0x28           ;360
000088  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;360
00008c  9000              STR      r0,[sp,#0]
00008e  f8560024          LDR      r0,[r6,r4,LSL #2]
000092  f7fffffe          BL       GPIO_Init
;;;362    
;;;363      /* USART configuration */
;;;364      USART_Init(COM_USART[COM], USART_InitStruct);
000096  3d08              SUBS     r5,r5,#8
000098  4639              MOV      r1,r7
00009a  f8550024          LDR      r0,[r5,r4,LSL #2]
00009e  f7fffffe          BL       USART_Init
;;;365        
;;;366      /* Enable USART */
;;;367      USART_Cmd(COM_USART[COM], ENABLE);
0000a2  f8550024          LDR      r0,[r5,r4,LSL #2]
0000a6  2101              MOVS     r1,#1
0000a8  f7fffffe          BL       USART_Cmd
;;;368    }
0000ac  e8bd81fc          POP      {r2-r8,pc}
;;;369    
                          ENDP

                  |L5.176|
                          DCD      ||.constdata||+0x34
                  |L5.180|
                          DCD      ||.data||+0x8

                          AREA ||i.STM_EVAL_LEDInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDInit PROC
;;;179      */
;;;180    void STM_EVAL_LEDInit(Led_TypeDef Led)
000000  b57c              PUSH     {r2-r6,lr}
;;;181    {
000002  4604              MOV      r4,r0
;;;182      GPIO_InitTypeDef  GPIO_InitStructure;
;;;183      
;;;184      /* Enable the GPIO_LED Clock */
;;;185      RCC_AHBPeriphClockCmd(GPIO_CLK[Led], ENABLE);
000004  4810              LDR      r0,|L6.72|
000006  2101              MOVS     r1,#1
000008  f8500024          LDR      r0,[r0,r4,LSL #2]
00000c  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;186    
;;;187      /* Configure the GPIO_LED pin */
;;;188      GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
000010  4d0d              LDR      r5,|L6.72|
;;;189      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
;;;190      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;191      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;192      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
;;;193      GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
000012  4e0e              LDR      r6,|L6.76|
000014  3d22              SUBS     r5,r5,#0x22           ;188
000016  4669              MOV      r1,sp
000018  f8350014          LDRH     r0,[r5,r4,LSL #1]     ;188
00001c  9000              STR      r0,[sp,#0]            ;189
00001e  2001              MOVS     r0,#1                 ;189
000020  f88d0004          STRB     r0,[sp,#4]            ;189
000024  2000              MOVS     r0,#0                 ;190
000026  f88d0006          STRB     r0,[sp,#6]            ;190
00002a  f88d0007          STRB     r0,[sp,#7]            ;191
00002e  2003              MOVS     r0,#3                 ;192
000030  f88d0005          STRB     r0,[sp,#5]            ;192
000034  f8560024          LDR      r0,[r6,r4,LSL #2]
000038  f7fffffe          BL       GPIO_Init
;;;194      GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
00003c  f8561024          LDR      r1,[r6,r4,LSL #2]
000040  f8350014          LDRH     r0,[r5,r4,LSL #1]
000044  8308              STRH     r0,[r1,#0x18]
;;;195    }
000046  bd7c              POP      {r2-r6,pc}
;;;196    
                          ENDP

                  |L6.72|
                          DCD      ||.constdata||+0x44
                  |L6.76|
                          DCD      ||.data||+0x18

                          AREA ||i.STM_EVAL_LEDOff||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDOff PROC
;;;221      */
;;;222    void STM_EVAL_LEDOff(Led_TypeDef Led)
000000  4903              LDR      r1,|L7.16|
;;;223    {
;;;224      GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];  
000002  4a04              LDR      r2,|L7.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  8301              STRH     r1,[r0,#0x18]
;;;225    }
00000e  4770              BX       lr
;;;226    
                          ENDP

                  |L7.16|
                          DCD      ||.constdata||+0x22
                  |L7.20|
                          DCD      ||.data||+0x18

                          AREA ||i.STM_EVAL_LEDOn||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDOn PROC
;;;206      */
;;;207    void STM_EVAL_LEDOn(Led_TypeDef Led)
000000  4903              LDR      r1,|L8.16|
;;;208    {
;;;209      GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];
000002  4a04              LDR      r2,|L8.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  8341              STRH     r1,[r0,#0x1a]
;;;210    }
00000e  4770              BX       lr
;;;211    
                          ENDP

                  |L8.16|
                          DCD      ||.constdata||+0x22
                  |L8.20|
                          DCD      ||.data||+0x18

                          AREA ||i.STM_EVAL_LEDToggle||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDToggle PROC
;;;236      */
;;;237    void STM_EVAL_LEDToggle(Led_TypeDef Led)
000000  4904              LDR      r1,|L9.20|
;;;238    {
;;;239      GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  8a8a              LDRH     r2,[r1,#0x14]
000008  4b03              LDR      r3,|L9.24|
00000a  f8330010          LDRH     r0,[r3,r0,LSL #1]
00000e  4042              EORS     r2,r2,r0
000010  828a              STRH     r2,[r1,#0x14]
;;;240    }
000012  4770              BX       lr
;;;241    
                          ENDP

                  |L9.20|
                          DCD      ||.data||+0x18
                  |L9.24|
                          DCD      ||.constdata||+0x22

                          AREA ||i.STM_EVAL_PBGetState||, CODE, READONLY, ALIGN=2

                  STM_EVAL_PBGetState PROC
;;;317      */
;;;318    uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
000000  4903              LDR      r1,|L10.16|
;;;319    {
;;;320      /* There is no Wakeup and Tamper pins on STM32L152-EVAL. */
;;;321      
;;;322      return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
000002  4a04              LDR      r2,|L10.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  f7ffbffe          B.W      GPIO_ReadInputDataBit
;;;323    }
;;;324    
                          ENDP

                  |L10.16|
                          DCD      ||.constdata||+0x54
                  |L10.20|
                          DCD      ||.data||+0x28

                          AREA ||i.STM_EVAL_PBInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_PBInit PROC
;;;258      */
;;;259    void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
000000  b570              PUSH     {r4-r6,lr}
;;;260    {
000002  4604              MOV      r4,r0
;;;261      GPIO_InitTypeDef GPIO_InitStructure;
;;;262      EXTI_InitTypeDef EXTI_InitStructure;
;;;263      NVIC_InitTypeDef NVIC_InitStructure;
;;;264    
;;;265      /* There is no Wakeup and Tamper buttons on STM32L152-EVAL. */
;;;266       
;;;267      /* Enable the BUTTON Clock */
;;;268      RCC_AHBPeriphClockCmd(BUTTON_CLK[Button], ENABLE);
000004  4824              LDR      r0,|L11.152|
000006  460e              MOV      r6,r1                 ;260
000008  b086              SUB      sp,sp,#0x18           ;260
00000a  f8500024          LDR      r0,[r0,r4,LSL #2]
00000e  2101              MOVS     r1,#1
000010  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;269      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
000014  2101              MOVS     r1,#1
000016  4608              MOV      r0,r1
000018  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;270    
;;;271      /* Configure Button pin as input */
;;;272      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
;;;273      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;274      GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
00001c  481e              LDR      r0,|L11.152|
00001e  2500              MOVS     r5,#0                 ;272
000020  f88d5010          STRB     r5,[sp,#0x10]         ;272
000024  380c              SUBS     r0,r0,#0xc
000026  f88d5013          STRB     r5,[sp,#0x13]         ;273
00002a  f8300014          LDRH     r0,[r0,r4,LSL #1]
;;;275      GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
00002e  9003              STR      r0,[sp,#0xc]
000030  481a              LDR      r0,|L11.156|
000032  a903              ADD      r1,sp,#0xc
000034  f8500024          LDR      r0,[r0,r4,LSL #2]
000038  f7fffffe          BL       GPIO_Init
;;;276    
;;;277      if (Button_Mode == BUTTON_MODE_EXTI)
00003c  2e01              CMP      r6,#1
00003e  d128              BNE      |L11.146|
;;;278      {
;;;279        /* Connect Button EXTI Line to Button GPIO Pin */
;;;280        SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
000040  4815              LDR      r0,|L11.152|
000042  384a              SUBS     r0,r0,#0x4a
000044  5d01              LDRB     r1,[r0,r4]
000046  1f80              SUBS     r0,r0,#6
000048  5d00              LDRB     r0,[r0,r4]
00004a  f7fffffe          BL       SYSCFG_EXTILineConfig
;;;281        /* Configure Button EXTI line */
;;;282        EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
00004e  4812              LDR      r0,|L11.152|
000050  3018              ADDS     r0,r0,#0x18
000052  f8300014          LDRH     r0,[r0,r4,LSL #1]
;;;283        EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
000056  9000              STR      r0,[sp,#0]
000058  f88d5004          STRB     r5,[sp,#4]
;;;284        
;;;285        if(Button != BUTTON_KEY) 
00005c  b10c              CBZ      r4,|L11.98|
;;;286        {
;;;287          EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
00005e  200c              MOVS     r0,#0xc
000060  e000              B        |L11.100|
                  |L11.98|
;;;288        }
;;;289        else
;;;290        {
;;;291          EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
000062  2008              MOVS     r0,#8
                  |L11.100|
000064  f88d0005          STRB     r0,[sp,#5]
;;;292        }
;;;293        EXTI_InitStructure.EXTI_LineCmd = ENABLE;
000068  2501              MOVS     r5,#1
00006a  f88d5006          STRB     r5,[sp,#6]
;;;294        EXTI_Init(&EXTI_InitStructure);
00006e  4668              MOV      r0,sp
000070  f7fffffe          BL       EXTI_Init
;;;295    
;;;296        /* Enable and set Button EXTI Interrupt to the lowest priority */
;;;297        NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
000074  4808              LDR      r0,|L11.152|
000076  3844              SUBS     r0,r0,#0x44
000078  5d00              LDRB     r0,[r0,r4]
00007a  f88d0008          STRB     r0,[sp,#8]
;;;298        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
00007e  200f              MOVS     r0,#0xf
000080  f88d0009          STRB     r0,[sp,#9]
;;;299        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
000084  f88d000a          STRB     r0,[sp,#0xa]
;;;300        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000088  f88d500b          STRB     r5,[sp,#0xb]
;;;301    
;;;302        NVIC_Init(&NVIC_InitStructure); 
00008c  a802              ADD      r0,sp,#8
00008e  f7fffffe          BL       NVIC_Init
                  |L11.146|
;;;303      }
;;;304    }
000092  b006              ADD      sp,sp,#0x18
000094  bd70              POP      {r4-r6,pc}
;;;305    
                          ENDP

000096  0000              DCW      0x0000
                  |L11.152|
                          DCD      ||.constdata||+0x60
                  |L11.156|
                          DCD      ||.data||+0x28

                          AREA ||i.sEE_LowLevel_DMAConfig||, CODE, READONLY, ALIGN=2

                  sEE_LowLevel_DMAConfig PROC
;;;697      */
;;;698    void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
000000  4b08              LDR      r3,|L12.36|
;;;699    { 
000002  6058              STR      r0,[r3,#4]  ; sEEDMA_InitStructure
000004  b132              CBZ      r2,|L12.20|
;;;700      /* Initialize the DMA with the new parameters */
;;;701      if (Direction == sEE_DIRECTION_TX)
;;;702      {
;;;703        /* Configure the DMA Tx Channel with the buffer address and the buffer size */
;;;704        sEEDMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
;;;705        sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;    
;;;706        sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
;;;707        DMA_Init(sEE_I2C_DMA_CHANNEL_TX, &sEEDMA_InitStructure);  
;;;708      }
;;;709      else
;;;710      { 
;;;711        /* Configure the DMA Rx Channel with the buffer address and the buffer size */
;;;712        sEEDMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
;;;713        sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
000006  2000              MOVS     r0,#0
000008  e9c30102          STRD     r0,r1,[r3,#8]
;;;714        sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
;;;715        DMA_Init(sEE_I2C_DMA_CHANNEL_RX, &sEEDMA_InitStructure);    
00000c  4619              MOV      r1,r3
00000e  4806              LDR      r0,|L12.40|
                  |L12.16|
000010  f7ffbffe          B.W      DMA_Init
                  |L12.20|
000014  2010              MOVS     r0,#0x10              ;705
000016  e9c30102          STRD     r0,r1,[r3,#8]         ;705
00001a  4803              LDR      r0,|L12.40|
00001c  4901              LDR      r1,|L12.36|
00001e  3814              SUBS     r0,r0,#0x14           ;707
000020  e7f6              B        |L12.16|
;;;716      }
;;;717    }
;;;718    
                          ENDP

000022  0000              DCW      0x0000
                  |L12.36|
                          DCD      ||.bss||
                  |L12.40|
                          DCD      0x40026080

                          AREA ||i.sEE_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  sEE_LowLevel_DeInit PROC
;;;562      */
;;;563    void sEE_LowLevel_DeInit(void)
000000  b53e              PUSH     {r1-r5,lr}
;;;564    {
;;;565      GPIO_InitTypeDef  GPIO_InitStructure; 
;;;566      NVIC_InitTypeDef NVIC_InitStructure;    
;;;567         
;;;568      /* sEE_I2C Peripheral Disable */
;;;569      I2C_Cmd(sEE_I2C, DISABLE);
000002  4c23              LDR      r4,|L13.144|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       I2C_Cmd
;;;570     
;;;571      /* sEE_I2C DeInit */
;;;572      I2C_DeInit(sEE_I2C);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       I2C_DeInit
;;;573    
;;;574      /*!< sEE_I2C Periph clock disable */
;;;575      RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f1000          MOV      r0,#0x200000
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;576        
;;;577      /*!< GPIO configuration */  
;;;578      /*!< Configure sEE_I2C pins: SCL */
;;;579      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
00001c  2040              MOVS     r0,#0x40
;;;580      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00001e  2400              MOVS     r4,#0
;;;581      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;582      GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
000020  4d1c              LDR      r5,|L13.148|
000022  9001              STR      r0,[sp,#4]            ;580
000024  f88d4008          STRB     r4,[sp,#8]            ;580
000028  f88d400b          STRB     r4,[sp,#0xb]          ;581
00002c  a901              ADD      r1,sp,#4
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       GPIO_Init
;;;583    
;;;584      /*!< Configure sEE_I2C pins: SDA */
;;;585      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
000034  2080              MOVS     r0,#0x80
;;;586      GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000036  9001              STR      r0,[sp,#4]
000038  a901              ADD      r1,sp,#4
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       GPIO_Init
;;;587      
;;;588      /* Configure and enable I2C DMA TX Channel interrupt */
;;;589      NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
000040  2010              MOVS     r0,#0x10
000042  f88d0000          STRB     r0,[sp,#0]
;;;590      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
000046  f88d4001          STRB     r4,[sp,#1]
;;;591      NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
00004a  f88d4002          STRB     r4,[sp,#2]
;;;592      NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
00004e  f88d4003          STRB     r4,[sp,#3]
;;;593      NVIC_Init(&NVIC_InitStructure);
000052  4668              MOV      r0,sp
000054  f7fffffe          BL       NVIC_Init
;;;594    
;;;595      /* Configure and enable I2C DMA RX Channel interrupt */
;;;596      NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
000058  2011              MOVS     r0,#0x11
00005a  f88d0000          STRB     r0,[sp,#0]
;;;597      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
00005e  f88d4001          STRB     r4,[sp,#1]
;;;598      NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
000062  f88d4002          STRB     r4,[sp,#2]
;;;599      NVIC_Init(&NVIC_InitStructure);   
000066  4668              MOV      r0,sp
000068  f7fffffe          BL       NVIC_Init
;;;600      
;;;601      /* Disable and Deinitialize the DMA channels */
;;;602      DMA_Cmd(sEE_I2C_DMA_CHANNEL_TX, DISABLE);
00006c  4c0a              LDR      r4,|L13.152|
00006e  2100              MOVS     r1,#0
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       DMA_Cmd
;;;603      DMA_Cmd(sEE_I2C_DMA_CHANNEL_RX, DISABLE);
000076  4d08              LDR      r5,|L13.152|
000078  2100              MOVS     r1,#0
00007a  3514              ADDS     r5,r5,#0x14
00007c  4628              MOV      r0,r5
00007e  f7fffffe          BL       DMA_Cmd
;;;604      DMA_DeInit(sEE_I2C_DMA_CHANNEL_TX);
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       DMA_DeInit
;;;605      DMA_DeInit(sEE_I2C_DMA_CHANNEL_RX);
000088  4628              MOV      r0,r5
00008a  f7fffffe          BL       DMA_DeInit
;;;606    }
00008e  bd3e              POP      {r1-r5,pc}
;;;607    
                          ENDP

                  |L13.144|
                          DCD      0x40005400
                  |L13.148|
                          DCD      0x40020400
                  |L13.152|
                          DCD      0x4002606c

                          AREA ||i.sEE_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  sEE_LowLevel_Init PROC
;;;612      */
;;;613    void sEE_LowLevel_Init(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;614    {
;;;615      GPIO_InitTypeDef  GPIO_InitStructure;
;;;616      NVIC_InitTypeDef NVIC_InitStructure;  
;;;617       
;;;618      /*!< sEE_I2C Periph clock enable */
;;;619      RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
000002  2101              MOVS     r1,#1
000004  054c              LSLS     r4,r1,#21
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;620      
;;;621      /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
;;;622      RCC_AHBPeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;623    
;;;624      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
000014  2101              MOVS     r1,#1
000016  4608              MOV      r0,r1
000018  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;625      
;;;626      /* Reset sEE_I2C peripheral */
;;;627      RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;628      
;;;629      /* Release reset signal of sEE_I2C IP */
;;;630      RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
000024  2100              MOVS     r1,#0
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;631        
;;;632      /*!< GPIO configuration */  
;;;633      /* Connect PXx to I2C_SCL*/
;;;634      GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
00002c  4e33              LDR      r6,|L14.252|
00002e  2204              MOVS     r2,#4
000030  2106              MOVS     r1,#6
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       GPIO_PinAFConfig
;;;635    
;;;636      /* Connect PXx to I2C_SDA*/
;;;637      GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
000038  2204              MOVS     r2,#4
00003a  2107              MOVS     r1,#7
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       GPIO_PinAFConfig
;;;638    
;;;639      /*!< Configure sEE_I2C pins: SCL */   
;;;640      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
000042  2040              MOVS     r0,#0x40
;;;641      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000044  9000              STR      r0,[sp,#0]
000046  2002              MOVS     r0,#2
000048  f88d0004          STRB     r0,[sp,#4]
;;;642      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
00004c  2003              MOVS     r0,#3
00004e  f88d0005          STRB     r0,[sp,#5]
;;;643      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
000052  2701              MOVS     r7,#1
000054  f88d7006          STRB     r7,[sp,#6]
;;;644      GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
000058  2400              MOVS     r4,#0
00005a  f88d4007          STRB     r4,[sp,#7]
;;;645      GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
00005e  4669              MOV      r1,sp
000060  4630              MOV      r0,r6
000062  f7fffffe          BL       GPIO_Init
;;;646    
;;;647      /*!< Configure sEE_I2C pins: SDA */
;;;648      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
000066  2580              MOVS     r5,#0x80
;;;649      GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000068  4669              MOV      r1,sp
00006a  4630              MOV      r0,r6
00006c  9500              STR      r5,[sp,#0]
00006e  f7fffffe          BL       GPIO_Init
;;;650    
;;;651    
;;;652      /* Configure and enable I2C DMA TX Channel interrupt */
;;;653      NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
000072  2610              MOVS     r6,#0x10
000074  f88d6008          STRB     r6,[sp,#8]
;;;654      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
000078  f88d4009          STRB     r4,[sp,#9]
;;;655      NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
00007c  f88d400a          STRB     r4,[sp,#0xa]
;;;656      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000080  f88d700b          STRB     r7,[sp,#0xb]
;;;657      NVIC_Init(&NVIC_InitStructure);
000084  a802              ADD      r0,sp,#8
000086  f7fffffe          BL       NVIC_Init
;;;658    
;;;659      /* Configure and enable I2C DMA RX Channel interrupt */
;;;660      NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
00008a  2011              MOVS     r0,#0x11
00008c  f88d0008          STRB     r0,[sp,#8]
;;;661      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
000090  f88d4009          STRB     r4,[sp,#9]
;;;662      NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
000094  f88d400a          STRB     r4,[sp,#0xa]
;;;663      NVIC_Init(&NVIC_InitStructure);  
000098  a802              ADD      r0,sp,#8
00009a  f7fffffe          BL       NVIC_Init
;;;664      
;;;665      /*!< I2C DMA TX and RX channels configuration */
;;;666      /* Enable the DMA clock */
;;;667      RCC_AHBPeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
00009e  2101              MOVS     r1,#1
0000a0  0608              LSLS     r0,r1,#24
0000a2  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;668    
;;;669      /* I2C TX DMA Channel configuration */
;;;670      DMA_DeInit(sEE_I2C_DMA_CHANNEL_TX);
0000a6  4f16              LDR      r7,|L14.256|
0000a8  4638              MOV      r0,r7
0000aa  f7fffffe          BL       DMA_DeInit
;;;671      sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
0000ae  4816              LDR      r0,|L14.264|
0000b0  4914              LDR      r1,|L14.260|
0000b2  c052              STM      r0!,{r1,r4,r6}
;;;672      sEEDMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)0;   /* This parameter will be configured durig communication */
;;;673      sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;    /* This parameter will be configured durig communication */
;;;674      sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;            /* This parameter will be configured durig communication */
0000b4  f64f71ff          MOV      r1,#0xffff
0000b8  c032              STM      r0!,{r1,r4,r5}
;;;675      sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
;;;676      sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
;;;677      sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_MemoryDataSize_Byte;
;;;678      sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
;;;679      sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
;;;680      sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
0000ba  f44f5140          MOV      r1,#0x3000
0000be  f8404918          STR      r4,[r0],#-0x18        ;677  ; sEEDMA_InitStructure
0000c2  61c4              STR      r4,[r0,#0x1c]  ; sEEDMA_InitStructure
0000c4  e9c04108          STRD     r4,r1,[r0,#0x20]
;;;681      sEEDMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
;;;682      DMA_Init(sEE_I2C_DMA_CHANNEL_TX, &sEEDMA_InitStructure);  
0000c8  6284              STR      r4,[r0,#0x28]  ; sEEDMA_InitStructure
0000ca  490f              LDR      r1,|L14.264|
0000cc  4638              MOV      r0,r7
0000ce  f7fffffe          BL       DMA_Init
;;;683      
;;;684      /* I2C RX DMA Channel configuration */
;;;685      DMA_DeInit(sEE_I2C_DMA_CHANNEL_RX);
0000d2  4c0b              LDR      r4,|L14.256|
0000d4  3414              ADDS     r4,r4,#0x14
0000d6  4620              MOV      r0,r4
0000d8  f7fffffe          BL       DMA_DeInit
;;;686      DMA_Init(sEE_I2C_DMA_CHANNEL_RX, &sEEDMA_InitStructure);  
0000dc  490a              LDR      r1,|L14.264|
0000de  4620              MOV      r0,r4
0000e0  f7fffffe          BL       DMA_Init
;;;687      
;;;688      /* Enable the DMA Channels Interrupts */
;;;689      DMA_ITConfig(sEE_I2C_DMA_CHANNEL_TX, DMA_IT_TC, ENABLE);
0000e4  2201              MOVS     r2,#1
0000e6  2102              MOVS     r1,#2
0000e8  4638              MOV      r0,r7
0000ea  f7fffffe          BL       DMA_ITConfig
;;;690      DMA_ITConfig(sEE_I2C_DMA_CHANNEL_RX, DMA_IT_TC, ENABLE);    
0000ee  2201              MOVS     r2,#1
0000f0  2102              MOVS     r1,#2
0000f2  4620              MOV      r0,r4
0000f4  f7fffffe          BL       DMA_ITConfig
;;;691    }
0000f8  bdfe              POP      {r1-r7,pc}
;;;692    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L14.252|
                          DCD      0x40020400
                  |L14.256|
                          DCD      0x4002606c
                  |L14.260|
                          DCD      0x40005410
                  |L14.264|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  sEEDMA_InitStructure
                          %        44

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  COM_TX_PIN_SOURCE
000000  050a              DCB      0x05,0x0a
                  COM_RX_PIN_SOURCE
000002  060b              DCB      0x06,0x0b
                  COM_TX_AF
000004  0707              DCB      0x07,0x07
                  COM_RX_AF
000006  0707              DCB      0x07,0x07
                  COM_TX_PIN
000008  00200400          DCW      0x0020,0x0400
                  COM_RX_PIN
00000c  00400800          DCW      0x0040,0x0800
                  BUTTON_PORT_SOURCE
000010  00040404          DCB      0x00,0x04,0x04,0x04
000014  0404              DCB      0x04,0x04
                  BUTTON_PIN_SOURCE
000016  000b              DCB      0x00,0x0b
000018  0c090a08          DCB      0x0c,0x09,0x0a,0x08
                  BUTTON_IRQn
00001c  06282817          DCB      0x06,0x28,0x28,0x17
000020  2817              DCB      0x28,0x17
                  GPIO_PIN
000022  0001              DCW      0x0001
000024  00020010          DCW      0x0002,0x0010
000028  0020              DCW      0x0020
00002a  0000              DCB      0x00,0x00
                  COM_USART_CLK
                          DCD      0x00020000
                          DCD      0x00040000
                  COM_TX_PORT_CLK
                          DCD      0x00000008
                          DCD      0x00000004
                  COM_RX_PORT_CLK
                          DCD      0x00000008
                          DCD      0x00000004
                  GPIO_CLK
                          DCD      0x00000008
                          DCD      0x00000008
                          DCD      0x00000008
                          DCD      0x00000008
                  BUTTON_PIN
000054  00010800          DCW      0x0001,0x0800
000058  10000200          DCW      0x1000,0x0200
00005c  04000100          DCW      0x0400,0x0100
                  BUTTON_CLK
                          DCD      0x00000001
                          DCD      0x00000010
                          DCD      0x00000010
                          DCD      0x00000010
                          DCD      0x00000010
                          DCD      0x00000010
                  BUTTON_EXTI_LINE
000078  00010800          DCW      0x0001,0x0800
00007c  10000200          DCW      0x1000,0x0200
000080  04000100          DCW      0x0400,0x0100

                          AREA ||.data||, DATA, ALIGN=2

                  COM_USART
                          DCD      0x40004400
                          DCD      0x40004800
                  COM_TX_PORT
                          DCD      0x40020c00
                          DCD      0x40020800
                  COM_RX_PORT
                          DCD      0x40020c00
                          DCD      0x40020800
                  GPIO_PORT
                          DCD      0x40020c00
                          DCD      0x40020c00
                          DCD      0x40020c00
                          DCD      0x40020c00
                  BUTTON_PORT
                          DCD      0x40020000
                          DCD      0x40021000
                          DCD      0x40021000
                          DCD      0x40021000
                          DCD      0x40021000
                          DCD      0x40021000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Utilities\\STM32_EVAL\\STM32L152_EVAL\\stm32l152_eval.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32l152_eval_c_c84236cb____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32l152_eval_c_c84236cb____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32l152_eval_c_c84236cb____REVSH|
#line 144
|__asm___16_stm32l152_eval_c_c84236cb____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
